<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>Wim Vanderbauwhede</title>
    <generator uri="https://github.com/jekyll/jekyll">Jekyll v3.8.7</generator>
		<icon>https://wimvanderbauwhede.github.io/apple-touch-icon-precomposed.png</icon>
    <subtitle>Wim Vanderbauwhede</subtitle>
    <link href="https://wimvanderbauwhede.github.io/atom.xml" rel="self"/>
    <link href="https://wimvanderbauwhede.github.io/" rel="alternate" type="text/html"/>
    <updated>2021-10-18T21:00:33+01:00</updated>
    <id>https://wimvanderbauwhede.github.io/</id>
    <author>
			<name>Wim Vanderbauwhede</name>
			<uri>https://wimvanderbauwhede.github.io/</uri>
			
		</author>

    
    <entry>
        <title>Why I wrote Haku</title>
        <link href="https://wimvanderbauwhede.github.io/articles/why-i-wrote-haku/"/>
        <updated>2021-10-17T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/why-i-wrote-haku</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/why-i-wrote-haku_1600x600.png&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;A few weeks ago I released &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku&quot;&gt;Haku&lt;/a&gt;, a Japanese natural-language programming language. Haku is a strict functional language with implicit typing, and &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku/src/branch/main/examples/pwc131-t1.haku&quot;&gt;an example program&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;div style=&quot;writing-mode: vertical-rl&quot;&gt;
&lt;pre&gt;
裂くとはパーツとヨウソで
若しパーツが空に等しいなら
［［ヨウソ］］ですけど
そうでなければ、
一パートはパーツの頭、
一パーツ一はパーツの尻尾、
一マエはパートの頭、
では
若しマエが〈ヨウソ引く一〉に等しいなら
［ヨウソ・パート］・パーツ一ですが
そうでなければ
［ヨウソ］・パーツ
の事です。

本とは
列は壱と弐と三と四と五と七と八と十一と十三と十六と十七、
仮一は列と空を裂くので畳み込む、
仮二は逆な仮一、
魄は仮二を逆で写像する、
魄を見せる
の事です。
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku#haku&quot;&gt;repository README&lt;/a&gt; explains the language and gives some background, as does this &lt;a href=&quot;https://www.slideshare.net/WimVanderbauwhede/haku-a-toy-functional-language-based-on-literary-japanese&quot;&gt;presentation&lt;/a&gt;. I have also written a separate post about the &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/haku-in-raku&quot;&gt;implementation of Haku in Raku&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This article is about my motivation for creating Haku.&lt;/p&gt;

&lt;p&gt;I am interested in how programming languages influence the programmer&amp;#39;s thinking (the old adage of &amp;quot;to the programmer with a hammer, everything looks like a thumb&amp;quot;). &lt;/p&gt;

&lt;p&gt;From personal experience, I observe that my thinking patterns are quite different when I program in a functional language, an imperative one or an object-oriented one. There is also a marked difference between programming in a statically or dynamically typed language.&lt;/p&gt;

&lt;p&gt;But what about the influence of the programmer&amp;#39;s native language? Most programming languages are based on English, and in particular function calls typically use English word order. &lt;/p&gt;

&lt;h2&gt;Arithmetic in English and Flemish&lt;/h2&gt;

&lt;p&gt;For example, let&amp;#39;s consider the common arithmetic operations +, -, *, /. If we use named functions rather than operators for these, and used the common parentheses-and-commas syntax for function calls, we get something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;A+B: add(A,B) 
A-B: subtract(A,B)
A*B: multiply(A,B)
A/B: divide(A,B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In English we would express this most commonly as an infinitive or as an imperative. For the infinitive, we have:&lt;/p&gt;

&lt;!-- &lt;div class=&quot;highlight&quot; style=&quot;background-color: #eadcb2&quot;&gt;--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;to add A and/to B
to subtract A and/from B
to multiply A and B
to divide A and/by B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is &lt;code&gt;&amp;#39;to&amp;#39; &amp;lt;verb&amp;gt; A &amp;#39;and&amp;#39; B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the imperative, we have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;add A and/to B
subtract A and/from B
multiply A and B
divide A and/by B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pattern is &lt;code&gt;&amp;lt;verb&amp;gt; A &amp;#39;and&amp;#39; B&lt;/code&gt;, so the same pattern apart from the &lt;code&gt;to&lt;/code&gt;. And it is easy to see how this pattern informed the typical function call syntax &lt;code&gt;&amp;lt;verb&amp;gt; &amp;#39;(&amp;#39; A &amp;#39;,&amp;#39; B &amp;#39;)&amp;#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, in Flemish (or Dutch), the order of the arguments is quite different. For the infinitive, we have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;A en/bij B optellen; A optellen bij B
A en/van B aftrekken; A aftrekken van B
A en/met B vermenigvuldigen; A vermenigvuldigen met B
A en/door B delen; A delen door B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first variant has the pattern &lt;code&gt;A &amp;#39;en&amp;#39; B &amp;lt;verb&amp;gt;&lt;/code&gt;; the second variant needs a different preposition for each verb but the pattern is &lt;code&gt;A &amp;lt;verb&amp;gt; &amp;lt;preposition&amp;gt; B&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For the imperative, we have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;tel A op bij B; tel A en/bij B op
trek A af van B; trek A en/van B af
vermenigvuldig A en/met B
deel A en/door B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is not just one single general pattern but three: &lt;code&gt;&amp;lt;verb&amp;gt; A &amp;#39;en&amp;#39; B&lt;/code&gt;, 
&lt;code&gt;&amp;lt;verb&amp;gt; A &amp;lt;preposition&amp;gt; &amp;lt;preposition&amp;gt; B&lt;/code&gt; and  &lt;code&gt;&amp;lt;verb&amp;gt; A &amp;lt;preposition&amp;gt; B &amp;lt;preposition&amp;gt;&lt;/code&gt;, depending on whether the verb has a preposition as part of it or not, and on the position we choose for that preposition. &lt;/p&gt;

&lt;p&gt;So not only are word orders for infinitive and imperative quite different, there is no simple rule for the imperative word order. Which makes me wonder what programming languages would look like if their developers had not been English native speakers. &lt;/p&gt;

&lt;p&gt;That question becomes even more interesting for non-Indo-European languages, because despite the example above, there are still lots of grammatical similarities between languages such as English, French and German.&lt;/p&gt;

&lt;h2&gt;Japanese natural-language programming languages&lt;/h2&gt;

&lt;p&gt;There is one such language that particularly interests me and that is Japanese. I have been learning it for a long time and written &lt;a href=&quot;https://quickandtastycooking.org.uk/articles/&quot;&gt;several posts on Japanese language related topics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Besides having a very different grammar, Japanese has writing system that is a very different from the Latin alphabet as well as its own number system.&lt;/p&gt;

&lt;p&gt;So I decided to create a natural-language programming language based on Japanese. &lt;/p&gt;

&lt;p&gt;There are already several Japanese natural-language programming languages, all made by Japanese native speakers. &lt;a href=&quot;https://en.wikipedia.org/wiki/Non-English-based_programming_languages&quot;&gt;Wikipedia lists eight&lt;/a&gt; but there are actually only four that are still under active development: &lt;a href=&quot;https://dolittle.eplang.jp/&quot;&gt;Dolittle&lt;/a&gt;, &lt;a href=&quot;https://rdr.utopiat.net/&quot;&gt;Produire&lt;/a&gt;, &lt;a href=&quot;https://nadesi.com/top/&quot;&gt;Nadeshiko&lt;/a&gt; and &lt;a href=&quot;https://www.scripts-lab.co.jp/mind/whatsmind.html&quot;&gt;Mind&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Dolittle&lt;/em&gt; ドリトル is an object-oriented language specifically designed for teaching children to program and follows the &lt;a href=&quot;http://people.eecs.berkeley.edu/%7Ebh/logo.html&quot;&gt;Logo&lt;/a&gt; tradition with a turtle to draw shapes. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Produire&lt;/em&gt; プロデル is an imperative and object-oriented language but more general purpose. It also has a turtle library, so education is definitely one of the main design purposes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Nadeshiko&lt;/em&gt; なでしこ (meaning &amp;quot;pink&amp;quot;, the flower) is an open source general purpose imperative language.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mind&lt;/em&gt; is also imperative. Although it is actually a &lt;a href=&quot;https://www.forth.com/&quot;&gt;Forth&lt;/a&gt;-style stack-based language, in general structure it is similar to the other three. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these language are complete with support for graphics, networking etc and their own IDE and/or web-based editor. They are practical programming languages, so they all support the use of Arabic numerals as well as operators for arithmetic, logic and comparison operations. &lt;/p&gt;

&lt;h2&gt;Haku&lt;/h2&gt;

&lt;p&gt;My motivation to create Haku was not to create a practical language. I wanted to explore what the result is of creating a programming language based on a non-English language, in terms of syntax, grammar and vocabulary. In particular, I wanted to allow the programmer to control the register of the language to some extent (informal/polite/formal). &lt;a href=&quot;https://nadesi.com/v3/doc/index.php?%E6%96%87%E6%B3%95%2F%E6%95%AC%E8%AA%9E&amp;show&quot;&gt;Nadeshiko&lt;/a&gt; and &lt;a href=&quot;https://www.scripts-lab.co.jp/mind/ver8/doc/02-Program-Hyoki.html#okurigana&quot;&gt;Mind&lt;/a&gt; allow this to some extent, but I wanted even more flexibility.&lt;/p&gt;

&lt;h3&gt;Grammar&lt;/h3&gt;

&lt;p&gt;My main motivation for creating Haku is the difference in grammar between Japanese and most Indo-European languages.&lt;/p&gt;

&lt;p&gt;Notions such as &amp;quot;noun&amp;quot;, &amp;quot;adjective&amp;quot;, &amp;quot;adverb&amp;quot; and &amp;quot;verb&amp;quot; are not quite so clearly defined in Japanese. For example, consider the word &lt;em&gt;yasashii&lt;/em&gt;, &amp;quot;kind&amp;quot;. A person who is kind is a &lt;em&gt;yasashii hito&lt;/em&gt;. A person who is not kind is a &lt;em&gt;yasashikunai hito&lt;/em&gt;. But in its own right, &lt;em&gt;yasashiku&lt;/em&gt; is and adverb, and &lt;em&gt;~nai&lt;/em&gt; is the plain negative verb ending, e.g. &amp;quot;I don&amp;#39;t understand&amp;quot; is &lt;em&gt;wakaranai&lt;/em&gt;. And this &amp;quot;adjective&amp;quot; can get a past tense: &amp;quot;the person who was not kind&amp;quot; is &lt;em&gt;yasashikunakatta hito&lt;/em&gt;. And if we chain adjectives, e.g. &amp;quot;a kind and and clever person&amp;quot;, we get &lt;em&gt;yasashikute kashikoi hito&lt;/em&gt;. And indeed we can have &lt;em&gt;yasashihunakute　kashikonkatta hito&lt;/em&gt;, &amp;quot;the kerson who was not kind and smart&amp;quot;. It is also very easy to nominalise a verb or verbalise a noun by adding a suffix. &lt;/p&gt;

&lt;p&gt;The word order in a sentence is also quite different from most Indo-European languages. The typical order is main topic, secondary topic(s), verb. The function of the topics is indicated with what is called a &amp;quot;particle&amp;quot;, a kind of suffix. For example, &amp;quot;I ate the pudding with a spoon&amp;quot; is &lt;em&gt;purin wo supuun de tabeta&lt;/em&gt;. In this example, the main topic &amp;quot;I&amp;quot; is implied. Japanese is quite a parsimonious language: whenever possible, implied topics are left out, to be inferred from the context. &lt;/p&gt;

&lt;p&gt;Finally, compared to Indo-European languages, verb conjugation serves a different purpose in Japanese. For example in English, French and German, tenses are mainly uses to give precise indications of the time and duration of the action: simple past, present continuous, future perfect continuous etc. Japanese has essentially two tenses: the past and the non-past; and a form to similar to the -ing form in English to indicated an ongoing action, although that is again a loose approximation. However, there are many tenses to indicate modifiers to the verb to say e.g. that something is possible, that the speaker wants something, that a third party wants something, that the speaker has begun to do something, that someone is doing someone a favour and of course to express the level of politeness. For example, &lt;em&gt;shachou ha kiite kuremashita&lt;/em&gt; &amp;quot;the boss did me the favour of listening to me&amp;quot; (the &lt;em&gt;~mashita&lt;/em&gt; is a polite verb form), or &lt;em&gt;wasurekaketeita&lt;/em&gt; &amp;quot;I had begun to forget&amp;quot; (&lt;em&gt;~ta&lt;/em&gt; is a plain past, rather than polite).&lt;/p&gt;

&lt;p&gt;Putting at least some of this grammar in the programming language seemed like an interesting challenge to me. In particular, I was interested in how programmers perceive functions calls. Some time ago I ran a poll about this, and 3/4 of respondents answered &amp;quot;imperative&amp;quot; (other options were infinitive, noun, -ing form). &lt;/p&gt;

&lt;p&gt;In Japanese, the imperative (&lt;em&gt;meireikei&lt;/em&gt;, &amp;quot;command form&amp;quot;) is rarely used. Therefore in Haku you can&amp;#39;t use this form. Instead, you can use the plain form, the polite &lt;em&gt;-masu&lt;/em&gt; form or the &lt;em&gt;-te&lt;/em&gt; form (like &amp;quot;-ing&amp;quot;), including &lt;em&gt;-te kudasai&lt;/em&gt; (similar to &amp;quot;please&amp;quot;). Whether a function is perceived as a verb or a noun is up to you, and the difference is clear from the syntax. If it is a noun, you can turn it into a verb by adding &lt;em&gt;suru&lt;/em&gt;, and if it is a verb, you can add the &lt;em&gt;no&lt;/em&gt; or &lt;em&gt;koto&lt;/em&gt; nominalisers. And you can conjugate the verb forms in many different ways, although in practice the verb ending has no semantic function in the Haku language.&lt;/p&gt;

&lt;h3&gt;Naming and giving meaning&lt;/h3&gt;

&lt;p&gt;In principle, a programming language does not need to be based on natural language at all. The notorious example is APL, which uses symbols for everything. Agda programmers also tends to use lots of mathematical symbols. It works because they are very familiar with those symbols. An interesting question is if an experienced programmer who does not know Japanese could understand a Haku program; or if not, what the minimal changes would be to make it understandable. &lt;/p&gt;

&lt;p&gt;To allow to investigate that question, the Scheme and Raku emitters for Haku support (limited) transliteration to Romaji. I have the intention (but maybe not the time) to create a Romaji version of Haku as well as a version that does not use any Japanese but keeps the word order.&lt;/p&gt;

&lt;h3&gt;Syntax and parsing&lt;/h3&gt;

&lt;p&gt;I also wanted the language to be closer, at lease visually, to literary Japanese. Therefore Haku does not use Roman letters, Arabic digits or common arithmetic, logical and comparison operators. It also supports top-to-bottom, right-to-left writing.  &lt;/p&gt;

&lt;p&gt;Literary Japanese does not use spaces. So another question of interest to was how to tokenise a string of Japanese. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are three writing systems: &lt;em&gt;katakana&lt;/em&gt; (angular), &lt;em&gt;hiragana&lt;/em&gt; (squigly) and &lt;em&gt;kanji&lt;/em&gt; (complicated). &lt;/li&gt;
&lt;li&gt;&lt;em&gt;katakana&lt;/em&gt; is used in a similar way as italics, and also for loanwords and names of plants and animals.&lt;/li&gt;
&lt;li&gt;Nouns, verb, adjectives and adverbs normally start with a &lt;em&gt;kanji&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hiragana&lt;/em&gt; is used for verb/adjective/adverb endings and &amp;quot;particles&amp;quot;, small words or suffixes that help identify the words in a sentence. &lt;/li&gt;
&lt;li&gt;A verb/adjective/adverb can&amp;#39;t end with a &lt;em&gt;hiragana&lt;/em&gt; character that represents a particle. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we have some simple tokenisation rules:
- a sequence of &lt;em&gt;katakana&lt;/em&gt;
- a &lt;em&gt;kanji&lt;/em&gt; followed by more &lt;em&gt;kanji&lt;/em&gt; or &lt;em&gt;hiragana&lt;/em&gt; that do not represent particles
- &lt;em&gt;hiragana&lt;/em&gt; that represent particles&lt;/p&gt;

&lt;p&gt;This is in fact a formalisation of the rules a human uses when reading Japanese. &lt;/p&gt;

&lt;p&gt;Where that fails, we can introduce parentheses. A human reader uses context, and a considerable amount of look-ahead parsing and backtracking, but that would make the parser very complex and slow.&lt;/p&gt;

&lt;p&gt;In practice, only specific adverbs and adjectives are used in Haku. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;ラムダ|は|或|エクス|で|エクス|掛ける|エクス|です

ラムダ: katakana word
は: particle
或: pre-noun adjective
エクス: katakana word
で: particle
エクス: katakana word
掛ける: verb
エクス: katakana word　
です: verb (copula)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Number system&lt;/h3&gt;

&lt;p&gt;For large numbers, Japanese uses a number system based on multiples of ten thousand (called &lt;em&gt;myriads&lt;/em&gt;) rather than a thousand. A peculiar feature of this system is that there are &lt;em&gt;kanji&lt;/em&gt; for all powers of 10,000 up to 10&lt;sup&gt;48&lt;/sup&gt;. For more background on this, please read &lt;a href=&quot;https://quickandtastycooking.org.uk/articles/japanese-large-numbers/&quot;&gt;my article on this topic&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The consequence is that a number such as &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1,234,567,890 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is composed as &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;  (10 + 2) * 100,000,000 
+ (3 * 1000 + 4 * 100 + 5 * 10 + 6) * 10,000
+  7 * 1000 + 8 * 100 + 9 * 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which can is written in &lt;em&gt;kanji&lt;/em&gt; as &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;十二億三千四百五十六万七千八百九十
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are also &lt;em&gt;kanji&lt;/em&gt; for numbers smaller than one. They go down to 10&lt;sup&gt;-12&lt;/sup&gt; in powers of 10 and rational numbers are indicated with the &lt;em&gt;kanji&lt;/em&gt; 点 (&lt;em&gt;ten&lt;/em&gt;, &amp;quot;dot&amp;quot;). So &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;3.14159
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be written as    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt; 三点一分四厘一毛五糸九忽 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apart from this format, the decimal format is also used, and is indeed more common for rational numbers and also for years (and dates in general), e.g. 2021 is written 二〇二一 instead of 二千二十一. Haku supports all these formats.&lt;/p&gt;

&lt;h2&gt;Poetry&lt;/h2&gt;

&lt;p&gt;The expressiveness of Haku as a programming language is on purpose rather spartan. It is after all a &amp;quot;toy language&amp;quot;, an experimental rather than general-purpose language. &lt;/p&gt;

&lt;p&gt;I am more interested in the natural-language expressiveness of Haku, and for that my criterion  is: Can the programmer write poetry in it? Several of Haku&amp;#39;s features such as adjectives and verb conjugation (&lt;em&gt;okurigana&lt;/em&gt;) are there entirely to make Haku programs sufficiently expressive on the natural-language level to support this idea. For that reason, my &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku/src/branch/main/examples/yuki.haku&quot;&gt;favourite Haku program&lt;/a&gt; is one that demonstrates this ability:&lt;/p&gt;

&lt;div style=&quot;writing-mode: vertical-rl&quot;&gt;
&lt;pre&gt;
忘れるとは件で空のことです。

遠いとは物で物を見せるのことです。

本とは
記憶は「忘れられないあの冬の the new fallen snow」、
忘れかけてた遠い記憶
の事です
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When run, this program prints out the string 「忘れられないあの冬の the new fallen snow」. The line that causes this string to be printed is &lt;/p&gt;

&lt;p&gt;忘れかけてた遠い記憶&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wasurekaketeta tooi kioku&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is on the one hand an example of some of the Japanese grammar features that Haku supports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adjectives as functions: &lt;em&gt;tooi&lt;/em&gt; is a so-called &amp;quot;i-adjective&amp;quot;;&lt;/li&gt;
&lt;li&gt;adjectival verbs: &lt;em&gt;wasurekaketeta&lt;/em&gt; is a verb used as an adjective;&lt;/li&gt;
&lt;li&gt;complex verb conjucations: the plain form, used to define the function, is &lt;em&gt;wasureru&lt;/em&gt;. The form &lt;em&gt;~kakeru&lt;/em&gt; means &amp;quot;starting to&amp;quot; and the final ending &lt;em&gt;~ta&lt;/em&gt; is a plain past. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But on the other hand, it is also poetry.&lt;/p&gt;

&lt;h2&gt;Why &lt;em&gt;haku&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;I decided to call my language &lt;em&gt;haku&lt;/em&gt; because I like the sound of it, and also because that word can be written in many ways and mean many things in Japanese (in my dictionary there are 89 &lt;em&gt;kanji&lt;/em&gt; that have &lt;em&gt;haku&lt;/em&gt; as one of their possible pronunciations). I was definitely thinking about the character Haku from the &lt;a href=&quot;https://ghiblicollection.com/product/spirited-away-collector-s-edition?product_id=7231&quot;&gt;Studio Ghibli movie &amp;quot;Spirited Away&amp;quot;&lt;/a&gt;. Also, I like the resemblance with &lt;a href=&quot;https://raku.org&quot;&gt;Raku&lt;/a&gt;, the implementation language. &lt;/p&gt;

&lt;p&gt;If I had to pick a &lt;em&gt;kanji&lt;/em&gt;, I would write it 珀 (amber) or 魄 (soul, spirit).&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Haku: a Japanese programming language</title>
        <link href="https://wimvanderbauwhede.github.io/articles/haku-in-raku/"/>
        <updated>2021-09-20T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/haku-in-raku</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/haku-in-raku_1600x600.png&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;Haku is a natural language functional programming language based on literary Japanese. This article is about the implementation of Haku in &lt;a href=&quot;https://raku.org&quot;&gt;Raku&lt;/a&gt;. You don&amp;#39;t need to know Japanese or &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku&quot;&gt;have read the Haku documentation&lt;/a&gt;. I you are not familiar with Raku, you might want to read my &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/#raku-intro&quot;&gt;quick introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I do assume familiarity with the concepts of parsing, syntax tree and code generation. I you find you lack background for what follows, I recommend Andrew Shitov&amp;#39;s series of posts &lt;a href=&quot;https://andrewshitov.com/creating-a-compiler-with-raku/&quot;&gt;Creating a Compiler with Raku
&lt;/a&gt; which takes a step-by-step approach.&lt;/p&gt;

&lt;h2&gt;Haku&lt;/h2&gt;

&lt;p&gt;Haku aims to be close to written Japanese, so it is written in a combination of the three Japanese writing systems &lt;em&gt;kanji&lt;/em&gt; (Chinese characters), &lt;em&gt;hiragana&lt;/em&gt; and &lt;em&gt;katakana&lt;/em&gt;, and Japanese punctuation. There are no spaces, and Haku does not use Arabic (or even Roman) digits nor any operators. The design of the language is explained &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku&quot;&gt;in more detail in the documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Here is an example of a small Haku program (for more examples see &lt;a href=&quot;https://codeberg.org/wimvanderbauwhede/haku/src/branch/main/examples&quot;&gt;the repo&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;本とは
「魄から楽まで」を見せる
の事です。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This translates as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;main is: to show &amp;#39;From Haku to Raku&amp;#39;&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the Raku version would be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;From Haku to Raku&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The strings &amp;quot;本とは&amp;quot; and &amp;quot;の事です。&amp;quot; indicate the start and end of the main program. &amp;quot;「魄から楽まで」&amp;quot; is a string constant. &amp;quot;見せる&amp;quot; is the print function. The &amp;#39;を&amp;#39; indicates that anything before it is an argument of the function. The newlines in the example code are optional and purely there for readability. A Haku program is a single string without whitespace or newlines.&lt;/p&gt;

&lt;p&gt;The actual generated Raku code for this example is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HakuPrelude&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;魄から楽まで&amp;#39;&lt;/span&gt;)
}

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To be even closer to literary Japanese, Haku programs can be written vertically from right to left:&lt;/p&gt;

&lt;div  class=&quot;highlight&quot; style=&quot;writing-mode: vertical-rl&quot;&gt;
&lt;pre&gt;
忘れるとは
物で空
のことです。

遠いとは
条で条を見せる
のことです。

本とは
記憶は無、
忘れかけてた遠い記憶
の事です。
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The generated Raku code for this Haku program is again quite simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HakuPrelude&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wasureru&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;mono&lt;/span&gt;) {[]}

&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tooi&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;jou&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;jou&lt;/span&gt;)}

&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hon&lt;/span&gt;() {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;kioku&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Nil&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;wasureru&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;tooi&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;kioku&lt;/span&gt;))
}

&lt;span class=&quot;n&quot;&gt;hon&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haku is implemented in Raku. The Haku compiler is a source-to-source compiler (sometimes called &lt;em&gt;transpiler&lt;/em&gt;) which generates Raku source from the Haku source and executes it. Raku makes writing such a compiler easy in many ways:&lt;/p&gt;

&lt;h2&gt;Parsing using Grammars&lt;/h2&gt;

&lt;p&gt;I decided to implement Haku in Raku mostly because I wanted to use Raku&amp;#39;s &lt;a href=&quot;https://docs.raku.org/language/grammars&quot;&gt;Grammars&lt;/a&gt; feature, and it did not disappoint. A grammar is like a class, but instead of methods it has rules or tokens, which are the building blocks of the parser. Any token can be used in the definition of another token by enclosing it in &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; adjective&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &amp;lt;i-adjective&amp;gt; | &amp;lt;na-adjective&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tokens &lt;code&gt;i-adjective&lt;/code&gt; and &lt;code&gt;na-adjective&lt;/code&gt; have been defined separately and &lt;code&gt;adjective&lt;/code&gt; matches one or the other.&lt;/p&gt;

&lt;p&gt;I have always liked parser combinators (like &lt;a href=&quot;https://www.futurelearn.com/info/courses/functional-programming-haskell/0/steps/27222&quot;&gt;Parsec&lt;/a&gt; in Haskell) and from a certain angle, Raku&amp;#39;s Grammar&amp;#39;s are quite similar. They are both scannerless, i.e. there is no separate tokenisation step, and highly composable. Many of the features offered by Parsec (e.g. &lt;code&gt;many&lt;/code&gt;, &lt;code&gt;oneOf&lt;/code&gt;, &lt;code&gt;sepBy&lt;/code&gt;) are available courtesy of Raku&amp;#39;s regexes.&lt;/p&gt;

&lt;p&gt;There are several features of Raku&amp;#39;s Grammars that helped to make the parser for Haku easy to implement. &lt;/p&gt;

&lt;h3&gt;Excellent Unicode support&lt;/h3&gt;

&lt;p&gt;I think Raku&amp;#39;s Unicode support is really excellent. For example, thanks to the support for Unicode blocks, I can simply write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; kanji&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &amp;lt;:Block(&amp;#39;CJK Unified Ideographs&amp;#39;)&amp;gt;&lt;/span&gt;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rather than having to enumerate them all (there are 92,865 kanji in that block!). In fact, the &lt;code&gt;&amp;lt;:...&amp;gt;&lt;/code&gt; syntax works for any Unicode property, not just for Blocks.&lt;/p&gt;

&lt;p&gt;Even better: I have some kanji that are reserved as keywords:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; reserved-kanji&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &amp;#39;本&amp;#39; | &amp;#39;事&amp;#39; | ... &lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure these are excluded from the valid kanji for Haku, I can simply use a set difference:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; kanji&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &amp;lt;:Block(&amp;#39;CJK Unified Ideographs&amp;#39;) - reserved-kanji &amp;gt;&lt;/span&gt;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(One detail that bit me is that the equivalent syntax for a user-defined character class requires an explicit &amp;#39;+&amp;#39; : &lt;code&gt;token set-difference { &amp;lt; +set1 -set2&amp;gt; }&lt;/code&gt; )&lt;/p&gt;

&lt;h3&gt;Tokens and rules&lt;/h3&gt;

&lt;p&gt;Luckily, Raku does not assume by default that you want to parse something where whitespace can be ignored, or that you want to tokenise on whitespace. If you want to ignore whitespace, you can use a &lt;code&gt;rule&lt;/code&gt;. But in Haku, extraneous whitespace is not allowed (except for newlines at certain locations). So I use &lt;code&gt;token&lt;/code&gt; everywhere. (There is also &lt;a href=&quot;https://docs.raku.org/language/grammars#index-entry-declarator_token-Named_Regexes&quot;&gt;&lt;code&gt;regex&lt;/code&gt;, which backtracks&lt;/a&gt;. In Haku&amp;#39;s grammar I have not needed it.)&lt;/p&gt;

&lt;h3&gt;Very powerful regexes&lt;/h3&gt;

&lt;p&gt;As a lambdacamel, I&amp;#39;ve always been fond of Perl&amp;#39;s regexes, the now ubiquitous &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions&quot;&gt;PCREs&lt;/a&gt;. Yet, &lt;a href=&quot;https://docs.raku.org/language/regexes&quot;&gt;Raku&amp;#39;s regexes&lt;/a&gt; go way beyond that in power, expressiveness and readability. &lt;/p&gt;

&lt;p&gt;For one thing, they are composable: you can defined a named regex with the &lt;code&gt;regex&lt;/code&gt; type and use it in subsequent regexes with the &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; syntax. Also, the care with which they have been designed makes them very easy to use.  For example, a negative look-ahead assertion is simply &lt;code&gt;&amp;lt;no&amp;gt; &amp;lt;!before &amp;lt;koto&amp;gt; &amp;gt;&lt;/code&gt;; and the availability of both a try-in-order alternation (&lt;code&gt;||&lt;/code&gt;) and longest-token match alternation (&lt;code&gt;|&lt;/code&gt;) is a huge boon. Another thing I like very much is the ability to make a character class non-capturing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; lambda-expression&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        &amp;lt;.aru&amp;gt; &amp;lt;variable-list&amp;gt; &amp;lt;.de&amp;gt; &amp;lt;expression&amp;gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only &lt;code&gt;&amp;lt;variable-list&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;expression&amp;gt;&lt;/code&gt; will be captured, so a lot of the concrete syntax can be removed at parse time.&lt;/p&gt;

&lt;h3&gt;Grammar composition via roles&lt;/h3&gt;

&lt;p&gt;Roles (&amp;#39;mixins&amp;#39; in Ruby, &amp;#39;traits&amp;#39; in Rust) define interfaces and/or implementation of those interfaces.&lt;br&gt;
I found this a better fit for my purpose than the also-supported class inheritance. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nouns&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Characters&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; sa&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &amp;#39;さ&amp;#39; &lt;/span&gt;}
    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; ki&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &amp;#39;き&amp;#39; &lt;/span&gt;}
    &lt;span class=&quot;c1&quot;&gt;# 一線 is OK,  一 is not OK, 線 is OK&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; noun&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        &amp;lt;number-kanji&amp;gt;? &amp;lt;non-number-kanji&amp;gt; &amp;lt;kanji&amp;gt;* &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        [&amp;lt;sa&amp;gt;|&amp;lt;ki&amp;gt;]?&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &lt;/span&gt;}
}

&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Identifiers&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Verbs&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nouns&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adjectives&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variables&lt;/span&gt; 
{
    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; nominaliser&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;no&amp;gt; &amp;lt;!before &amp;lt;koto&amp;gt; &amp;gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;koto&amp;gt; &amp;lt;!before &amp;lt;desu&amp;gt; &amp;gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &lt;/span&gt;}
    &lt;span class=&quot;c1&quot;&gt;# Identifiers are variables,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# noun-style, verb-style&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# and adjective-style function names&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;n&quot;&gt; identifier&lt;/span&gt; {&lt;span class=&quot;sr&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;variable&amp;gt; &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;verb&amp;gt; &amp;lt;nominaliser&amp;gt;? &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;noun&amp;gt; &amp;lt;.sura&amp;gt;? &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        | &amp;lt;adjective&amp;gt; &lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Although I would like a list syntax for this, something like &lt;code&gt;role Identifiers does Verbs, Nouns, Adjectives, Variables {...}&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;There is a lot more to grammars and regexes. The nice Raku folks on Twitter recommended me the book &lt;a href=&quot;https://link.springer.com/book/10.1007/978-1-4842-3228-6&quot;&gt;&amp;quot;Parsing with Perl 6 Regexes and Grammars&amp;quot; by Moritz Lenz&lt;/a&gt; and it was very useful in particular for debugging of the grammar and handling of error messages.&lt;/p&gt;

&lt;h2&gt;Abstract syntax tree using roles&lt;/h2&gt;

&lt;p&gt;I like to implement the abstract syntax tree (AST) as an algebraic data type, the way it is usually done in Haskell. In Raku, one way to do this is to use parametrised Roles &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;as I explained in an earlier post&lt;/a&gt;. Most of the AST maps directly to the toplevel parser for each role in my grammar, for example the lambda expression:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LambdaExpr&lt;/span&gt;[ &lt;span class=&quot;nv&quot;&gt;@lambda-args&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HakuExpr&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.args&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@lambda-args&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HakuExpr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.expr&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;From parse tree to abstract syntax tree&lt;/h2&gt;

&lt;p&gt;Raku&amp;#39;s grammars provide a very convenient mechanism for turning the parse tree into an AST, called &lt;a href=&quot;https://docs.raku.org/language/grammars#index-entry-Actions&quot;&gt;Actions&lt;/a&gt;. Essentially, you create a class with a method with the same name as the token or rule in the Grammar. Each method gets the &lt;a href=&quot;https://docs.raku.org/type/Match&quot;&gt;Match object&lt;/a&gt; (&lt;code&gt;$/&lt;/code&gt;) created by the token as a positional argument. &lt;/p&gt;

&lt;p&gt;For example, to populate the AST node for a lambda expression from the parse tree:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda-expression&lt;/span&gt;(&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt;) {
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$&amp;lt;variable-list&amp;gt;&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;made&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$&amp;lt;expression&amp;gt;&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;made&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LambdaExpr&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;@args&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The capturing tokens used in the &lt;code&gt;lambda-expression&lt;/code&gt; token are accessible via the notation &lt;code&gt;$&amp;lt;...&amp;gt;&lt;/code&gt; which is shorthand for &lt;code&gt;$/&amp;lt;...&amp;gt;&lt;/code&gt;, i.e. they are named attributes of the current match object.&lt;/p&gt;

&lt;p&gt;In the Haku grammar, there are several tokens where the match is one from a list of alternatives, for example the &lt;code&gt;expression&lt;/code&gt; token, which enumerates anything that is an expression in Haku. For such tokens I use the following code to &amp;quot;inherit&amp;quot; from the constituent tokens:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;(&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt;) { 
        &lt;span class=&quot;k&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;n&quot;&gt;made&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because every match is a map with as keys the names of the capturing tokens, and because we know that in this case there will be only one token selected, we know the first element in the corresponding &lt;code&gt;values&lt;/code&gt; list will be the match for that particular token.&lt;/p&gt;

&lt;h2&gt;Code generation&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;haku.raku&lt;/code&gt; main program essentially does this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hon_parse&lt;/span&gt; = 
    &lt;span class=&quot;n&quot;&gt;Haku&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$program_str&lt;/span&gt;, :&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;HakuActions&lt;/span&gt;));
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$hon_raku_code&lt;/span&gt; =  
    &lt;span class=&quot;n&quot;&gt;ppHakuProgram&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$hon_parse&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;made&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Haku program string is parsed using the Haku grammar and the methods defined in the corresponding HakuActions class are used to populate the AST. The toplevel parse tree node must be &lt;code&gt;$&amp;lt;haku-program&amp;gt;&lt;/code&gt;, and the &lt;code&gt;made&lt;/code&gt; method of this node returns the AST node &lt;code&gt;HakuProgram&lt;/code&gt;.  The routine &lt;code&gt;ppHakuProgram&lt;/code&gt; is the toplevel routine in the module &lt;code&gt;Raku&lt;/code&gt;, which is the Raku emitter for Haku. (There is also a Scheme emitter, in the module &lt;code&gt;Scheme&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;ppHakuProgram($hon_parse.made)&lt;/code&gt; pretty-prints the HakuProgram AST node and thus the entire Haku program as Raku code.&lt;/p&gt;

&lt;p&gt;What I like about the role-based AST is that you can pattern match against the variants of a type using &lt;code&gt;given/when&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppHakuExpr&lt;/span&gt;(\&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;) {            
    &lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindExpr&lt;/span&gt; { ... }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FunctionApplyExpr&lt;/span&gt; { ... }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListExpr&lt;/span&gt; { ... }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapExpr&lt;/span&gt; { ... }        
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IfExpr&lt;/span&gt; { ... }   
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LetExpr&lt;/span&gt; { ... }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LambdaExpr&lt;/span&gt; { ... }        
        ...
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; {
            &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TODO:&amp;quot;&lt;/span&gt; ~ &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;raku&lt;/span&gt;;
        }        
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Raku code corresponding to the Haku AST is quite straightforward, but there are a few things worth noting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because Haku&amp;#39;s variables are immutable, I use the &lt;code&gt;\&lt;/code&gt; notation which means I don&amp;#39;t have to build a variable table with the sigils.&lt;/li&gt;
&lt;li&gt;Because Haku is functional, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; are expressions, so in Raku I wrap them in a &lt;code&gt;do {}&lt;/code&gt; block. &lt;/li&gt;
&lt;li&gt;For partial application I use &lt;code&gt;.assuming()&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;In Haku, strings are lists. In Raku they aren&amp;#39;t. I created a small Prelude of functions, and the list manipulation functions in that Prelude use pattern matching on the type with &lt;code&gt;given/when&lt;/code&gt; to see if the argument is a string or a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Running the generated Raku code&lt;/h2&gt;

&lt;p&gt;Running the generated Raku code is simple: I write the generated Raku code to a module and &lt;code&gt;require&lt;/code&gt; it. The generated code ends with a call to &lt;code&gt;hon()&lt;/code&gt;, the main function in a Haku program, so this automatically executes the program. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Write the parsed program to a module &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;Hon.rakumod&amp;#39;&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;IO&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;spurt&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$hon_raku_code&lt;/span&gt;);

&lt;span class=&quot;c1&quot;&gt;# Require the module. This will execute the program&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hon&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other things Haku makes really easy is to create command-line flags and document their usage:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USAGE&lt;/span&gt;() {
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Q:to/EOH/;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    Usage: haku &amp;lt;Haku program, written horizontally or vertically, utf-8 text file&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        [--tategaki, -t] : do not run the program but print it vertically.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        [--miseru, -m] : just print the Raku source code, don&amp;#39;t execute.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;        ...&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    EOH&lt;/span&gt;
}

&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAIN&lt;/span&gt;(
          &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$src_file&lt;/span&gt;,
          &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; :&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$tategaki&lt;/span&gt;) = &lt;span class=&quot;nb&quot;&gt;False&lt;/span&gt;,   
          &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; :&lt;span class=&quot;sr&quot;&gt;m($miseru)&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;False&lt;/span&gt;,
          ...
        );  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;USAGE&lt;/code&gt; is called when &lt;code&gt;MAIN&lt;/code&gt; is called with the wrong (or no) arguments. Arguments of &lt;code&gt;MAIN&lt;/code&gt; prefixed with &lt;code&gt;:&lt;/code&gt; are flags. &lt;code&gt;unit sub&lt;/code&gt; means that anything after this declaration is part of the MAIN program, so no need for &lt;code&gt;{...}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;To conclude&lt;/h2&gt;

&lt;p&gt;This article shows the lazy programmer&amp;#39;s way to creating your own programming language: let Raku do all the hard work. &lt;/p&gt;

&lt;p&gt;Or to express it with a Haku program:&lt;/p&gt;

&lt;div style=&quot;writing-mode: vertical-rl&quot;&gt;
&lt;pre&gt;
本真とは
コンパイラを書いて、
プログラムを書いて、
プログラムを走らす
と言う事です。

&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;the truth:&lt;br&gt;
write the compiler,&lt;br&gt;
write the program,&lt;br&gt;
run the program.&lt;/p&gt;
&lt;/blockquote&gt;

        </content>
    </entry>
    
    <entry>
        <title>Frugal computing </title>
        <link href="https://wimvanderbauwhede.github.io/articles/frugal-computing/"/>
        <updated>2021-06-29T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/frugal-computing</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/frugal-computing_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;On the need for low-carbon and sustainable computing and the path towards zero-carbon computing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wimvanderbauwhede.github.io/translations/fr&quot;&gt;Lisez en Français&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wimvanderbauwhede.github.io/translations/es&quot;&gt;Lea en Español&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Key points&lt;/h2&gt;

&lt;h3&gt;The problem:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The current emissions from computing are about 2% of the world total but are projected to rise steeply over the next two decades. By 2040 emissions from computing alone will be close to half the emissions level acceptable to keep global warming below 1.5°C. This growth in computing emissions is unsustainable: it would make it virtually impossible to meet the emissions warming limit.&lt;/li&gt;
&lt;li&gt;The emissions from production of computing devices far exceed the emissions from operating them, so even if devices are more energy efficient producing more of them will make the emissions problem worse. Therefore we must extend the useful life of our computing devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The solution:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As a society we need to start treating computational resources as finite and precious, to be utilised only when necessary, and as effectively as possible. We need &lt;em&gt;frugal computing&lt;/em&gt;: achieving the same results for less energy. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The vision:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Imagine we can extend the useful life of our devices and even increase their capabilities without any increase in energy consumption.&lt;/li&gt;
&lt;li&gt;Meanwhile, we will develop the technologies for the next generation of devices, designed for energy efficiency as well as long life.&lt;/li&gt;
&lt;li&gt;Every subsequent cycle will last longer, until finally the world will have computing resources that last forever and hardly use any energy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Defining computational resources&lt;/h2&gt;

&lt;p&gt;Computational resources are all resources of energy and material that are involved in any given task that requires computing. For example, when you perform a web search on your phone or participate in a video conference on your laptop, the computational resources involved are those for production and running of your phone or laptop, the mobile network or WiFi you are connected to, the fixed network it connects to, the data centres that perform the search or video delivery operations. If you are a scientist running a simulator in a supercomputer, then the computational resources involved are your desktop computer, the network and the supercomputer. For an industrial process control system, it is the production and operation of the Programmable Logic Controllers.&lt;/p&gt;

&lt;h2&gt;Computational resources are finite&lt;/h2&gt;

&lt;p&gt;Since the start of general purpose computing in the 1970s, our society has been using increasing amounts of computational resources. &lt;/p&gt;

&lt;p&gt;For a long time the growth in computational capability as a function of device power consumption has literally been exponential, a trend expressed by &lt;a href=&quot;https://www.britannica.com/technology/Moores-law&quot;&gt;Moore&amp;#39;s law&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;With this growth in computational capability, increasing use of computational resources has become pervasive in today&amp;#39;s society. Until recently, the total energy budget and carbon footprint resulting from the use of computational resources has been small compared to the world total. As a result, computational resources have until recently effectively been treated as unlimited. &lt;/p&gt;

&lt;p&gt;Because of this, the economics of hardware and software development have been built on the assumption that with every generation, performance would double for free. Now, this unlimited growth is no longer sustainable because of a combination of technological limitations and the climate emergency. Therefore, we need to do more with less. &lt;/p&gt;

&lt;p&gt;Moore&amp;#39;s law has effectively come to an end as integrated circuits can&amp;#39;t be scaled down any more. As a result, the performance per Watt is no longer increasing exponentially. On the other hand, the demand for computational resources is set to increase considerably.   &lt;/p&gt;

&lt;p&gt;The consequence is that at least for the next decades, growth in demand for computational resources will not be offset by increased power efficiency. Therefore with business as usual, the total energy budget and carbon footprint resulting from the use of computational resources will grow dramatically to become a major contributor to the world total.&lt;/p&gt;

&lt;p&gt;Furthermore, the resources required to create the compute devices and infrastructure are also finite, and the total energy budget and carbon footprint of production of compute devices is huge. Moore&amp;#39;s Law has conditioned us to doubling of performance ever two years, which has led to very short effective lifetimes of compute hardware. This rate of obsolescence of compute devices and software is entirely unsustainable. &lt;/p&gt;

&lt;p&gt;Therefore, as a society we need to start treating computational resources as finite and precious, to be utilised only when necessary, and as frugally as possible. And as computing scientists, we need to ensure that computing has the lowest possible energy consumption. And we should achieve this with the currently available technologies because the lifetimes of compute devices needs to be extended dramatically. &lt;/p&gt;

&lt;p&gt;I would like to call this &amp;quot;frugal computing&amp;quot;: achieving the same results for less energy by being more frugal with our computing resources. &lt;/p&gt;

&lt;h2&gt;The scale of the problem&lt;/h2&gt;

&lt;h3&gt;Meeting the climate targets&lt;/h3&gt;

&lt;p&gt;To limit global warming to 1.5&amp;deg;C, within the next decade a global reduction from 55 gigatonnes CO₂ equivalent (GtCO₂e) by 32 GtCO₂e to 23 GtCO₂e per year is needed &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;. So by 2030 that would mean a necessary reduction in overall CO₂ emissions of more than 50%. According to the International Energy Agency &lt;a href=&quot;#10&quot;&gt;[10]&lt;/a&gt;, emissions from electricity are currently estimated at about 10 GtCO₂e. The global proportion of electricity from renewables is projected to rise from the current figure of 22% to slightly more than 30% by 2040 &lt;a href=&quot;#15&quot;&gt;[15]&lt;/a&gt;. In other words, we cannot count on renewables to eliminate CO₂ emissions from electricity in time to meet the climate targets. Reducing the energy consumption is the only option. &lt;/p&gt;

&lt;h3&gt;Emissions from consumption of computational resources&lt;/h3&gt;

&lt;p&gt;The consequence of the end of Moore&amp;#39;s law was expressed most dramatically in a 2015 report by the Semiconductor Industry Association (SIA) &amp;quot;Rebooting the IT Revolution: a call to action&amp;quot; &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt;, which calculated that, based on projected growth rates and on the 2015 ITRS roadmap for CMOS chip engineering technologies &lt;a href=&quot;#16&quot;&gt;[16]&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;computing will not be sustainable by 2040, when the energy required for computing will exceed the estimated world&amp;#39;s energy production. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It must be noted that this is purely the energy of the computing device, as explained in the report. The energy required by e.g. the data centre infrastructure and the network is not included. &lt;/p&gt;

&lt;p&gt;The SIA has reiterated this in their 2020 &amp;quot;Decadal Plan for Semiconductors&amp;quot; &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;, although they have revised the projection based on a &amp;quot;market dynamics argument&amp;quot;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the exponential growth in compute energy is left unchecked, market dynamics will limit the growth of the computational capacity which would cause a flattening out the energy curve. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is merely an acknowledgement of the reality that the world&amp;#39;s energy production is not set to rise dramatically, and therefore increased demand will result in higher prices which will damp the demand. So computation is not actually going to exceed the world&amp;#39;s energy production.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever-rising energy demand for computing vs. global energy production is creating new risk, and new computing paradigms offer opportunities to dramatically improve energy efficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the countries where most of the computational resources are consumed (US and EU), electricity production accounts currently for 25% of the total emissions &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt;. According to the SIA&amp;#39;s estimates, computation accounts currently for a little less than 10% of the total electricity production but is set to rise to about 30% by 2040. This would mean that, with business as usual, computational resources would be responsible for at least 10% of all global CO₂ emissions by 2040. &lt;/p&gt;

&lt;p&gt;The independent study &amp;quot;Assessing ICT global emissions footprint: Trends to 2040 &amp;amp; recommendations&amp;quot; &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt; corroborates the SIA figures: they estimate the computing greenhouse gas emissions for 2020 between 3.0% and 3.5% of the total, which is a bit higher than the SIA estimate of 2.5% because it does take into account networks and datacentres. Their projection for 2040 is 14% rather than 10%, which means a growth of 4x rather than 3x. &lt;/p&gt;

&lt;p&gt;To put it in absolute values, based on the above estimate, by 2040 energy consumption of compute devices would be responsible for 5 GtCO₂e, whereas the target for world total emissions from all sources is 23 GtCO₂e.&lt;/p&gt;

&lt;h3&gt;Emissions from production of computational resources&lt;/h3&gt;

&lt;p&gt;To make matters worse, the carbon emissions resulting from the production of computing devices exceeds those incurred during operation. This is a crucial point, because it means that we can&amp;#39;t rely on next-generation hardware technologies to save energy: the production of this next generation of devices will create more emissions than any operational gains can offset. It does not mean research into more efficient technologies should stop. But their deployment cycles should be much slower. Extending the useful life of compute technologies must become our priority.&lt;/p&gt;

&lt;p&gt;The report about the cost of planned obsolescence by the European Environmental Bureau &lt;a href=&quot;#7&quot;&gt;[7]&lt;/a&gt; makes the scale of the problem very clear. For laptops and similar computers, manufacturing, distribution and disposal account for 52% of their &lt;a href=&quot;https://www.sciencedirect.com/topics/earth-and-planetary-sciences/global-warming-potential&quot;&gt;Global Warming Potential&lt;/a&gt; (i.e. the amount of CO₂-equivalent emissions caused). For mobile phones, this is 72%. The report calculates that the lifetime of these devices should be at least 25 years to limit their Global Warming Potential. Currently, for laptops it is about 5 years and for mobile phones 3 years. According to &lt;a href=&quot;#8&quot;&gt;[8]&lt;/a&gt;, the typical lifetime for servers in data centres is also 3-5 years, which again falls short of these minimal requirements. According to this paper, the impact of manufacturing of the servers is 20% of the total, which would require an extension of the useful life to 11-18 years. &lt;/p&gt;

&lt;h3&gt;The total emissions cost from computing&lt;/h3&gt;

&lt;p&gt;Taking into account the carbon cost of both operation and production, computing would be responsible for 10 GtCO₂e by 2040, almost half of the acceptable CO₂ emissions budget &lt;a href=&quot;#2&quot;&gt;[2,3,14]&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/computing-emissions.png&quot; alt=&quot;A graph with two bars: world emissions (55) and emissions from computing (0.1) in 2020; and for 2040, the world emissions target to limit warming to 1.5°C (23), and the projected emissions from computing (10)&quot;
title=&quot;A graph with two bars: world emissions (55) and emissions from computing (0.1) in 2020; and for 2040, the world emissions target to limit warming to 1.5°C (23), and the projected emissions from computing (10)&quot; /&gt;
&lt;figcaption&gt;Actual and projected emissions from computing (production+operation), and 2040 emission target to limit warming to &amp;lt;2&amp;deg;C&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;A breakdown per device type&lt;/h3&gt;

&lt;p&gt;To decide on the required actions to reduce emissions, it is important to look at the numbers of different types of devices and their energy usage. If we consider mobile phones as one category, laptops and desktops as another and servers as a third category, the questions are: how many devices are there in each category, and what is their energy consumption. The absolute numbers of devices in use are quite difficult to estimate, but the yearly sales figures &lt;a href=&quot;#10&quot;&gt;[10]&lt;/a&gt; and estimates for the energy consumption for each category &lt;a href=&quot;#11&quot;&gt;[11,12,13,14]&lt;/a&gt; are readily available from various sources. The tables below show the 2020 sales and yearly energy consumption estimates for each category of devices. A detailed analysis is presented in &lt;a href=&quot;#14&quot;&gt;[14]&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;caption&gt;Number of devices sold worldwide in 2020&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;Device type&lt;/th&gt;&lt;th&gt;2020 sales&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phones&lt;/td&gt;&lt;td&gt; 3000M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Servers&lt;/td&gt;&lt;td&gt; 13M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tablets&lt;/td&gt;&lt;td&gt; 160M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Displays&lt;/td&gt;&lt;td&gt; 40M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Laptops&lt;/td&gt;&lt;td&gt; 280M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Desktops&lt;/td&gt;&lt;td&gt; 80M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TVs&lt;/td&gt;&lt;td&gt;220M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;IoT devices&lt;/td&gt;&lt;td&gt; 2000M&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The energy consumption of all communication and computation technology currently in use in the world is currently around 3,000 TWh, about 11% of the world&amp;#39;s electricity consumption, projected to rise by 3-4 times by 2040 with business as usual according to &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;. This is a conservative estimate: the study in &lt;a href=&quot;#14&quot;&gt;[14]&lt;/a&gt; includes a worst-case projection of a rise to 30,000 TWh (exceeding the current world electricity consumption) by 2030. &lt;/p&gt;

&lt;table&gt;
&lt;caption&gt;Yearly energy consumption estimates in TWh&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;Device type&lt;/th&gt;&lt;th&gt;TWh&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TVs&lt;/td&gt;&lt;td&gt; 560&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Other Consumer devices&lt;/td&gt;&lt;td&gt; 240&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Fixed access network (wired+WiFi)&lt;/td&gt;&lt;td&gt; 900 + 500&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mobile network&lt;/td&gt;&lt;td&gt; 100&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Data centres&lt;/td&gt;&lt;td&gt; 700&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Total&lt;/td&gt;&lt;td&gt; 3000&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The above data make it clear which actions are necessary: the main carbon cost of phones, tablets and IoT devices is their production and the use of the mobile network, so we must extend their useful life very considerably and reduce network utilisation. Extending the life time is also the key action for datacentres and desktop computers, but their energy consumption also needs to be reduced considerably, as does the energy consumption of the wired, WiFi and mobile networks. &lt;/p&gt;

&lt;h2&gt;A vision for low carbon and sustainable computing&lt;/h2&gt;

&lt;p&gt;It is clear that urgent action is needed: in less than two decades, the global use of computational resources needs to be transformed radically. Otherwise, the world will fail to meet its climate targets, even with significant reductions in other emission areas. The carbon cost of both production and operation of the devices must be considerably reduced. &lt;/p&gt;

&lt;p&gt;To use devices for longer, a change in business models as well as consumer attitudes is needed. This requires raising awareness and education but also providing incentives for behavioural change. And to support devices for a long time, an infrastructure for repair and maintenance is needed, with long-term availability of parts, open repair manuals and training. To make all this happen, economic incentives and policies will be needed (e.g. taxation, regulation). Therefore we need to convince key decision makers in society, politics and business.&lt;/p&gt;

&lt;p&gt;Imagine that we can extend the useful life of our devices and even increase their capabilities, purely through better computing science. With every improvement, the computational capacity will in effect increase without any increase in energy consumption. Meanwhile, we will develop the technologies for the next generation of devices, designed for energy efficiency as well as long life. Every subsequent cycle will last longer, until finally the world will have computing resources that last forever and hardly use any energy.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/towards-zero-carbon-computing.png&quot; alt=&quot;A graph with four trends: emissions from production, emissions in total, performance and emissions/performance.&quot;
title=&quot;A graph with four trends: emissions from production, emissions in total, performance and emissions/performance.&quot; /&gt;
&lt;figcaption&gt;Towards zero carbon computing: increasing performance and lifetime and reducing emissions. Illustration with following assumptions: every new generation lasts twice as long as the previous one and cost half as much energy to produce; energy efficiency improves linearly with 5% per year.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is a very challenging vision, spanning all aspects of computing science. To name just a few challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We must design software so that it supports devices  with extended lifetimes.&lt;/li&gt;
&lt;li&gt;We need software engineering strategies to handle the extended software life cycles, and in particular deal with &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;technical debt&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Longer life means more opportunities to exploit vulnerabilities, so we need better cyber security.&lt;/li&gt;
&lt;li&gt;We need to develop new approaches to reduce overall energy consumption across the entire system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To address these challenges, action is needed on many fronts. What will you do to make frugal computing a reality?&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;
  &lt;span id=&quot;1&quot;&gt;[1] &lt;a href=&quot;https://www.semiconductors.org/resources/rebooting-the-it-revolution-a-call-to-action-2/&quot;&gt;&lt;em&gt;&amp;quot;Rebooting the IT revolution: a call to action&amp;quot;&lt;/em&gt;, Semiconductor Industry Association/Semiconductor Research Corporation, Sept 2015&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;2&quot;&gt;[2] &lt;a href=&quot;https://www.src.org/about/decadal-plan/decadal-plan-full-report.pdf&quot;&gt;&lt;em&gt;&amp;quot;Full Report for the Decadal Plan for Semiconductors&amp;quot;&lt;/em&gt;, Semiconductor Industry Association/Semiconductor Research Corporation, Jan 2021&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;3&quot;&gt;[3] &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S095965261733233X&quot;&gt;&lt;em&gt;&amp;quot;Assessing ICT global emissions footprint: Trends to 2040 &amp;amp; recommendations&amp;quot;&lt;/em&gt;, Lotﬁ Belkhir, Ahmed Elmeligi, Journal of Cleaner Production 177 (2018) 448--463&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;4&quot;&gt;[4] &lt;a href=&quot;https://www.epa.gov/ghgemissions/sources-greenhouse-gas-emissions&quot;&gt;&lt;em&gt;&amp;quot;Sources of Greenhouse Gas Emissions&amp;quot;&lt;/em&gt;, United States Environmental Protection Agency&lt;/a&gt;, Last updated on April 14, 2021&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;5&quot;&gt;[5] &lt;a href=&quot;https://www.unep.org/emissions-gap-report-2020&quot;&gt;&lt;em&gt;&amp;quot;Emissions Gap Report 2020&amp;quot;&lt;/em&gt;, UN Environment Programme, December 2020&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;6&quot;&gt;[6] &lt;a href=&quot;https://onlinelibrary.wiley.com/doi/full/10.1111/jiec.13123&quot;&gt;&lt;em&gt;&amp;quot;The link between product service lifetime and GHG emissions: A comparative study for different consumer products&amp;quot;&lt;/em&gt;, Simon Glöser-Chahoud, Matthias Pfaff, Frank Schultmann,  Journal of Industrial Ecology, 25 (2), pp 465-478, March 2021&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;7&quot;&gt;[7] &lt;a href=&quot;https://eeb.org/library/coolproducts-report/&quot;&gt;&lt;em&gt;&amp;quot;Cool products don’t cost the Earth – Report&amp;quot;&lt;/em&gt;, European Environmental Bureau, September 2019&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;8&quot;&gt;[8] &lt;a href=&quot;https://link.springer.com/article/10.1007/s11367-014-0838-7&quot;&gt;&lt;em&gt;&amp;quot;The life cycle assessment of a UK data centre&amp;quot;&lt;/em&gt;, Beth Whitehead, Deborah Andrews, Amip Shah, Graeme Maidment, Building and Environment 93 (2015) 395--405, January 2015&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;9&quot;&gt;[9] &lt;a href=&quot;https://www.statista.com&quot;&gt;Statista&lt;/a&gt;,  retrieved June 2021&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;10&quot;&gt;[10] &lt;a href=&quot;https://www.iea.org/reports/global-energy-CO%E2%82%82-status-report-2019/emissions&quot;&gt;&lt;em&gt;&amp;quot;Global Energy &amp;amp; CO₂ Status Report&amp;quot;&lt;/em&gt;, International Energy Agency, March 2019&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;11&quot;&gt;[11] &lt;a href=&quot;https://link.springer.com/article/10.1007/s11367-015-0909-4&quot;&gt;&lt;em&gt;&amp;quot;Redefining scope: the true environmental impact of smartphones?&amp;quot;&lt;/em&gt;, James Suckling, Jacquetta Lee, The International Journal of Life Cycle Assessment volume 20, pages 1181–1196 (2015)&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;12&quot;&gt;[12] &lt;a href=&quot;https://www.racksolutions.com/news/blog/server-rack-power-consumption-calculator/&quot;&gt;&lt;em&gt;&amp;quot;Server Rack Power Consumption Calculator&amp;quot;&lt;/em&gt;, Rack Solutions, Inc., July 2019&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;13&quot;&gt;[13] &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S111001682030524X&quot;&gt;&lt;em&gt;&amp;quot;Analysis of energy consumption and potential energy savings of an institutional building in Malaysia&amp;quot;&lt;/em&gt;, Siti Birkha Mohd Ali,  M.Hasanuzzaman, N.A.Rahim, M.A.A.Mamun, U.H.Obaidellah,  Alexandria Engineering Journal, Volume 60, Issue 1, February 2021, Pages 805-820&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;14&quot;&gt;[14] &lt;a href=&quot;https://doi.org/10.3390/challe6010117&quot;&gt;&lt;em&gt;&amp;quot;On Global Electricity Usage of Communication Technology: Trends to 2030&amp;quot;&lt;/em&gt;, Anders S. G. Andrae, Tomas Edler, Challenges 2015, 6(1), 117-157 &lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;15&quot;&gt;[15] &lt;a href=&quot;https://www.bp.com/en/global/corporate/energy-economics/energy-outlook.html&quot;&gt;&lt;em&gt;&amp;quot;BP Energy Outlook: 2020 Edition&amp;quot;&lt;/em&gt;,BP plc&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
  &lt;span id=&quot;16&quot;&gt;[16] &lt;a href=&quot;https://www.semiconductors.org/resources/2015-international-technology-roadmap-for-semiconductors-itrs/&quot;&gt;&lt;em&gt;&amp;quot;2015 International Technology Roadmap for Semiconductors (ITRS)&amp;quot;&lt;/em&gt;, Semiconductor Industry Association, June 2015&lt;/a&gt;&lt;/span&gt;&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Writing faster Raku code</title>
        <link href="https://wimvanderbauwhede.github.io/articles/writing-faster-raku/"/>
        <updated>2020-12-02T00:00:00+00:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/writing-faster-raku</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/writing-faster-raku_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;In &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/writing-faster-perl&quot;&gt;an earlier article&lt;/a&gt;, I discussed the result of my attempts to optimize the performance of an expression parser which is part of my Perl-based &lt;a href=&quot;https://github.com/wimvanderbauwhede/RefactorF4Acc&quot;&gt;Fortran source-to-source compiler&lt;/a&gt;. An expression parser takes strings representing expressions in a programming language (in my case Fortran) and turns it into a data structure called a parse tree, which the compiler uses for further analysis and code generation.&lt;/p&gt;

&lt;p&gt;I have recently been writing quite a bit of &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt; code but so far I had not looked at its performance. Out of curiosity I decided to rewrite and optimise this Fortran expression parser in Raku.  &lt;/p&gt;

&lt;h2&gt;Expression parsing&lt;/h2&gt;

&lt;p&gt;What I loosely call an expression parser is actually a combination of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexer&lt;/a&gt; and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing#Parser&quot;&gt;parser&lt;/a&gt;: it turns a string of source code into a tree-like data structure which expresses the structure of the expression and the purpose of its constituents. For example if the expression is &lt;code&gt;2*v+1&lt;/code&gt;, the result of the expression parser will be a data structure which identifies the top-level expression as a sum of a multiplication with  the integer constant &lt;code&gt;1&lt;/code&gt;, and the multiplication of an integer constant &lt;code&gt;2&lt;/code&gt; with a variable &lt;code&gt;v&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So how do we build a fast expression parser in Raku? It is not my intention to go into the computing science details, but instead to discuss the choices and trade-offs to be considered.&lt;/p&gt;

&lt;h2&gt;Raku performance testing&lt;/h2&gt;

&lt;p&gt;An easily-made argument is that if you want performance, you should not write your code in Raku but in C/C++. And it is of course true that compiled code will almost always be faster. However, often, rewriting in a compiled language is not an option, so it is important to know how to get the best possible performance in Raku. &lt;/p&gt;

&lt;p&gt;The Raku documentation has &lt;a href=&quot;https://docs.raku.org/language/performance&quot;&gt;a page on performance&lt;/a&gt; which offers good advice in general terms. But for my needs I did not find the answers about the specific trade-offs that I might have to make. So I created some simple test cases to find out more. I used Raku version  &lt;code&gt;2020.09&lt;/code&gt; built on MoarVM version &lt;code&gt;2020.09&lt;/code&gt;, the most recent one when I ran the tests, but the results should be quite similar for slightly earlier and later versions.&lt;/p&gt;

&lt;p&gt;I test the performance using a series of small test benches with different cases, controlled by a command line argument, using the &lt;code&gt;time&lt;/code&gt; command to obtain the wall clock time, and taking the average over 5 runs. For example,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; raku test_hash_vs_regex.raku &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;There is more than one way to do it, but only one will be the fastest&lt;/h2&gt;

&lt;p&gt;Parsing involves taking strings and turning them into other data structures, so there are many decisions to be made about the data structures and the ways to turn strings into them and manipulate them. Here are some results of performance comparisons that influenced design decisions for the compiler. I was curious to see if they would turn out different in Raku. &lt;/p&gt;

&lt;h3&gt;Hash key testing is faster than regexp matching&lt;/h3&gt;

&lt;p&gt;Fortran code essentially consists of a list of statements which can contain expressions, and in my compiler the statement parser labels each of the statements once using a hashmap. Every parsed line of code is stored as a pair of the original string &lt;code&gt;$src_line&lt;/code&gt; with this hashmap, called &lt;code&gt;$info&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parsed_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$src_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The labels and values stored in &lt;code&gt;$info&lt;/code&gt; depend on the type of statement. It is not &lt;em&gt;a priori&lt;/em&gt; clear if matching a pattern in &lt;code&gt;$src_line&lt;/code&gt; using a regex is faster or slower than looking up the corresponding label in &lt;code&gt;$info&lt;/code&gt;. So I tested the performance of hash key testing versus regexp matching, using some genuine FORTRAN 77 code, a &lt;code&gt;READ&lt;/code&gt; I/O call, labelled in &lt;code&gt;$info&lt;/code&gt; as &lt;code&gt;ReadCall&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;lc&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;READ( 1, 2, ERR=8, END=9, IOSTAT=N ) X&amp;#39;&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; = {};   
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;~~&lt;span class=&quot;sr&quot;&gt;/read/&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$info&amp;lt;ReadCall&amp;gt;&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# regexp        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;~~&lt;span class=&quot;sr&quot;&gt;/read/&lt;/span&gt;) { 
            &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+=&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;
        }
    }
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# hash lookup        &lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$info&amp;lt;ReadCall&amp;gt;&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;) {
                &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+=&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;
            }
    }   
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# overhead        &lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+=&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;
    }    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the &lt;code&gt;if&lt;/code&gt;-condition in its body (CASE==3), the &lt;code&gt;for 1..NITERS&lt;/code&gt; loop takes 3 s on my laptop. The loop with with the hash key existence test takes 5 s; the regexp match condition takes 53 s. So the actual condition evaluation takes 2 s for hash key existence check and 50 s for regexp match. So testing hash keys is 25 times faster than simple regexp matching. So we trade some memory for computation: we identify the statement once using a regexp, an store the identifying label in &lt;code&gt;$info&lt;/code&gt; for subsequent passes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Testing hash keys is 25 times faster than simple regexp matching. So we trade some memory for computation: we identify the statement once using a regexp, an store the identifying label in &lt;code&gt;$info&lt;/code&gt; for subsequent passes.&lt;/p&gt;

&lt;h3&gt;A fast data structure for the parse tree: integer versus string comparison&lt;/h3&gt;

&lt;p&gt;The choice of the data structure for the parsed expression matters. As we need a tree-like ordered data structure, it would have to either an object or a list-like data structure. But objects in are slow, so I use a nested array.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;,
    [&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;,
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,
        [&lt;span class=&quot;s&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;]
    ],
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ### Integer comparison is faster than string comparison --&gt;

&lt;p&gt;This data structure is fine if you don&amp;#39;t need to do a lot of work on it. However, because every node is labelled with a string, testing against the node type is a string comparison. Simply testing against a constant string or integer is not good enough as the compiler might optimise this away. So I tested this as follows to make sure &lt;code&gt;$str&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; get a new value on every iteration: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 7.3 - 5.3 = 2 s net&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# string equality        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;);
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+=&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;
        }
    }
} 
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 3.3 - 3.1 = 0.3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# int equality        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+=&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;;
        }
    }
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 5.3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# string equality overhead        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;);
    }
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 3.1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# int equality overhead&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I populate the string or integer based on the loop iterator and then perform a comparison to a constant string or integer. By subtracting the time taken for the assignment (cases 3 and 4) I obtain the actual time for the comparison. &lt;/p&gt;

&lt;p&gt;On my laptop, the version with string comparison takes 2 s net, the integer comparison 0.3 s. So doing string comparisons is at least 5 times slower than doing integer comparisons. Therefore my data structure uses integer labels. Also, I label the constants so that I can have different labels for string, integer and real constants, and because in this way all nodes are arrays. This avoids having to test if a node is an array or a scalar, which is a slow operation.&lt;/p&gt;

&lt;p&gt;So the example becomes :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Less readable, but faster and easier to extend. In what follows, what I call the &lt;em&gt;parse tree&lt;/em&gt; is this data structure.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; String comparisons is at least 5 times slower than doing integer comparisons.&lt;/p&gt;

&lt;h3&gt;Custom tree traversals are faster&lt;/h3&gt;

&lt;p&gt;I tested the cost of using higher-order functions for parse tree traversal (recursive descent). Basically, this is the choice between a generic traversal using a higher-order function which takes an arbitrary function that operates on the parse tree nodes: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_traverse_ast_with_action&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast_&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc_&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$ast_&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$acc_&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;cond&amp;gt;&lt;/span&gt; { 
        &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; { 
        &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt; - &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; {
            (&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;) = 
                &lt;span class=&quot;n&quot;&gt;_traverse_ast_with_action&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;],&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;);
            &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;] = &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or a custom traversal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_traverse_ast_custom&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast_&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc_&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$ast_&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$acc_&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;cond&amp;gt;&lt;/span&gt; { 
        &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&amp;lt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&amp;gt;;
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; { 
    &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;=&amp;lt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&amp;gt;;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt; - &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; {
            (&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;) = 
                &lt;span class=&quot;n&quot;&gt;_traverse_ast_custom&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;],&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
            &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;] = &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the case of the parse tree data structures in my compiler, the higher-order implementation takes more than twice as long as the custom traversal, so for performance this is not a good choice. Therefore I don&amp;#39;t use higher-order functions in the parser, but I do use them in the later refactoring passes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Higher-order implementations of recursive descent take more than twice as long as custom traversals.&lt;/p&gt;

&lt;h3&gt;The fastest way to process a list&lt;/h3&gt;

&lt;p&gt;The internal representation of a Fortran program in my compiler is an list of &lt;code&gt;[ $src_line, $info ]&lt;/code&gt; pairs and the &lt;code&gt;$info&lt;/code&gt; hash stores the parse tree as a nested array. So iterating through lists and arrays is a major factor in the performance.  &lt;/p&gt;

&lt;p&gt;Raku has several ways to iterate through a list-like data structure. I tested six of them, as follows: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 6.2 s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# map&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 7.9 s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# for each elt in list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;NITERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 6.2 s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# for with index&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 11.0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# loop (C-style)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 3.7 s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# postfix for with push&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 3.5 s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# comprehension&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The fastest way is to use list comprehension (case 5, 3.5 s), very closely followed by the suffix-style &lt;code&gt;for&lt;/code&gt; (case 4, 3.7 s). The C-style &lt;code&gt;loop&lt;/code&gt; construct (case 3) is the slowest (11 s). The &lt;code&gt;map&lt;/code&gt; version performs the same as the index-based &lt;code&gt;for&lt;/code&gt; loop (both 6.2 s). It is a bit odd that the list-based for loop, probably the most common loop construct, is slower than these two (7.9 s).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; List comprehensions are fastest, almost twice as fast as &lt;code&gt;for&lt;/code&gt;-loops or &lt;code&gt;map&lt;/code&gt;s. C-style &lt;code&gt;loop&lt;/code&gt; is very slow.&lt;/p&gt;

&lt;h3&gt;Parsing: regular expressions, string comparisons or list operations?&lt;/h3&gt;

&lt;p&gt;Finally, we have to decide how to parse the expression string. The traditional way to build an expression parser is using a Finite State Machine, consuming one character at a time (if needed with one or more characters look-ahead) and keeping track of the identified portion of the string. This is very fast in a language such as C but in Raku I was not too sure, because in Raku a character is actually a string of length one, so every test against a character is a string comparison. On the other hand, Raku has a sophisticated regular expression engine. Yet another way is to turn the string into an array, and parse using list operations. Many possibilities to be tested:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;This means we need a stack per type of operation and run until the end of the expression&amp;#39;&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt; =  &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;comb&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;c1&quot;&gt;# 5.8 s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$ct&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# map on an array of characters        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;=();
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
        &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;(-&amp;gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; { 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) {
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt; ~= &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;;
            } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
            }
        }, &lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt;);
        &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;;
    }
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 2.7 s    &lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$ct&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# while with index through a string        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;=();
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;This means we need a stack per type of operation and run until the end of the expression&amp;#39;&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;index&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; ) {
            &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;);
            &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; .= &lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
        }
        &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;;
    }         
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; {  &lt;span class=&quot;c1&quot;&gt;# 11.7 s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$ct&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# while on an array of characters        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;=();
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs_&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt;; 
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;      
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs_&lt;/span&gt; {
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs_&lt;/span&gt;;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) {
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;~=&lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt;;
            } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
            }
        }
        &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;;
    }
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 101 s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$ct&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# while on a string using a regexp        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;=();
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;This means we need a stack per type of operation and run until the end of the expression&amp;#39;&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; ~~ &lt;span class=&quot;sr&quot;&gt;s/^$&amp;lt;w&amp;gt; = [ \w+ ]//&lt;/span&gt;;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$&amp;lt;w&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt;) {
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$&amp;lt;w&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;;
            }
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; ~~ &lt;span class=&quot;sr&quot;&gt;s/^\s+//&lt;/span&gt;;
            } 
        }
    }   
} &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# 64 s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;NITERS&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$ct&lt;/span&gt; {
&lt;span class=&quot;c1&quot;&gt;# reduce on an array of characters        &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;(
        -&amp;gt; \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; { 
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) {
                &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;] ~ &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;;
            } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                ( |&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;] ),&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
            }
        }, ((),&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;), |&lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt;);
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt; = |&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the list-based version, the overhead is 1.6 s; for the string-based versions, 0.8s.&lt;/p&gt;

&lt;p&gt;The results are rather striking. Clearly the regexp version is by far the slowest. This was a surprise because in my Perl implementation, the regexp version was twice as fast as next best choice. From the other implementations, the string-based FSM which uses the &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;substr&lt;/code&gt; methods is by far the fastest, without the overhead it takes 1.9s s, which is more that 50 times faster than the regexp version. The &lt;code&gt;map&lt;/code&gt; based version comes second but is nearly twice as slow. What is surprising, and actually a bit disappointing, is that the &lt;code&gt;reduce&lt;/code&gt; based version, which works the same as the &lt;code&gt;map&lt;/code&gt; based one but works on immutable data, is also very slow, 64 s. &lt;/p&gt;

&lt;p&gt;In any case, the choice is clear. It is possible to make the fastest version  marginally faster (1.6 s instead of 1.9 s) by not reducing the string but instead moving the index through the string. However, for the full parser I want to have the convenience of the &lt;code&gt;trim-leading&lt;/code&gt; and &lt;code&gt;starts-with&lt;/code&gt; methods, so I choose to consume the string.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Result:&lt;/b&gt; Using &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;substr&lt;/code&gt; methods is much faster than using regexps.&lt;/p&gt;

&lt;h2&gt;A faster expression parser&lt;/h2&gt;

&lt;p&gt;With the choices of string parsing and data structure made, I focused on the structure of the overall algorithm. The basic approach is to loop trough a number of states and in every state perform a specific action. In the Perl version this was very simple because we use regular expressions to identify tokens, so most of the state transitions are implicit. I wanted to keep this structure so I emulate the regexp &lt;code&gt;s///&lt;/code&gt; operation with comparisons, indexing and substring operations.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prev_lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match unary prefix operations&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match terms&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Add prefix operations if matched&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match binary operators&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Append to the AST&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The matching rules and operations are very simple (I use &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; as placeholders for the actual values). Here is the Perl version for reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prefix operations:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^&amp;lt;pattern&amp;gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;terms:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^(&amp;lt;pattern&amp;gt;)//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$expr_ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;operators:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$prev_lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^&amp;lt;pattern&amp;gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the Raku version I used the &lt;code&gt;given&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt; construct, which is as fast as an &lt;code&gt;if&lt;/code&gt; statement but a bit neater.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prefix operations:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;lt;token&amp;gt;&lt;/span&gt;) { 
        .=&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;lt;length of token&amp;gt;&lt;/span&gt;); 
        &lt;span class=&quot;nv&quot;&gt;$state&amp;lt;integer&amp;gt;&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;terms:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;lt;token start&amp;gt;&lt;/span&gt;) { 
        &lt;span class=&quot;nv&quot;&gt;$expr_ast&lt;/span&gt;=[&lt;span class=&quot;s&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$term&lt;/span&gt;]; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;operators:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;lt;token&amp;gt;&lt;/span&gt;) { 
        .=&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;lt;length of token&amp;gt;&lt;/span&gt;); 
        &lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;; 
        &lt;span class=&quot;nv&quot;&gt;$op&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;; 
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the more complex patterns to match is the case of an identifier followed by an opening parenthesis with optional whitespace. Using regular expressions this pattern would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; ~~ &lt;span class=&quot;sr&quot;&gt;s:i/^ $&amp;lt;token&amp;gt; = [ [a .. z] \w*] \s* \( //&lt;/span&gt; { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$&amp;lt;token&amp;gt;&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;;
    ... 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without regular expressions, we first check for a character between &amp;#39;a&amp;#39; and &amp;#39;z&amp;#39; using &lt;code&gt;&amp;#39;a&amp;#39; le .substr(0,1).lc le &amp;#39;z&amp;#39;&lt;/code&gt;. If that matches, we remove it from &lt;code&gt;$str&lt;/code&gt; and add it to &lt;code&gt;$var&lt;/code&gt;. Then we go in a &lt;code&gt;while&lt;/code&gt; loop for as long as there are characters that are alphanumeric or &amp;#39;_&amp;#39;. Then we strip any whitespace and test for &amp;#39;(&amp;#39;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;)).&lt;span class=&quot;nb&quot;&gt;lc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;lc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; {
        &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;~=&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;;
        &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(++&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    }
    .=&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;);
    .=&lt;span class=&quot;n&quot;&gt;trim-leading&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;) {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another complex pattern is that for a floating point number. In Fortran, the pattern is more complicated because the sub-pattern &lt;code&gt;.e&lt;/code&gt; can be part of a floating-point constant but could also be the part of the equality operator &lt;code&gt;.eq.&lt;/code&gt;. Furthermore, the separator between the mantissa and the exponent can be not just &lt;code&gt;e&lt;/code&gt; but also &lt;code&gt;d&lt;/code&gt; or &lt;code&gt;q&lt;/code&gt;. So the regular expression is rather involved:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (                        
    (
        !(&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;rx:i/^\d+\.eq/&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s:i/^([\d*\.\d*][[e|d|q][\-|\+]?\d+]?)//&lt;/span&gt;        
    )           
    &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s:i/^(\d*[e|d|q][\-|\+]?\d+)//&lt;/span&gt;
) {
    &lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;=&lt;span class=&quot;vg&quot;&gt;$/&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without regular expression, the implementation is as follows. We first detect a character between 0 and 9 or a dot. Then we try to match the mantissa, separator, sign and exponent. The latter three are optional; if they are not present and the mantissa does not contain a dot, we have matched an integer. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sgn&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exp&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;

    &lt;span class=&quot;c1&quot;&gt;# first char of mantissa&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;c1&quot;&gt;# try and match more chars of mantissa&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; {
        &lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt; ~=&lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt;;
        &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(++&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    }
    &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; .= &lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;);

    &lt;span class=&quot;c1&quot;&gt;# reject .eq.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;not&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;ends-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;eq&amp;#39;&lt;/span&gt;,:&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;)) { 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;lc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; | &lt;span class=&quot;s&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; | &lt;span class=&quot;s&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; {
            &lt;span class=&quot;c1&quot;&gt;# we found a valid separator&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$sep&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt;;            
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; =.&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
            &lt;span class=&quot;c1&quot;&gt;# now check if there is a sign&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; {
                ++&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$sgn&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; =.&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
            }
            &lt;span class=&quot;c1&quot;&gt;# now check if there is an exponent            &lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; {
                ++&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$exp&lt;/span&gt;~=&lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt;;
                &lt;span class=&quot;nv&quot;&gt;$h&lt;/span&gt; =.&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
            }
            &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; .= &lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;);
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;=&lt;span class=&quot;s&quot;&gt;&amp;quot;$mant$sep$sgn$exp&amp;quot;&lt;/span&gt;;
            &lt;span class=&quot;nv&quot;&gt;$expr_ast&lt;/span&gt;=[&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;];
            } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;c1&quot;&gt;# parse error&lt;/span&gt;
            }
        } &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;index&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;).&lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; {
            &lt;span class=&quot;c1&quot;&gt;# a mantissa-only real number&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt;;
            &lt;span class=&quot;nv&quot;&gt;$expr_ast&lt;/span&gt;=[&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$real_const_str&lt;/span&gt;];
        }
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# no dot and no sep, so an integer&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$expr_ast&lt;/span&gt;=[&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$mant&lt;/span&gt;];   
        }
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;c1&quot;&gt;# .eq., backtrack and carry on&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; =&lt;span class=&quot;s&quot;&gt;&amp;quot;$mant$str&amp;quot;&lt;/span&gt;;        
        &lt;span class=&quot;n&quot;&gt;proceed&lt;/span&gt;;
    }            
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A final example of how to handle patterns is the case of whitespace in comparison and logical operators. Fortran has operators of the form &lt;code&gt;&amp;lt;dot word dot&amp;gt;&lt;/code&gt;, for example &lt;code&gt;.lt.&lt;/code&gt; and &lt;code&gt;.xor.&lt;/code&gt;. But annoyingly, it allows whitespace between the dot and the word, e.g. &lt;code&gt;. not .&lt;/code&gt;. Using regular expressions, this is of course easy to handle, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^\.\s*ge\s*\.//&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;;
    &lt;span class=&quot;nv&quot;&gt;$op&lt;/span&gt;=&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I check for a pattern starting with a dot and which contains a space before the next dot. Then I remove all spaces from that substring using &lt;code&gt;trans&lt;/code&gt; and replace this original string with this trimmed version. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; .&lt;span class=&quot;n&quot;&gt;starts-with&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt;  .&lt;span class=&quot;nb&quot;&gt;index&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; ) 
    &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; (.&lt;span class=&quot;nb&quot;&gt;index&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; ) &amp;lt; (&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$eidx&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;index&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; ))) {

    &lt;span class=&quot;c1&quot;&gt;# Find the keyword with spaces&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$match&lt;/span&gt; = .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$eidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;c1&quot;&gt;# remove the spaces&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$match&lt;/span&gt; .= &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; );
    &lt;span class=&quot;c1&quot;&gt;# update the string&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$match&lt;/span&gt; ~ .&lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;$eidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;);
    &lt;span class=&quot;n&quot;&gt;proceed&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall the optimised expression parser in Raku is still very close to the Perl version. The key difference is that the Raku version does not use regular expressions. With the above examples I wanted to illustrate how it is possible to write code with the same functionality as a regular expression &lt;code&gt;s///&lt;/code&gt; operation, using some of Raku&amp;#39;s built-in string operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;substr&lt;/code&gt; : substring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; : location a a substring in a string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim-leading&lt;/code&gt; : strip leading whitespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;starts-with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends-with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trans&lt;/code&gt; : used to remove whitespace using the &lt;code&gt;&amp;#39; &amp;#39; =&amp;gt; &amp;#39;&amp;#39;&lt;/code&gt; pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lc&lt;/code&gt; : used in range tests instead of testing against both upper and lower case&lt;/li&gt;
&lt;li&gt;&lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;: for very handy range comparisons, e.g. &lt;code&gt;&amp;#39;a&amp;#39; le $str le &amp;#39;z&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resulting code is of course much longer but arguably more readable than regular expressions, and currently four times faster.&lt;/p&gt;

&lt;p&gt;I ran a lot more tests, and compared performance against Perl and Python as well, but that is another story. All code for the tests is available in &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/tree/master/Performance-analysis&quot;&gt;my GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Operators have precedence and associativity, and Fortran requires twelve precedence levels. In the &quot;Append to AST&quot; state, the parser uses `$lev` and `$prev_lev` to work out how the previously matched `$expr_ast` and `$op` should be appended to the `@ast` array. The prefix operations are handled by setting a state which is checked after term matching. The actual code is a bit more complicated because we need to parse array index expressions and function calls as well. This is done recursively during term matching; if a function call has multiple arguments, the parser is put into a new `$state`. 

So the end result is a minimally recursive parser, i.e. it only uses recursion when it is really necessary. 

There is a lot of repetition of the patterns for matching terms and operators because if I would instead abstract the `&lt;pattern&gt;` and `&lt;integer&gt;` values by e.g. storing them in an array, the array accesses would considerably reduce the performance. I do store the precedence levels in an array because there are so many of them that the logic for appending terms to the AST would otherwise become very hard to read and update. --&gt;

&lt;!-- ## Expression parser performance

I tested the new expression parser on a set of 50 different expressions taken from a weather simulation code. The old expression parser takes 45 s to run this test a thousand times; the new expression parser takes only 2 s. In other words, the new parser is *more than twenty times faster* than the old one. 

It is also quite easy to maintain and adapt despite its minimal use of abstractions, and because it is Fortran-specific, the rest of the code has become a lot cleaner too. You can find the code in [my GitHub repo](https://github.com/wimvanderbauwhede/RefactorF4Acc/blob/devel/RefactorF4Acc/Parser/Expressions.pm). --&gt;

&lt;!-- Here is a summary of all optimisations I tested. The tests were run using Perl v5.28 on a MacBook Pro (late 2013), timings are averages over 5 runs and measured using `time`.

&lt;table&gt;
  &lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
Optimisation
&lt;/th&gt;
&lt;th&gt;
Speed-up
&lt;/th&gt;

&lt;/tr&gt;
  &lt;/thead&gt;
   &lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; Hash key testing is faster than regexp matching &lt;/td&gt;&lt;td&gt; 3&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Custom tree traversals are faster than generic ones &lt;/td&gt;&lt;td&gt; 2&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; `foreach` is faster than `map` &lt;/td&gt;&lt;td&gt; 1.3&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; `foreach` is faster than indexed `for` &lt;/td&gt;&lt;td&gt; 1.4&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; `foreach` is faster than C-style `for` &lt;/td&gt;&lt;td&gt; 1.7&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Integer comparison is faster than string comparison &lt;/td&gt;&lt;td&gt; 1.5&amp;times; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Regexp matching is faster than successive string comparisons &lt;/td&gt;&lt;td&gt; 2.2&amp;times; &lt;/td&gt;
&lt;/tr&gt;

 &lt;/tbody&gt;
&lt;table&gt; --&gt;

        </content>
    </entry>
    
    <entry>
        <title>Reconstructing Raku's Junctions</title>
        <link href="https://wimvanderbauwhede.github.io/articles/reconstructing-raku-junctions/"/>
        <updated>2020-10-05T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/reconstructing-raku-junctions</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/reconstructing-raku-junctions_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;Junctions in Raku are cool but at first glance they do not follow the rules for static typing. I was curious about their formal typing semantics, so I deconstructed and then reconstructed junctions from a functional, static typing perspective.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t know Raku or are unfamiliar with the functional style of programming, I suggest you read my introductory article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming&quot;&gt;&amp;quot;Cleaner code with functional programming&amp;quot;&lt;/a&gt;. If you have not heard of algebraic data types before, I suggest my article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku&quot;&gt;&amp;quot;Roles as Algebraic Data Types in Raku&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Junctions in Raku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt; has this neat feature called &lt;a href=&quot;https://docs.raku.org/&quot;&gt;Junctions&lt;/a&gt;. A junction is an unordered composite value. When a junction is used instead of a value, the operation is carried out for each junction element, and the result is the junction of the return values of all those operators. Junctions collapse into a single value when used in a Boolean context. Junctions can be of type &lt;em&gt;all&lt;/em&gt; (&lt;code&gt;&amp;amp;&lt;/code&gt;), &lt;em&gt;any&lt;/em&gt; (&lt;code&gt;|&lt;/code&gt;), &lt;em&gt;one&lt;/em&gt; (&lt;code&gt;^&lt;/code&gt;) or &lt;em&gt;none&lt;/em&gt; (empty junction).&lt;/p&gt;

&lt;p&gt;For example, &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# short for any(11,22)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; == &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; + &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;;
}

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; == (&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;).&lt;span class=&quot;nb&quot;&gt;one&lt;/span&gt;;         &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; True &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;so&lt;/span&gt; (&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ^ &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; ^ &lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function &lt;code&gt;so&lt;/code&gt; forces the Boolean context.&lt;/p&gt;

&lt;p&gt;Junctions have type &lt;em&gt;Junction&lt;/em&gt;, and I was curious about the typing rules, because at first sight there is something strange. Let&amp;#39;s say we have a function &lt;code&gt;sq&lt;/code&gt; from &lt;em&gt;Int&lt;/em&gt; to &lt;em&gt;Int&lt;/em&gt; :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;) { &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; }

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# OK&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 121 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s define a junction of type &lt;em&gt;any&lt;/em&gt; of &lt;em&gt;Int&lt;/em&gt; values:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; | &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we apply &lt;code&gt;sq&lt;/code&gt; to &lt;code&gt;$j&lt;/code&gt;, we do not get a type error, even though the functions has type &lt;code&gt;:(Int --&amp;gt; Int)&lt;/code&gt; and the junction has type &lt;code&gt;Junction&lt;/code&gt;. Instead, we get a junction of the results:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; any(121, 484)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we assign this to a variable of type &lt;em&gt;Int&lt;/em&gt; as before, we get a type error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rj&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Type check failed in assignment to $rj; expected Int but got Junction (any(121, 484))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, the return value is now of type &lt;em&gt;Junction&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;my Junction $rj = sq(11|22); # OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the &lt;em&gt;Junction&lt;/em&gt; type can take the place of any other type but then the operation becomes a junction as well.&lt;/p&gt;

&lt;p&gt;On the other hand, junctions are implicitly typed by their constituent values, even though they seem to be of the opaque type &lt;em&gt;Junction&lt;/em&gt;. For example, if we create a junction of &lt;em&gt;Str&lt;/em&gt; values, and try to pass this junction value into &lt;code&gt;sq&lt;/code&gt;, we get a type error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sj&lt;/span&gt; = &lt;span class=&quot;s&quot;&gt;&amp;#39;11&amp;#39;&lt;/span&gt; | &lt;span class=&quot;s&quot;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sj&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;WHAT&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt;(Junction)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$svj&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$sj&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Type check failed in binding to parameter &amp;#39;x&amp;#39;; expected Int but got Str (&amp;quot;11&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Do junctions follow static typing rules?&lt;/h2&gt;

&lt;p&gt;Although this &lt;em&gt;kind of&lt;/em&gt; makes sense (we don&amp;#39;t want it to work with &lt;em&gt;Str&lt;/em&gt; if the original function expects &lt;em&gt;Int&lt;/em&gt;), this does flout the rules for static typing, even with subtyping. If an argument is of type &lt;em&gt;Int&lt;/em&gt; then any type below it in the type graph can be used instead. But the simplified type graph for &lt;em&gt;Int&lt;/em&gt; and &lt;em&gt;Junction&lt;/em&gt; is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Int -&amp;gt; Cool -&amp;gt; Any -&amp;gt; Mu &amp;lt;- Junction
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So a &lt;em&gt;Junction&lt;/em&gt; is never a subtype of anything below &lt;em&gt;Any&lt;/em&gt;. Therefore putting a junction in a slot of type &lt;em&gt;Any&lt;/em&gt; or subtype thereof should be a type error.&lt;/p&gt;

&lt;p&gt;Furthermore, because the &lt;em&gt;Junction&lt;/em&gt; type is opaque (i.e. it is not a parametrised type), it should not hold any information about the type of the values inside the junction. And yet it does type check against these invisible, inaccessible values. &lt;/p&gt;

&lt;p&gt;So what is happening here? &lt;/p&gt;

&lt;h2&gt;A working hypothesis&lt;/h2&gt;

&lt;p&gt;A working hypothesis is that a &lt;em&gt;Junction&lt;/em&gt; type does not really take the place of any other type: it is merely a syntactic sugar that makes it seem so.&lt;/p&gt;

&lt;h2&gt;Reconstructing junctions part 1: types&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s try and reconstruct this. The aim is to come up with a data type and some actions that will replicate the observed behaviour of Raku&amp;#39;s junctions.
First we discuss the types, using Haskell notation for clarity. Then I present the implementation in Raku. This implementation will behave like Raku&amp;#39;s native junctions but without the magic syntactic sugar. In this way I show that Raku&amp;#39;s junctions do follow proper typing rules after all.&lt;/p&gt;

&lt;h3&gt;The Junction type&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;Junction&lt;/em&gt; is a data structure consisting of a junction type &lt;em&gt;JType&lt;/em&gt; and a set of values. 
I restrict this set of values to a single type for convenience and also because a junction of mixed types does actually not make much sense. I use a list to model the set, again for convenience. Because a &lt;em&gt;Junction&lt;/em&gt; can contain values of any type, it is a polymorphic algebraic data type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JType&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JAny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JNone&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Applying junctions&lt;/h3&gt;

&lt;p&gt;Doing anything with a junction means applying a function to it. We can consider three cases, and I introduce an ad-hoc custom operator for each of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply a non-&lt;em&gt;Junction&lt;/em&gt; function to a &lt;em&gt;Junction&lt;/em&gt; expression&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•￮&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Apply a &lt;em&gt;Junction&lt;/em&gt; function to a non-&lt;em&gt;Junction&lt;/em&gt; expression&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;￮•&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Apply a &lt;em&gt;Junction&lt;/em&gt; function to a &lt;em&gt;Junction&lt;/em&gt; expression, creating a nested junction&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;￮￮&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For convenience, we can also create custom comparison operators between &lt;em&gt;Junction a&lt;/em&gt; and &lt;em&gt;a&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;-- and similar for /-, &amp;gt;, &amp;lt;, &amp;lt;=,&amp;gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;￮&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;•&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Collapsing junctions&lt;/h3&gt;

&lt;p&gt;Then we have &lt;code&gt;so&lt;/code&gt;, the Boolean coercion function. What it does is to collapse a junction of Booleans into a single Boolean. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we have &lt;code&gt;collapse&lt;/code&gt;, which returns the value from a junction, provided that it is a junction where all stored values are the same. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collapse&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This may seem like a strange function but it is necessary because of the behaviour of junctions. As we will see, the above semantics imply that junctions are greedy: if a single argument of a function is a junction, then all other arguments also become junctions, but all values in the junction are identical. I have discussed this in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/greedy-junctions&quot;&gt;&amp;quot;The strange case of the greedy junction&amp;quot;&lt;/a&gt;, but we can now formalise this behaviour.&lt;/p&gt;

&lt;h3&gt;Revisiting the strange case of the greedy junction&lt;/h3&gt;

&lt;p&gt;Suppose we have a function of two arguments &lt;code&gt;f :: a -&amp;gt; b -&amp;gt; c&lt;/code&gt;, and we apply a junction &lt;code&gt;j :: Junction a&lt;/code&gt; to the first argument, &lt;code&gt;f •￮ j&lt;/code&gt;. Then the result is a partially applied function wrapped in a Junction: &lt;code&gt;fp :: Junction b -&amp;gt; c&lt;/code&gt;. If we now want to apply this function a non-Junction value &lt;code&gt;v :: b&lt;/code&gt; using &lt;code&gt;fp ￮• v&lt;/code&gt;, the result is of type &lt;code&gt;Junction c&lt;/code&gt;. So already we see that the non-Junction value &lt;code&gt;v&lt;/code&gt; is assimilated into the junction.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#39;s consider the particular case where the type &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;forall d . (a -&amp;gt; b -&amp;gt; d) -&amp;gt; d&lt;/code&gt;, so we have &lt;code&gt;Junction (forall d . (a-&amp;gt;b-&amp;gt;d) -&amp;gt; d)&lt;/code&gt;. This is a function which takes a function argument and returns something of the return type of that function. We use the &lt;code&gt;forall&lt;/code&gt; so that &lt;code&gt;d&lt;/code&gt; can be anything, but in practice we want it to be either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s assume we apply this function (call it &lt;code&gt;p&lt;/code&gt;) to &lt;code&gt;fst :: a-&amp;gt;b-&amp;gt;a&lt;/code&gt;, using &lt;code&gt;p ￮• fst&lt;/code&gt;, then we get &lt;code&gt;Junction a&lt;/code&gt;. But if we apply it to &lt;code&gt;snd :: a-&amp;gt;b-&amp;gt;b&lt;/code&gt;, using &lt;code&gt;p ￮• snd&lt;/code&gt;, then we get &lt;code&gt;Junction b&lt;/code&gt;. Recall that we applied the original function &lt;code&gt;f&lt;/code&gt; to a &lt;code&gt;Junction a&lt;/code&gt; and a non-Junction &lt;code&gt;b&lt;/code&gt;. Yet whatever we do, we can&amp;#39;t recover the &lt;code&gt;b&lt;/code&gt;. The result is always wrapped in a junction. &lt;/p&gt;

&lt;p&gt;This is the formal type-based analysis of why we can&amp;#39;t return a non-Junction value from a pair as explained in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/greedy-junctions&quot;&gt;&amp;quot;The strange case of the greedy junction&amp;quot;&lt;/a&gt;. And this is why we need the &lt;code&gt;collapse&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;Reconstructing junctions part 2: Raku implementation&lt;/h2&gt;

&lt;p&gt;We start by creating the Junction type, using an enum for the four types of junctions, and a role for the actual &lt;em&gt;Junction&lt;/em&gt; data type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# The types of Junctions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JType&lt;/span&gt; &amp;lt;&lt;span class=&quot;n&quot;&gt;JAny&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;JAll&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;JOne&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;JNone&lt;/span&gt; &amp;gt;;

&lt;span class=&quot;c1&quot;&gt;# The actual Junction type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[\&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JType&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.junction-type&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.values&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, the constructors for the four types of junctions (underscore to avoid the name conflict with the builtins):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;JAll&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}

&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any_&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;JAny&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}

&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;JOne&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}

&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none_&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;JNone&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To apply a (single-argument) function to a junction argument&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infix:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;●○&amp;gt;&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; ) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt;; 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;

    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;( {&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;)].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To apply a function inside a junction to a non-junction an argument&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infix:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;○●&amp;gt;&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; ) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt;; 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@fs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;

    &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;( {&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;)}, &lt;span class=&quot;nv&quot;&gt;@fs&lt;/span&gt;)].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To apply a function to two junction arguments is equivalent to applying a function inside a junction to a junction. There is a complication here: Raku imposes an ordering on the nesting such that &lt;code&gt;all&lt;/code&gt; is always the outer nest. Therefore we must check the types of the junctions and swap the maps if required. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infix:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;○○&amp;gt;&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt; ) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;jft&lt;/span&gt;= &lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt;; 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@fs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;jvt&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;jvt&lt;/span&gt; == &lt;span class=&quot;n&quot;&gt;JAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jft&lt;/span&gt; != &lt;span class=&quot;n&quot;&gt;JAll&lt;/span&gt;) {        
        &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;jvt&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;){&lt;span class=&quot;n&quot;&gt;jf&lt;/span&gt; ○● &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;}, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;)].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;  
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {        
        &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;jft&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;){ &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt; ●○ &lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;}, &lt;span class=&quot;nv&quot;&gt;@fs&lt;/span&gt;)].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For completeness, here is the definition of &lt;code&gt;○==●&lt;/code&gt;. Definitions of &lt;code&gt;○!=●&lt;/code&gt;, &lt;code&gt;○&amp;gt;●&lt;/code&gt;. etc are analogous.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infix:&lt;/span&gt;&amp;lt; ○==● &amp;gt;( \&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; ) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;){&lt;span class=&quot;o&quot;&gt;x==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;} ●○ &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we have &lt;code&gt;so&lt;/code&gt;, which turns a junction of Booleans into a Boolean:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;so&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;) { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jv&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAny&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;},  &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;) &amp;gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;}
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAll&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {!&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;}, &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;)==&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;}
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JOne&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;},  &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;)==&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;}
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JOne&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;},  &lt;span class=&quot;nv&quot;&gt;@vs&lt;/span&gt;)==&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we have &lt;code&gt;collapse&lt;/code&gt;, as defined in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/greedy-junctions&quot;&gt;the article on greedy junctions&lt;/a&gt;. &lt;code&gt;collapse&lt;/code&gt; returns the value form a junction provided they are all the same:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; ) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;jt&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;junction-type&lt;/span&gt;; 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;values&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt; =  &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;;        
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {!(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; ~~ &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;)}, &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;@ts&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) {  
        &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Can&amp;#39;t collapse this Junction: elements are not identical: {$v,@vvs}&amp;quot;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Junctions desugared&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s now look at our working hypothesis again, the interpretation of actions on Raku&amp;#39;s junctions as syntactic sugar for the above type and operators.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;) { &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; | &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;; 
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rj&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desugared this becomes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Junction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sq&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;●○&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;) {...} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;if (so ($j ○==● 42)) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and similar for other Boolean contexts. &lt;/p&gt;

&lt;p&gt;If we look closer at &lt;a href=&quot;https://wimvanderbauwhede.github.io/greedy-junctions&quot;&gt;the pair example from the greedy junctions article&lt;/a&gt;, then applying a junction to a function with multiple arguments &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;,(&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is desugared as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;&amp;amp;pair&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;assuming&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;) ●○ &lt;span class=&quot;n&quot;&gt;one_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use &lt;code&gt;.assuming()&lt;/code&gt; because we need partial application. It does not matter whether we apply first the non-junction argument or the junction argument:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p1jr&lt;/span&gt; = ( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt;){ &lt;span class=&quot;nv&quot;&gt;&amp;amp;pair&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;assuming&lt;/span&gt;(*,&lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt;) } ●○ &lt;span class=&quot;n&quot;&gt;one_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;] ) ○● &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, an example where both arguments are junctions. Because of the definition of &lt;code&gt;○○&lt;/code&gt;, the order of application does not matter.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m(\x,\y)&lt;/span&gt;{&lt;span class=&quot;o&quot;&gt;x*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;}

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p4&lt;/span&gt; = ( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;){ &lt;span class=&quot;nv&quot;&gt;&amp;amp;m&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;assuming&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) } ●○ &lt;span class=&quot;n&quot;&gt;any_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;] ) ○○ &lt;span class=&quot;n&quot;&gt;all_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;];
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p4r&lt;/span&gt; = ( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;){ &lt;span class=&quot;nv&quot;&gt;&amp;amp;m&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;assuming&lt;/span&gt;(*,&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) } ●○ &lt;span class=&quot;n&quot;&gt;all_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;] ) ○○ &lt;span class=&quot;n&quot;&gt;any_&lt;/span&gt; [&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Starting from the hypothesis that the magic typing behaviour of Raku&amp;#39;s junctions is actually syntactic sugar, I have reconstructed the Junction type and its actions using a polymorphic algebraic data type operating on functions via a set of higher-order functions. I have shown that the interpretation of Raku&amp;#39;s behaviour as syntactic sugar holds for the presented implementation. In other words, Raku&amp;#39;s Junctions do follow static typing rules.&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>The strange case of the greedy junction</title>
        <link href="https://wimvanderbauwhede.github.io/articles/greedy-junctions/"/>
        <updated>2020-10-04T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/greedy-junctions</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/greedy-junctions_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;&lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt; has a neat feature called &lt;a href=&quot;https://docs.raku.org/type/Junction&quot;&gt;Junctions&lt;/a&gt;. In this short article I want to highlight a peculiar consequence of the interaction of junctions with functions: they are &lt;em&gt;greedy&lt;/em&gt;, by which I mean that they inadvertently turn other arguments of functions into junctions. &lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t know Raku or are unfamiliar with the functional style of programming, I suggest you read my introductory article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming&quot;&gt;&amp;quot;Cleaner code with functional programming&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To illustrate the greedy behaviour, let&amp;#39;s create a &lt;code&gt;pair&lt;/code&gt; data structure that can take two values of different types, using a closure.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Pair Constructor: the arguments of pair() are captured&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# in a closure that is returned&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pair&lt;/span&gt;(\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt;){ &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;) } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So &lt;code&gt;pair&lt;/code&gt; takes two arguments of arbitrary type and returns a closure which takes a function as argument. We will use this function to access the values stored in the pair. I will call these accessor functions &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Accessors to get the values from the closure&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;){&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;})}
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;){&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;})}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function that does the actual selection is the anonymous subroutine returned by &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt;, this is purely so that I can apply them to the pair rather than have to pass them as an argument. Let&amp;#39;s look at an example, a pair of an &lt;code&gt;Int&lt;/code&gt; and an &lt;code&gt;enum RGB&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;R G B&amp;gt;&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;pair&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; == &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;R&amp;quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we create a pair by calling &lt;code&gt;pair&lt;/code&gt; with two values, and use &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt; to access the values in the pair. This is an immutable data structure so updates are not possible.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s use a junction for one of the arguments.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Example instance with a &amp;#39;one&amp;#39;-type junction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;pair&lt;/span&gt; (&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;),&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; == &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; one(R, R)&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What has happened here is that the original argument &lt;code&gt;R&lt;/code&gt; has been irrevocably turned into a junction with itself. This happens despite the fact that we never explicitly created a junction on &lt;code&gt;R&lt;/code&gt;. This is a consequence of the application of a junction type to a function, and it is not a bug, simply an effect of junction behaviour. For a more detailed explanation, see my article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/reconstructing-raku-junctions&quot;&gt;&amp;quot;Reconstructing Raku&amp;#39;s Junctions&amp;quot;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.raku.org/type/Junction&quot;&gt;Raku documentation of junctions&lt;/a&gt; says that you should not really try to get values out of a junction:&lt;/p&gt;

&lt;p&gt;&amp;quot;Junctions are meant to be used as matchers in Boolean context; introspection of junctions is not supported. If you feel the urge to introspect a junction, use a Set or a related type instead.&amp;quot;&lt;/p&gt;

&lt;p&gt;Luckily, there is a FAQ that &lt;a href=&quot;https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)&quot;&gt;grudgingly shows you how to do it&lt;/a&gt;. The FAQ once again warns against doing this:&lt;/p&gt;

&lt;p&gt;&amp;quot;If you want to extract the values (eigenstates) from a Junction, you are probably doing something wrong and should be using a Set instead.&amp;quot;&lt;/p&gt;

&lt;p&gt;However, as demonstrated by the example I have given, there is a clear use case for recovering values from junctions. It is of course not the intention that one of the values stored in the pair becomes inaccessible simply because the other value happens to be a junction.&lt;/p&gt;

&lt;p&gt;I therefore propose the addition of a &lt;code&gt;collapse&lt;/code&gt; function which will allow to collapse these inadvertent junction values into their original values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; == &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1j&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;#39;R&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation of this function is taken from &lt;a href=&quot;https://docs.raku.org/language/faq#index-entry-Junction_(FAQ)&quot;&gt;the above-mentioned FAQ&lt;/a&gt;, with the addition of a check to ensure that all values on the junction are identical. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Junction&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;) {    
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;;
    -&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;s&lt;/span&gt; }.(&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;);    
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt; =  &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;;        
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; {!(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; ~~ &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;)}, &lt;span class=&quot;nv&quot;&gt;@vvs&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;@ts&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) {  
        &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Can&amp;#39;t collapse this Junction: elements are not identical: {$v,@vvs}&amp;quot;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first draft of this article, which I shared as a gist, I wrote that it would be nice if this &lt;code&gt;collapse&lt;/code&gt; would be added as an additional method to the &lt;code&gt;Junction&lt;/code&gt; class. And thanks to &lt;a href=&quot;https://twitter.com/liztormato&quot;&gt;Elizabeth Mattijsen&lt;/a&gt;, there is already &lt;a href=&quot;https://github.com/rakudo/rakudo/pull/3944&quot;&gt;a pull request implementing this feature in Rakudo&lt;/a&gt;!&lt;br&gt;
I will update the post when it has made it into a release. &lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>A universal interpreter</title>
        <link href="https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-2/"/>
        <updated>2020-09-13T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-2</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/universal-interpreter-part-2_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;In &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-1&quot;&gt;the previous article&lt;/a&gt; I explained the basic idea behind a technique called &lt;a href=&quot;http://okmij.org/ftp/tagless-final/course/Boehm-Berarducci.html&quot;&gt;Böhm-Berarducci encoding&lt;/a&gt; of algebraic data types, and showed a way to implement this technique in &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt;. Unless you are already familiar with this formalism, I recommend you read that article first. &lt;/p&gt;

&lt;p&gt;In this article I want to illustrate how the Böhm-Berarducci (BB) encoding of a data structure based on algebraic data types can be considered as a universal interpreter. What this means is that it is easy to perform computations that turn the data structure into something else. As an example, I will demonstrate how to create an evaluator and pretty-printer for a parsed polynomial expression.&lt;/p&gt;

&lt;h2&gt;A parse tree type&lt;/h2&gt;

&lt;p&gt;Consider expressions of the form &lt;code&gt;a*x^2+b*x+c&lt;/code&gt; or &lt;code&gt;x^3+1&lt;/code&gt; or &lt;code&gt;x*y^2-x^2*y&lt;/code&gt;. Let&amp;#39;s assume we have a parser for such an expression, for example built using &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/list-based-parser-combinators/&quot;&gt;parser combinators&lt;/a&gt;. Let&amp;#39;s also assume that this parser returns the parsed data as an algebraic data type, defined in Haskell as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Par&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pow&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in Raku:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; [&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.var&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; [&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.par&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; [&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.const&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.term&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.exp&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; [&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.terms&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; [&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.terms&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The additional complexity compared to the types discussed in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-1&quot;&gt;the previous article&lt;/a&gt; is that this type is recursive: the &lt;code&gt;Pow&lt;/code&gt;, &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mult&lt;/code&gt; roles take parameters of type &lt;code&gt;Term&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Before we look at the BB encoding, let&amp;#39;s first write a pretty-printer for this type, using recursive &lt;code&gt;multi sub&lt;/code&gt;s. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Pretty-print a Term &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;) { &lt;span class=&quot;s&quot;&gt;&amp;quot;{n.const}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;){ 
    &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;) ~ &lt;span class=&quot;s&quot;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; ~ &lt;span class=&quot;s&quot;&gt;&amp;quot;{pw.exp}&amp;quot;&lt;/span&gt; 
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;~&lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; + &amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;)~&lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;){ 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; * &amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the same way we can write an evaluator for this type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Evaluate a Term &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) { &lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;{&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;} }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;) { &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;{&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;} }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;){ 
    &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;) ** &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;exp&lt;/span&gt; 
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    [+] &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;){ 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    [*] &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Example parse trees&lt;/h3&gt;

&lt;p&gt;As an example, let&amp;#39;s create the parse tree for a few expressions using the &lt;code&gt;Term&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# a*x^2 + b*x + x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qterm1&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;[ 
    &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
    &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;[ &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;, 
        &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;) 
        ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;[
        &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
            &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;, 
            &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;) 
        ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    )
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;

&lt;span class=&quot;c1&quot;&gt;#   x^3 + 1    &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qterm2&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;[ 
    &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt;[ &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;, 
        &lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt;[ &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
    )
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;

&lt;span class=&quot;c1&quot;&gt;#   qterm1 * qterm2    &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qterm&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;[ 
    &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;qterm1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;qterm2&lt;/span&gt;
    )
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Calling the pretty-printer and evaluator on this term: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;qterm&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; (a * x^2 + b * x + c) * (x^3 + 1)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(
    {&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;}, {&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; =&amp;gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;},  &lt;span class=&quot;n&quot;&gt;qterm&lt;/span&gt;
); &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 162&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;BB encoding of the parse tree type&lt;/h2&gt;

&lt;p&gt;The BB encoding of the &lt;code&gt;Term&lt;/code&gt; algebraic data type in Raku is pleasingly compact:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unTermBB&lt;/span&gt;(
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;var:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;par:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;const:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;pow:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;add:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;] --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;mult:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;] --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) 
        --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;
    ) {
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;var&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;par&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;const&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;pow&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;add&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;mult&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It would of course be even more compact without the signatures, but then we&amp;#39;d have no information about the encoded type.&lt;/p&gt;

&lt;p&gt;We could of course use this type directly, but instead I want to look at how we can convert between &lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;TermBB&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As before, we create our little helpers. Each of the functions below is a constructor which generates the &lt;code&gt;TermBB&lt;/code&gt; instance for the corresponding alternative in the &lt;code&gt;Term&lt;/code&gt; algebraic data type. (When Raku&amp;#39;s macro language is more developed, we will be able to generate these automatically.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VarBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) { 
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { v.(s)&lt;/span&gt; }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
    }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) { 
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { c.(s)&lt;/span&gt; }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
    }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) { 
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { n.(i)&lt;/span&gt; }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
    }    
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[  &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        p.( t.unTermBB( v, c, n, p, a, m )&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;);
    }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[  &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        a.( map {.unTermBB( v, c, n, p, a, m )&lt;/span&gt;}, &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; )
    }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MultBB&lt;/span&gt;(  &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;) { 
    &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;[  &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m) { &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        m.( map {.unTermBB( v, c, n, p, a, m )&lt;/span&gt;}, &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; )
    }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interesting generators are &lt;code&gt;PowBB&lt;/code&gt;, &lt;code&gt;AddBB&lt;/code&gt; and &lt;code&gt;MultBB&lt;/code&gt; because they are recursive. In &lt;code&gt;PowBB&lt;/code&gt;, the function passed as parameter to the &lt;code&gt;TermBB&lt;/code&gt; role constructor calls &lt;code&gt;p&lt;/code&gt; which has a signature of &lt;code&gt;:(Any,Int --&amp;gt; Any)&lt;/code&gt;, but actually requires an argument of the same type as the return value (we need &lt;code&gt;a -&amp;gt; Int -&amp;gt; a&lt;/code&gt;). The argument &lt;code&gt;t&lt;/code&gt;  is of type &lt;code&gt;TermBB&lt;/code&gt; which is a wrapper around a function which, when applied, will return the right type. In the Raku implementation, this function is the method &lt;code&gt;unTermBB&lt;/code&gt;. So we need to call &lt;code&gt;t.unTermBB( ... )&lt;/code&gt;.
In &lt;code&gt;AddBB&lt;/code&gt; and &lt;code&gt;MultBB&lt;/code&gt;, we have an &lt;code&gt;Array[TermBB]&lt;/code&gt; so we need to call &lt;code&gt;unTermBB&lt;/code&gt; on every element, hence the &lt;code&gt;map&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;Using these generators we can write a single function to convert the algebraic data type into its BB encoding. Unsurprisingly, it is very similar to the pretty-printer and evaluator we wrote for &lt;code&gt;Term&lt;/code&gt; instances:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Turn a Term into a BB Term&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;  ) { &lt;span class=&quot;n&quot;&gt;VarBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;)}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;  ) { &lt;span class=&quot;n&quot;&gt;ParBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;)}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;ConstBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;)}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; ) { 
    &lt;span class=&quot;n&quot;&gt;PowBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;), &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;exp&lt;/span&gt;)
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;  ) { 
    &lt;span class=&quot;n&quot;&gt;AddBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;typed-map&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;termToBB&lt;/span&gt; ))
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; ) { 
    &lt;span class=&quot;n&quot;&gt;MultBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;typed-map&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;termToBB&lt;/span&gt; ))
}

&lt;span class=&quot;c1&quot;&gt;# map &amp;amp;f and return in an Array of type T&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed-map&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;) }, |&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;PowBB&lt;/code&gt;, &lt;code&gt;AddBB&lt;/code&gt; and &lt;code&gt;MultBB&lt;/code&gt; require a &lt;code&gt;TermBB&lt;/code&gt;, we need to call &lt;code&gt;termToBB&lt;/code&gt; on the &lt;code&gt;Term&lt;/code&gt; fields. And because  &lt;code&gt;AddBB&lt;/code&gt; and &lt;code&gt;MultBB&lt;/code&gt; take an array of &lt;code&gt;Term&lt;/code&gt;,  we need a &lt;code&gt;map&lt;/code&gt;. However, Raku&amp;#39;s &lt;code&gt;map&lt;/code&gt; returns values of type &lt;code&gt;Seq&lt;/code&gt;, so we need an explicit conversion into &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now convert any data structure of type &lt;code&gt;Term&lt;/code&gt; into its BB encoding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qtermbb&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;termToBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;qterm&lt;/span&gt;);

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qtermbb&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;raku&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; TermBB[Sub].new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Interpreter 1: Pretty-printer with BB encoding&lt;/h3&gt;

&lt;p&gt;To create a pretty-printer for the BB-encoded type, we write implementations for each alternative, and the &lt;code&gt;unTermBB&lt;/code&gt; call magically combines these.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTermBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;){ 
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; }
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; }
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;(\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { &lt;span class=&quot;s&quot;&gt;&amp;quot;{x}&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, \&lt;span class=&quot;sr&quot;&gt;m ) { t ~ &amp;quot;^{m}&amp;quot; } &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    sub add( \ts )&lt;/span&gt; { &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;~&lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; + &amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;)~&lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; }
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mult&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; ) { &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; * &amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;) }
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unTermBB&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;&amp;amp;var&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;par&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;const&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;pow&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;add&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;mult&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compared with &lt;code&gt;ppTerm&lt;/code&gt; (copied below for convenience), the main differences are that there is no recursion and no need to &lt;code&gt;map&lt;/code&gt; anything. We also don&amp;#39;t need a &lt;code&gt;multi sub&lt;/code&gt; to pattern match on the constructors, and there is no need to unpack the values stored in the type using attribute accessors. As a result, the BB version is markedly less cluttered.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) { &lt;span class=&quot;s&quot;&gt;&amp;quot;{n.const}&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;){ 
    &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;) ~ &lt;span class=&quot;s&quot;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; ~ &lt;span class=&quot;s&quot;&gt;&amp;quot;{pw.exp}&amp;quot;&lt;/span&gt; 
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) { 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;~&lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; + &amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;)~&lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;){ 
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;ppTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)}, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
    &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot; * &amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Interpreter 2: Evaluator with BB encoding&lt;/h3&gt;

&lt;p&gt;And an evaluator is equally simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTermBB&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unTermBB&lt;/span&gt;( 
        -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;{&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;} }, 
        -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;{&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;} },
        -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;},
        -&amp;gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,\&lt;span class=&quot;sr&quot;&gt;m { t ** m}&lt;/span&gt;,
        -&amp;gt; \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; { [+] &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;},
        -&amp;gt; \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; { [*] &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;}
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with &lt;code&gt;evalTerm&lt;/code&gt; below, we pass hashes for variable and parameter definitions as arguments to provide context for the evaluation. In the BB version we need to do this only once, rather than for every multi variant, so I have written it below using a &lt;code&gt;given/when&lt;/code&gt;. Even then, the BB version is a lot cleaner, for the same reasons as above. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; { &lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;{&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;} }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt; { &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;{&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;} }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;) ** &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;exp&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; {
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {
                &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)
                }, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
            [+] &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;
        }
        &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt; { 
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; {
                &lt;span class=&quot;n&quot;&gt;evalTerm&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%vars&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;%pars&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;)
                }, |&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;;
            [*] &lt;span class=&quot;nv&quot;&gt;@pts&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ### Interpreter 3: Pretty-printer and evaluator combined

Now we can do one better and combine these two interpreters.

```perl6
sub evalAndppTermBB(%vars,  %pars, TermBB \t ){ 
    t.unTermBB( 
        -&gt; \x {[%vars{x},x]}, 
        -&gt; \x {[%pars{x},x]},
        -&gt; \x {[x,&quot;{x}&quot;]},
        -&gt; \t,\m {[t[0] ** m, t[1] ~ &quot;^{m}&quot;] },
        -&gt; \ts { 
            my \p = 
                reduce { [ $^a[0] + $^b[0], $^a[1] ~ &quot; + &quot; ~ $^b[1]] }, ts[0],  |ts[1..*];
            [ p[0], &quot;(&quot;~p[1]~&quot;)&quot; ]; 
        }, 
        -&gt; \ts { 
            reduce { [ $^a[0] * $^b[0], $^a[1] ~ &quot; * &quot; ~ $^b[1]] }, ts[0],  |ts[1..*]
        }
    )
}

say ppTermBB( qtermbb);
say evalTermBB(
    {&quot;x&quot; =&gt; 2}, {&quot;a&quot; =&gt;2,&quot;b&quot;=&gt;3,&quot;c&quot;=&gt;4},  qtermbb
);
say evalAndppTermBB(
    {&quot;x&quot; =&gt; 2}, {&quot;a&quot; =&gt;2,&quot;b&quot;=&gt;3,&quot;c&quot;=&gt;4},  qtermbb
);
``` --&gt;

&lt;h3&gt;Interpreter 3: Converting &lt;code&gt;TermBB&lt;/code&gt; to &lt;code&gt;Term&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Finally, let&amp;#39;s look at converting &lt;code&gt;TermBB&lt;/code&gt; to &lt;code&gt;Term&lt;/code&gt;. This is yet another type of interpreter so we can follow exactly the same approach as before: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;TermBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Term&lt;/span&gt;){ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt;[&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Par&lt;/span&gt;[&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Const&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; } 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; }
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mult&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;) }
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unTermBB&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;&amp;amp;var&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;par&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;const&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;pow&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;add&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;mult&lt;/span&gt;);
}

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toTerm&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;qtermbb&lt;/span&gt;).&lt;span class=&quot;n&quot;&gt;raku&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Using the BB type directly&lt;/h2&gt;

&lt;p&gt;In the examples above I have created the data structures using the &lt;code&gt;Term&lt;/code&gt; type and converted the result to a &lt;code&gt;TermBB&lt;/code&gt; type. We can of course also directly use the BB type. If we don&amp;#39;t use strict typing and make the argument of &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Mult&lt;/code&gt; slurpy, we get a nice and clean representation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# a*x^2 + b*x + x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qtermbb1&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;AddBB&lt;/span&gt;(
    &lt;span class=&quot;n&quot;&gt;MultBB&lt;/span&gt;( 
        &lt;span class=&quot;n&quot;&gt;ParBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;), 
        &lt;span class=&quot;n&quot;&gt;PowBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;VarBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;), &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;) 
        ),
    &lt;span class=&quot;n&quot;&gt;MultBB&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;ParBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;), 
        &lt;span class=&quot;n&quot;&gt;VarBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;) 
        ),
    &lt;span class=&quot;n&quot;&gt;ParBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)
);

&lt;span class=&quot;c1&quot;&gt;#   x^3 + 1    &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qtermbb2&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;AddBB&lt;/span&gt;( 
    &lt;span class=&quot;n&quot;&gt;PowBB&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;VarBB&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;), &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;), 
    &lt;span class=&quot;n&quot;&gt;ConstBB&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;)
);

&lt;span class=&quot;c1&quot;&gt;#   qterm1 * qterm2    &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;qtermbb3&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;MultBB&lt;/span&gt;( 
    &lt;span class=&quot;n&quot;&gt;qterm1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;qterm2&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is structurally very similar to the examples using the &lt;code&gt;Term&lt;/code&gt; type. We can obtain exactly the same representation by using a slurpy helper function to wrap the role constructors for &lt;code&gt;Term&lt;/code&gt;. See the code in &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/no-bb-timing.raku&quot;&gt;no-b-timing.raku`&lt;/a&gt; and &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/ubb-timing.raku&quot;&gt;ubb-timing.raku&lt;/a&gt; for details. &lt;/p&gt;

&lt;p&gt;The code as presented above is not entirely correct: I have not always typed everything explicitly, but the explicit signatures in the role definition will cause type errors unless everything is explicitly typed. See the code in &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/tbb-timing.raku&quot;&gt;tbb-timing.raku&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;The code in &lt;code&gt;no-bb-timing&lt;/code&gt; and &lt;code&gt;ubb-timing&lt;/code&gt; is comparable in terms of complexity. I ran a timing test, and the BB implementation of the algebraic data type is about 20% slower than the &amp;#39;ordinary&amp;#39; implementation. However, the fully-typed version &lt;code&gt;tbb-timing&lt;/code&gt; is three times slower. Types in Raku are clearly not zero-cost abstractions. &lt;/p&gt;

&lt;p&gt;For info, here are the profiling reports (&lt;code&gt;raku --profile&lt;/code&gt;) for &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/no-bb-timing.html&quot;&gt;no-bb-timing&lt;/a&gt; and &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/ubb-timing.html&quot;&gt;ubb-timing&lt;/a&gt;. Profiling &lt;code&gt;tbb-timing&lt;/code&gt; proved infeasible.&lt;/p&gt;

&lt;p&gt;On the other hand, somewhat paradoxically, we don&amp;#39;t really need this explicit typing. It is useful to write down the function types for the BB encoding, and I think it helps with the explanations, but the actual type safety comes from the algebraic data types that we created. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article and &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-1&quot;&gt;the previous one&lt;/a&gt; I have shown another way to implement algebraic data types in Raku. As with the approach discussed in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;&amp;#39;Roles as Algebraic Data Types in Raku&amp;#39;&lt;/a&gt;, I use a role to create the type. However, in this approach the entire data structure is encoded as a function using the &lt;a href=&quot;http://okmij.org/ftp/tagless-final/course/Boehm-Berarducci.html&quot;&gt;Böhm-Berarducci encoding&lt;/a&gt;. From a type theoretical perspective, both approaches are precisely equivalent. In terms of coding effort and performance, both approaches are comparable. &lt;/p&gt;

&lt;p&gt;The advantage of the BB approach is that because the data is encoded as a function, it becomes easier to create interpreters for the data type, and I have illustrated this with a pretty-printer and evaluator for a parsed expression. All interpreters for BB types have the same structure, which is why I call it a universal interpreter. The key feature is that these interpreters do not require any explicit recursion. &lt;/p&gt;

&lt;p&gt;The complete code for both articles is in &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/universal-interpreter.raku&quot;&gt;universal-interpreter.raku&lt;/a&gt;&lt;/p&gt;

&lt;!-- 

### Bonus: parsing the expression

In the article []() I presented a parser combinator library which uses the role-based algebraic data types.  The parser returns the following type:

```perl6
role TaggedEntry {}
# A string value
role Val[Str @v] does TaggedEntry {
    has Str @.val=@v;
} 
# A list of TaggedEntry values tagged with a string label
role ValMap [  @vm] does TaggedEntry {
    has @.valmap = @vm; 
}
```

It is quite straightforward to transform a data structure of this type into our `Term` type:

```perl6
multi sub taggedEntryToTerm (Var , Val \val_strs) { Var[ val_strs.val.head].new }
multi sub taggedEntryToTerm (Par , Val \par_strs) { Par[ par_strs.val.head].new }
multi sub taggedEntryToTerm (Const ,\const_strs) {Const[ Int(const_strs.val.head)].new } 
# multi sub taggedEntryToTerm (Pow , ValMap [t1,(_,Val [v2])]) { Pow[ taggedEntryToTerm(...,....), Int(...)].new}        
# multi sub taggedEntryToTerm (Add , ValMap hmap) = Add $ map taggedEntryToTerm hmap
# multi sub taggedEntryToTerm (Mult , ValMap hmap) = Mult $ map taggedEntryToTerm hmap
```


```perl6
my Str @val_strs = &quot;42&quot;;
my \v = taggedEntryToTerm(Const, Val[@val_strs].new);
say v.raku; 
```

 --&gt;

        </content>
    </entry>
    
    <entry>
        <title>Encoding types as functions in Raku</title>
        <link href="https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-1/"/>
        <updated>2020-09-12T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-1</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/universal-interpreter-part-1_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;This is the first part of an article in my series about functional programming in general and algebraic data types and function types in particular in &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt;. It builds on my earlier articles on &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;algebraic data types in Raku&lt;/a&gt; and their use in the practical example of &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/list-based-parser-combinators/&quot;&gt;list-based parser combinators&lt;/a&gt;. It also makes heavily use of &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/function-types&quot;&gt;function types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are not familiar with functional programming or with Raku, I suggest you read my introduction &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&quot;&gt;&amp;quot;Cleaner code with functional programming&amp;quot;&lt;/a&gt;. If you are not familiar with algebraic data types or function types, you might want to read the other articles as well. &lt;/p&gt;

&lt;p&gt;In this article, I want to explain a technique called &lt;a href=&quot;http://okmij.org/ftp/tagless-final/course/Boehm-Berarducci.html&quot;&gt;Böhm-Berarducci encoding&lt;/a&gt; of algebraic data types. The link above is to Oleg Kiselyov&amp;#39;s explanation, which makes for interesting reading but is not required for what follows. Oleg says:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;quot;Boehm-Berarducci&amp;#39;s paper has many great insights. Alas, the generality of the presentation makes the paper very hard to understand. It has a Zen-like quality: it is incomprehensible unless you already know its results.&amp;quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, to follow the explanation in this article, you don&amp;#39;t need to read either Böhm and Berarducci&amp;#39;s  original paper or Oleg&amp;#39;s explanation. For the purpose of this article, it is sufficient to say that the Böhm-Berarducci encoding is a way to encode an algebraic data type as a function type. This means that the data itself is also encoded as a function. As a result, the function encoding the data type becomes a &amp;quot;universal interpreter&amp;quot;. This makes it is easy to create various interpreters for algebraic data types. &lt;/p&gt;

&lt;p&gt;In this first part, I will explain a way to implement Böhm-Berarducci (BB) encoding using roles in Raku, with basic examples. In &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-2&quot;&gt;the second part&lt;/a&gt; I will show how to use BB encoding to construct a &amp;#39;universal interpreter&amp;#39; which makes it very easy to create specific interpreters for complex data structures. &lt;/p&gt;

&lt;h2&gt;The basic idea behind the Böhm-Berarducci encoding&lt;/h2&gt;

&lt;p&gt;The basic idea behind the Böhm-Berarducci (BB) encoding is to create a type which represents a function with an argument for every alternative in a sum type.
Every argument is itself a function which takes as arguments the arguments of each alternative product type, and returns a polymorphic type. Because the return type is polymorphic, we decide what it will be when we use the BB type. In this way a BB-encoded data structure is a generator for whatever type we like, in other words it is a universal interpreter. &lt;/p&gt;

&lt;p&gt;For example, if we define a sum type &lt;code&gt;S&lt;/code&gt; with three alternatives &lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt; and &lt;code&gt;A3&lt;/code&gt;, using the same notation as in the article on &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;algebraic data types in Raku&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then the corresponding BB type will be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;∀&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- A1 Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- A2 String&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- A3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- The return type&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have put parentheses to show which part of the type is the function type corresponding to each alterative. 
Because the constructor for &lt;code&gt;A3&lt;/code&gt; takes no arguments, the corresponding function signature in the BB encoding is simply &lt;code&gt;a&lt;/code&gt;: a function which takes no arguments and returns something of type &lt;code&gt;a&lt;/code&gt;. The final &lt;code&gt;a&lt;/code&gt; is the return value of the top-level function: every type alternative is an argument to the function. When applying the function, it must return a value of a given type. This type is &lt;code&gt;a&lt;/code&gt; because &lt;code&gt;a&lt;/code&gt; is the return type of every function representing an alternative. I will explain the &lt;code&gt;∀ a .&lt;/code&gt; later.&lt;/p&gt;

&lt;h2&gt;Some simple examples&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s look at a few examples to see how this works in practice.&lt;/p&gt;

&lt;h3&gt;OpinionatedBool: an enum-style sum type&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;previous post&lt;/a&gt; I showed how you can use Raku&amp;#39;s &lt;em&gt;role&lt;/em&gt; feature to implement algebraic data types. I gave the example of 
&lt;code&gt;OpinionatedBool&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpinionatedBool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AbsolutelyTrue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TotallyFalse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which in Raku becomes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbsolutelyTrue&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotallyFalse&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a sum type with two alternatives. &lt;/p&gt;

&lt;p&gt;The type declaration of the BB type lists the types of all the arguments representing the alternatives. As in this case the constructors for the alternatives take no arguments, the corresponding functions also take no arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpinionatedBoolBB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpinionatedBoolBB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;∀&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- AbsolutelyTrue&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- TotallyFalse&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;a href=&quot;https://haskell.org&quot;&gt;Haskell&lt;/a&gt;, we would implement this type as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpinionatedBoolBB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpinionatedBoolBB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unBoolBB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- AbsolutelyTrue&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- TotallyFalse&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You don&amp;#39;t need to know any Haskell for what follows, but as the Raku implementation is closely modeled on the Haskell one, it is worth explaining a bit.
The &lt;code&gt;newtype&lt;/code&gt; keyword in Haskell is used to declare types with a single constructor. What we have here is a record type with a single field, and this field has the accessor function &lt;code&gt;unBoolBB&lt;/code&gt;, which is a convenience to allow easy access to the function encoded in the type. The &lt;code&gt;∀ a&lt;/code&gt;  or &lt;code&gt;forall a&lt;/code&gt; allows us to introduce a type parameter that is only in scope in the expression on the right-hand side. Because the Haskell notation is so close to the formal notation, I will from now on use the Haskell notation.&lt;/p&gt;

&lt;p&gt;In Raku, we can implement this  BB type minimally as a parametric role with a method with a typed signature:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unBoolBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells us a lot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the parameter to the role has an &lt;code&gt;&amp;amp;&lt;/code&gt; sigil so it of type &lt;code&gt;Callable&lt;/code&gt; (i.e. it is a function)&lt;/li&gt;
&lt;li&gt;the method&amp;#39;s type tells us that there are two arguments of type &lt;code&gt;Any&lt;/code&gt;. The method itself also returns a value of type &lt;code&gt;Any&lt;/code&gt;, i.e. there is no constraint on the type of the return value. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this implementation, the type safety is not quite as strong as in Haskell, where we guarantee that all these return values will be of the same type. The main purpose for using the types here is to make it provide documentation. We can enforce the type safety at a different point if desired.&lt;/p&gt;

&lt;p&gt;Now, the whole idea is that this role &lt;code&gt;BoolBB&lt;/code&gt; will serve the same purpose as my &lt;code&gt;OpinionatedBool&lt;/code&gt;. So instead of saying&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;trueOB&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;AbsolutelyTrue&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I want something like &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;trueBB&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in this example, &lt;code&gt;BBTrue&lt;/code&gt; will be an instance of &lt;code&gt;BoolBB&lt;/code&gt; with a specific function as parameter. Let&amp;#39;s call that function &lt;code&gt;true&lt;/code&gt;, so we have&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;[ &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and similar for the &lt;code&gt;false&lt;/code&gt; case. We can make this a little nicer using a helper function to create &lt;code&gt;BoolBB&lt;/code&gt; instances:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbb&lt;/span&gt;(\&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way we can write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;bbb&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; } 
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;bbb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this particular case, because none of the constructors takes any arguments, we can also write this as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;bbb&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;bbb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ∀ --&gt;

&lt;p&gt;The question is then: what are the functions &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;? We know they are of type &lt;code&gt;a ⟶ a ⟶ a&lt;/code&gt;; an obvious choice is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;  = -&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; ) { &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the same choice we made in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/everything-is-a-function/&quot;&gt;the article &amp;quot;Everything is a function&amp;quot;&lt;/a&gt;. In fact, these are simply &lt;em&gt;selector&lt;/em&gt; functions which select the first or second argument. &lt;/p&gt;

&lt;p&gt;In practice, we often want to convert between BB types and their algebraic counterparts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To turn a Bool into a BoolBB:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolBB&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;){ &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt; ?? &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt; !! &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;To turn the BB Boolean into an actual Boolean:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt;) { 
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unBoolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;False&lt;/span&gt;) 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Note that this works with either way of defining &lt;code&gt;BBTrue&lt;/code&gt; and &lt;code&gt;BBFalse&lt;/code&gt; because calling a function without arguments in Raku does not require parentheses.)&lt;/p&gt;

&lt;p&gt;We can do this more OO-like by making &lt;code&gt;bool&lt;/code&gt; a method of &lt;code&gt;BoolBB&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolBB&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unBoolBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;);
    }

    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;() { 
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unBoolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;False&lt;/span&gt;) 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can say&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;boolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;).&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;boolBB&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt;).&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and I&amp;#39;m sure those dots will make some people happy.&lt;/p&gt;

&lt;p&gt;Note however that we do not really need the &lt;code&gt;bool&lt;/code&gt; method, instead we can simply compare the types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;trueBB&lt;/span&gt; ~~ &lt;span class=&quot;n&quot;&gt;BBTrue&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; True&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;BBFalse&lt;/span&gt; ~~ &lt;span class=&quot;n&quot;&gt;trueBB&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can generalise this approach as an alternative to arbitrary enums. For example, and &lt;code&gt;RGB&lt;/code&gt; enum can be written very easily as a BB type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unRGB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with selector functions &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;  = -&amp;gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; = -&amp;gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; = -&amp;gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, the main reason for using BB types is to make it easier to perform computations on the data structure encoded in the type. Constant sum types like &lt;code&gt;Bool&lt;/code&gt; and &lt;code&gt;RGB&lt;/code&gt; don&amp;#39;t store data to compute on, except in the most trivial way, and are therefore not the main target of this encoding. I presented them only because they are the easiest ones to explain.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-2&quot;&gt;second part&lt;/a&gt; of the article presents a worked example. But first, let&amp;#39;s look at a few more simple examples explaining more features of the BB approach.&lt;/p&gt;

&lt;h3&gt;The &lt;code&gt;Maybe&lt;/code&gt; type: a sum type with a polymorphic argument&lt;/h3&gt;

&lt;p&gt;The Boolean type above had two constructors without arguments. A simple algebraic data type where one of the constructors has an argument is the &lt;code&gt;Maybe&lt;/code&gt; type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This type is used to express that a function does not always return a value of a given type. For example, if we look up a key in a map, it is possible that there is no entry for that key. So using &lt;code&gt;Maybe&lt;/code&gt; we could write a safe lookup function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;safeLookup&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;%v&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Maybe&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  (&lt;span class=&quot;nv&quot;&gt;%v&lt;/span&gt;{&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;}:&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;Just&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;%v&lt;/span&gt;{&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;}].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
    } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Maybe&lt;/code&gt; type is polymorphic, so we have instances of &lt;code&gt;Maybe&lt;/code&gt; for any type we like.  In Haskell:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MayBB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MayBB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;unMayBB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Just b &lt;/span&gt;
&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Nothing &lt;/span&gt;
&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in Raku:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt;[ &lt;span class=&quot;nv&quot;&gt;&amp;amp;mb&lt;/span&gt; ] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unMayBB&lt;/span&gt;(
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;j:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),
        &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
        --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;
    ) {
        &lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;j&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use a &lt;code&gt;Callable&lt;/code&gt; (&lt;code&gt;&amp;amp;j&lt;/code&gt;) for the &lt;code&gt;Just&lt;/code&gt; variant but a (sigil-less) scalar (&lt;code&gt;\n&lt;/code&gt;) for the &lt;code&gt;Nothing&lt;/code&gt; as it is a constant.&lt;/p&gt;

&lt;p&gt;As before for the BB Boolean, we create some helper functions. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we have the &lt;em&gt;selectors&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# selectors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbj&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; ) { -&amp;gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;j:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;), &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; { &lt;span class=&quot;nv&quot;&gt;&amp;amp;j&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;)} }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbn&lt;/span&gt; { -&amp;gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;j:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;),&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Then we have a wrapper to make role construction nicer:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbb&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;jm&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt;[ &lt;span class=&quot;nv&quot;&gt;&amp;amp;jm&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;With these we can easily write the final BB type constructors:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Just&lt;/span&gt;(\&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;mbb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbj&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;) }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;mbb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbn&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create values of our &lt;code&gt;MayBB&lt;/code&gt; type, e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;mbb&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;mbbn&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the BB type now functions exactly as an ordinary algebraic data type.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s make a simple printer for this type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printMayBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;MayBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unMayBB&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;) { &lt;span class=&quot;s&quot;&gt;&amp;quot;{x}&amp;quot;&lt;/span&gt; }, &lt;span class=&quot;s&quot;&gt;&amp;#39;NaN&amp;#39;&lt;/span&gt; );
}

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printMayBB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbb&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 42&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printMayBB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbbn&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, this function could be made a method of the &lt;code&gt;MayBB&lt;/code&gt; role if desired. The point to note however is that to create this printer, all we had to do was provide the right arguments to &lt;code&gt;unMayBB&lt;/code&gt;. We chose the concrete type &lt;code&gt;Str&lt;/code&gt; for the type parameter in the BB type. Recall that to turn the BB Boolean into an actual Boolean, all we had to do was to provide arguments of type &lt;code&gt;Bool&lt;/code&gt; to &lt;code&gt;unBoolBB&lt;/code&gt;. These are simple examples that already illustrate some of the power of the BB encoding.&lt;/p&gt;

&lt;h3&gt;A pair, the simplest product type&lt;/h3&gt;

&lt;p&gt;The two previous examples were for sum types. Let&amp;#39;s look at a simple product type, a pair of two values also known as a tuple. Assuming the tuple is polymorphic with type parameters &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, the BB type is in Haskell:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PairBB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PairBB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in Raku:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;[ &lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt; ] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;p_:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;)  --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;p_&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The selectors (for convenience we reuse the &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; functions used for the &lt;code&gt;BoolBB&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# To get the elements out of the pair&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; ){ &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;) }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt;( \&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; ){ &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pair constructor takes the values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to be put in the pair, and uses them in an anonymous function used as the parameter for the role. The single argument of this anonymous function is a selector function &lt;code&gt;&amp;amp;p&lt;/code&gt;, which is applied to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in its body. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Final pair constructor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Pair&lt;/span&gt;(\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;[ -&amp;gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt; { &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;) } ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use this to build pairs e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;bbp&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;Pair&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;quot;forty-two&amp;quot;&lt;/span&gt;;

&lt;span class=&quot;c1&quot;&gt;# print it&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;({fst bbp},{snd bbp})&amp;quot;&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; (42,forty-two)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with the Boolean, we can do this a bit more OO-like if you prefer by making &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt; methods of the &lt;code&gt;PairBB&lt;/code&gt; role:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;[ &lt;span class=&quot;nv&quot;&gt;&amp;amp;p&lt;/span&gt; ] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;p_:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;)  --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;p_&lt;/span&gt;);
    }

    &lt;span class=&quot;c1&quot;&gt;# To get the elements out of the pair&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt;( ){ &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;) }
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt;( ){ &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus we can say&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;({bbp.fst },{bbp.snd})&amp;quot;&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; (42,forty-two)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An important point is that the BB-encoded data structures are immutable, so you can&amp;#39;t update a field. Instead, you create a new variable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;pbb2&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;Pair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;pbb&lt;/span&gt;) + &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;#39;forty-three&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let&amp;#39;s assume for a moment that our &lt;code&gt;PairBB&lt;/code&gt; represents a complex number and we want to convert it from (Real, Imaginary) into polar form (Modulus, Phase). Again we can use the same approach:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toPolar&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;mb&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unPairBB&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;PairBB&lt;/span&gt;) {
        &lt;span class=&quot;nb&quot;&gt;Pair&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;),&lt;span class=&quot;nb&quot;&gt;atan2&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;);
    } );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;What we have learned so far is how to create sum (alternative) and product (record) types in Raku using a formalism called Böhm-Berarducci (BB) encoding, which uses functions to create data structures. We use Raku&amp;#39;s roles to implement BB types, and I have illustrated this with three simple examples: a sum type with two alternative constructors that do not take arguments (a Boolean), a sum type with two alternative constructors where one of them takes an argument (the Maybe type) and a product type for a pair of two values. &lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/universal-interpreter-part-2&quot;&gt;the next part&lt;/a&gt;, we will see how BB types make it easy tointerpreter create interpreters for complex data structures.&lt;/p&gt;

&lt;p&gt;The complete code for both articles is in &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/universal-interpreter.raku&quot;&gt;universal-interpreter.raku&lt;/a&gt;.&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Function types</title>
        <link href="https://wimvanderbauwhede.github.io/articles/function-types/"/>
        <updated>2020-08-07T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/function-types</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/function-types_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;This article builds on my earlier articles on &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;algebraic data types&lt;/a&gt; in on &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt; and their use in the practical example of &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/list-based-parser-combinators/&quot;&gt;list-based parser combinators&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In this article I want to look at function types in some detail, and show a way to create well typed functions in Raku. If you are not familiar with functional programming (or with &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt;), I suggest you read my introduction &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&quot;&gt;&amp;quot;Cleaner code with functional programming&amp;quot;&lt;/a&gt;. If you are not familiar with algebraic data types, you might want to read the other two articles as well. For most of the article, I provide examples in Raku, Python, Rust and Haskell. There is also some C and even some Fortran. &lt;/p&gt;

&lt;h2&gt;Type signatures&lt;/h2&gt;

&lt;p&gt;A function&amp;#39;s type signature consists of the types of each of its arguments and the return type. In most typed languages, the type is part of the function signature. &lt;/p&gt;

&lt;p&gt;For example in C&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in Fortran&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;integer &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in Rust&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in Raku&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;) {...}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;) { &lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; }

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;sqsum&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;) { &lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in Python, using the &lt;code&gt;typing&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqsum_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The type of a function of functions&lt;/h2&gt;

&lt;p&gt;But what happens if we want to provide a function argument that is itself a function, or return a function (so-called &lt;em&gt;higher-order functions&lt;/em&gt;)?&lt;/p&gt;

&lt;p&gt;This is possible in most languages, but what I am interested in is the type information: what is the type signature of such a function of functions?&lt;/p&gt;

&lt;p&gt;C supports functions-of-functions indirectly through function pointers, by creating a function type through a &lt;code&gt;typedef&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ten_times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe surprisingly, venerable old Fortran does support passing functions and subroutines as arguments. Functions are typed by their return type; subroutines are not typed. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;program &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fof&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end program &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fof&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;subroutine &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;! ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end subroutine &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Rust you can provide the complete type of a function-as-argument: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ten_times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python we can use &lt;code&gt;Callable&lt;/code&gt;, which also allow for the complete type to be expressed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ten_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same example in Raku becomes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Sub&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;)) {
&lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
}

&lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we can also pass the complete type. An equivalent way to write this is using the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil &lt;a href=&quot;https://docs.raku.org/language/variables#index-entry-sigil_&amp;&quot;&gt;which imposes the &lt;code&gt;Callable&lt;/code&gt; type constraint&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ten_times&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f:&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;)) {
&lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The types can be nested too, e.g. &lt;code&gt;((Int, Int --&amp;gt; Int), (Int, Int --&amp;gt; Int) --&amp;gt; Int))&lt;/code&gt; is a valid type signature.&lt;/p&gt;

&lt;!--


--------
fn main() {
 
    let sqsum  = |x : i32, y: i32| -&gt; i32 {x*x+y*y};
    let res = sqsum(4,3);
 
    fn ten_times&lt;F&gt;(f: F  ) -&gt; i3 where F: Fn(i32,i32) -&gt; i32 {
        for index in 0..10 {
            let res = f(index,index+1);
            println!(&quot;{}&quot;,res);
        }
    }    
    ten_times(sqsum);
}

--------

from typing import Callable

sqsum : Callable[[int,int], int]  = lambda x,y : x*x+y*y
def sqsum_(x: int, y: int) -&gt; int:  
    return x*x+y*y
res : int = sqsum(4,3)

def ten_times(f: Callable[[int, int],int]) -&gt; int:
    for index in range(0,11):
        res = f(index,index+1)
        print(res)
    
ten_times(sqsum)

--------
--&gt;

&lt;h2&gt;Introducing the arrow&lt;/h2&gt;

&lt;p&gt;All of the above ways to express function type signatures are perfectly adequate in their respective languages. However, with the exception of Raku, they all share the problem that these function-of-function type signatures don&amp;#39;t compose very well: what if we want to write a function-of-function-of-function type? This is less far-fetched than it may seem.
I would like to introduce a notation used in type theory. It is at the same time simple and powerful. If you are familiar with functional languages like Haskell, Idris or Agda, you already know it. &lt;/p&gt;

&lt;p&gt;Instead of mixing the type with the function declaration, it is written separately. The name of the function is followed by a colon and the list types of the arguments and the return value. Each argument is separated by an arrow. The above example of a function of two integer arguments returning an integer would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function-of-a-function introduced above has as type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten_times&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parentheses group the type of the function that is the only argument of &lt;code&gt;ten_times&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this notation, the arrow can be interpreted as an operator which creates a function type from the two types that are its arguments. The important property of this operator is that it is right associative. What this means is that for example &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is the same as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for completeness&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;A detour into partial application&lt;/h2&gt;

&lt;p&gt;The above groupings imply that our function &lt;code&gt;f&lt;/code&gt; can be interpreted in three ways, as a function of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 arguments of types &lt;code&gt;t1&lt;/code&gt;,&lt;code&gt;t2&lt;/code&gt;,&lt;code&gt;t3&lt;/code&gt;, returning a result of type &lt;code&gt;t4&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;2 arguments of types &lt;code&gt;t1&lt;/code&gt;,&lt;code&gt;t2&lt;/code&gt;, returning a result of type &lt;code&gt;t3 -&amp;gt; t4&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;1 argument of types &lt;code&gt;t1&lt;/code&gt;, returning a result of type &lt;code&gt;t2-&amp;gt;t3-&amp;gt;t4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s say we have values &lt;code&gt;v1&lt;/code&gt;,&lt;code&gt;v2&lt;/code&gt;,&lt;code&gt;v3&lt;/code&gt; for the arguments and &lt;code&gt;v4&lt;/code&gt; as the result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But suppose we only apply &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;pf1 : t3 ⟶ t4
pf1 = f v1 v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get a new function &lt;code&gt;pf1&lt;/code&gt; which takes a single argument &lt;code&gt;v3&lt;/code&gt;: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in the same way we can create &lt;code&gt;pf2&lt;/code&gt; and &lt;code&gt;pf3&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pf2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pf2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;pf3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;⟶&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pf3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because &lt;code&gt;pf1&lt;/code&gt;, &lt;code&gt;pf2&lt;/code&gt; and &lt;code&gt;pf3&lt;/code&gt; are functions and the above is true for all values of &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, &lt;code&gt;v3&lt;/code&gt; and &lt;code&gt;v4&lt;/code&gt;, it follows that&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pf3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For completeness, we can also apply &lt;code&gt;pf2&lt;/code&gt; directly to two arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pf2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This concept of creating a new function by not providing values for some of the arguments is called &lt;em&gt;partial application&lt;/em&gt;, and many languages support it. Here are examples in Haskell, Raku, Python and Rust.&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;In case you are not familiar with Haskell, this is what you need to know: it is whitespace-sensitive like Python, but has a markedly different syntax. Because everything is a function, there is no keyword to mark a function. Because there is only lexical scope, there is no need for any special scope identifiers. Function arguments are separated by spaces. Lambda functions (anonymous functions) start with a &lt;code&gt;\&lt;/code&gt;,  chosen because it looks a bit like the Greek letter lambda, λ. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- named function of 2 arguments&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- lambda function bound to a named variable&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type of &lt;code&gt;sqsum&lt;/code&gt; is 
&lt;code&gt;haskell
sqsum :: Int -&amp;gt; Int -&amp;gt; Int
&lt;/code&gt;
(Haskell uses &lt;code&gt;::&lt;/code&gt; rather than &lt;code&gt;:&lt;/code&gt; for the type signature)&lt;/p&gt;

&lt;p&gt;In Haskell, partial application works exactly as in the examples above. So our function &lt;code&gt;sqsum&lt;/code&gt; can be partially applied like this: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqsum4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sqsum4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqsum&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can apply &lt;code&gt;sqsum4&lt;/code&gt; to the remaining argument:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqsum4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- returns 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very neat. But suppose you want to apply the second argument, rather than the first one? The Haskell Prelude library provides the function &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#v:flip&quot;&gt;flip&lt;/a&gt;, which simply flips the arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is fine as far as it goes, but let&amp;#39;s do a somewhat contrived example. Let&amp;#39;s say we have a function of four arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we want to apply the 1st and 4th argument but not the others, something like &lt;code&gt;g v1 _ _ v4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way to do this is to create yet another function (of course!):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply14&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with this function we can partially apply the 1st and 4th argument of &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g14&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example mainly serves to illustrate the power of the arrow-based function type notation: it lays out the type of &lt;code&gt;apply14&lt;/code&gt; clearly and concisely. &lt;/p&gt;

&lt;h3&gt;Raku&lt;/h3&gt;

&lt;p&gt;Raku provides the method &lt;a href=&quot;https://docs.raku.org/routine/assuming&quot;&gt;assuming&lt;/a&gt;, which acts as a generalised version of our &lt;code&gt;apply14&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;g14&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;&amp;amp;g&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;assuming&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;, *, *, &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;);

&lt;span class=&quot;n&quot;&gt;g14&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The return type of &lt;code&gt;assuming&lt;/code&gt; is a &lt;code&gt;Callable&lt;/code&gt;. This is a role for objects which support calling them. Thus, &lt;code&gt;g14&lt;/code&gt; can be called as if it was a regular function.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;Python&amp;#39;s &lt;a href=&quot;https://docs.python.org/2/library/functools.html&quot;&gt;functools&lt;/a&gt; provide the &lt;code&gt;partial&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g14&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The return type of &lt;code&gt;partial&lt;/code&gt; is a &lt;code&gt;partial&lt;/code&gt; object, which has an attribute &lt;code&gt;partial.func&lt;/code&gt;, a callable object or function. Calls to the partial object will be forwarded to func with new arguments and keywords, so you can say &lt;code&gt;g14(v2,v3)&lt;/code&gt; instead of &lt;code&gt;g14.func(v2,v3)&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Rust&lt;/h3&gt;

&lt;p&gt;Rust provides the &lt;code&gt;partial!&lt;/code&gt; macro via its &lt;a href=&quot;https://docs.rs/partial_application/0.2.1/partial_application/&quot;&gt;partial_application&lt;/a&gt; crate. Its behaviour is very similar to our &lt;code&gt;apply14&lt;/code&gt;: &amp;quot;&lt;code&gt;partial!(some_fn =&amp;gt; arg0, _, arg2, _)&lt;/code&gt; returns the closure &lt;code&gt;|x1, x3| some_fn(arg0, x1, arg2, x3)&lt;/code&gt;&amp;quot;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#[macro_use]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g14&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Back to the function types&lt;/h2&gt;

&lt;p&gt;Suppose we want a type like the one we defined in C using a &lt;code&gt;typedef&lt;/code&gt;, which encapsulates the function type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Haskell, that would be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we can generalise this to be a generic function of two arguments by using type variables instead of concrete types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how would we use this? Let&amp;#39;s create an instance&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ft&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ft&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is fine, but to apply the function we first must unwrap the type constructor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is not very handy. A better way is to use the record type syntax which gives us an accessor function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ft&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fun2Args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I have applied this to integer, but the type of the function is &lt;code&gt;Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a&lt;/code&gt;, so this works for any type in the &lt;code&gt;Num&lt;/code&gt; typeclass.&lt;/p&gt;

&lt;h2&gt;Named function types for Raku&lt;/h2&gt;

&lt;p&gt;In Raku, we can follow a similar approach of wrapping a function signature in a type, and it is actually simpler than in Haskell. We create a parametric role which takes the function as a parameter, and has a method with the signature of the function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,  &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt;) {
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;);
    }
}

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;[ -&amp;gt;\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;} ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what is the benefit of doing this? Surely we could just have done&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt; =  -&amp;gt; &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Numeric&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;};

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this simple example, that would indeed be enough as we don&amp;#39;t have functions of functions. But what we gain is that we can now create a function with arguments of type &lt;code&gt;Fun2NumArgs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fof&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;) {
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, we can now have explicitly typed function signatures in Raku. Recall that without this approach, the type of a function would be &lt;code&gt;Code&lt;/code&gt; or any dependant in &lt;a href=&quot;https://docs.raku.org/type/Code#Type_Graph&quot;&gt;the Code type graph&lt;/a&gt;. With the role-based type, the function must have the type of the method &lt;code&gt;unF&lt;/code&gt;. Furthermore, these function types can be nested. Let&amp;#39;s create another type, for a function with two arguments of any type: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun2Args&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We create two instances of &lt;code&gt;Fun2NumArgs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;[ -&amp;gt;\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;} ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;ft2&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;[ -&amp;gt;\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+x&lt;/span&gt;} ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a function of these two functions using &lt;code&gt;Fun2Args&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;fof2&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Fun2Args&lt;/span&gt;[ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;) {
            &lt;span class=&quot;c1&quot;&gt;# returns another function of 2 Numeric arguments&lt;/span&gt;
        } 
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now call the returned function like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fof2&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;ft2&lt;/span&gt;).&lt;span class=&quot;n&quot;&gt;unF&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having to call the &lt;code&gt;unF&lt;/code&gt; method is not optimal. A better way is to can make the object itself callable instead, by defining &lt;a href=&quot;https://docs.raku.org/routine/CALL-ME&quot;&gt;the submethod &lt;code&gt;CALL-ME&lt;/code&gt;&lt;/a&gt; instead of the method &lt;code&gt;unF&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun2Args&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;submethod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL-ME&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,  \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;);
    }
}

&lt;span class=&quot;c1&quot;&gt;# And similar for Fun2NumArgs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way, we can do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fof2&lt;/span&gt;.(&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;ft2&lt;/span&gt;)(&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is almost what we want. But we can remove the &lt;code&gt;.&lt;/code&gt; as well, by making &lt;code&gt;fof2&lt;/code&gt; of type &lt;code&gt;Callable&lt;/code&gt;. We can indicate this with the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil. But with the current definition of &lt;code&gt;Fun2Args&lt;/code&gt;, this will result in a type error because &lt;code&gt;Fun2Args&lt;/code&gt; is not callable. However, &lt;code&gt;Callable&lt;/code&gt; is a role so all we need to do is mix it in:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fun2ArgsC&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Callable&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;submethod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL-ME&lt;/span&gt;( \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,  \&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Any&lt;/span&gt;) {
        &lt;span class=&quot;nv&quot;&gt;&amp;amp;b&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way we have created something very similar to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Function_object&quot;&gt;function object&lt;/a&gt;, but using a role rather than a class. And now we can write:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;fof3&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Fun2ArgsC&lt;/span&gt;[ 
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;Fun2NumArgs&lt;/span&gt;) {
            ...
        } 
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fof3&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;ft2&lt;/span&gt;)(&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To summarize, we create a parametric callable role where the parameter is the function to be called, and the signature of the CALL-ME submethod provides the type constraint to that function. Passing a function with a different signature will give a type error. &lt;/p&gt;

&lt;p&gt;I think this is a nice way to have some additional type safety in your functional Raku code.&lt;/p&gt;

&lt;h2&gt;Bonus Tracks&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=StKVS0eI85I&quot;&gt;&amp;quot;Call Me&amp;quot; by Blondie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=_04CojexsYw&quot;&gt;&amp;quot;CALL ME&amp;quot; (「コール・ミー」) by Drop&amp;#39;s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
But we can also have    

```haskell
newtype Fun2Args = Fun2Args forall a . a -&gt; a -&gt; a
```


Prelude&gt; newtype Fun2Args = Fun2Args { unF::forall a . Num a =&gt; a -&gt; a -&gt; a}
Prelude&gt; ft = Fun2Args (\x y -&gt; x+y)
Prelude&gt; :t ft
ft :: Fun2Args
Prelude&gt; :t unF ft
unF ft :: Num a =&gt; a -&gt; a -&gt; a
Prelude&gt; :t unF ft
unF ft :: Num a =&gt; a -&gt; a -&gt; a
Prelude&gt; (unF ft) 3 4
7
Prelude&gt; (unF ft) 3.4 4.5
7.9
Prelude&gt; 
--
--&gt;

        </content>
    </entry>
    
    <entry>
        <title>Cleaner code with functional programming</title>
        <link href="https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/"/>
        <updated>2020-07-18T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/decluttering-with-functional-programming_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;!-- To a functional programmer like me, every programming language is a functional language. --&gt; 

&lt;p&gt;Functional programming is a style of programming and modern languages support this style to a greater or lesser extent. In this article I want to explain how programming in a functional style provides you with powerful abstractions to make your code cleaner. I will illustrate this with examples in Raku and Python, which as we will see are both excellent languages for functional programming.&lt;/p&gt;

&lt;h2&gt;Raku: a quick introduction&lt;/h2&gt;

&lt;p&gt;The code examples in this article are written in &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt;. I assume most people are familiar with Python, but Raku is less well known, so I will explain the basics first. The code in this article is not very idiomatic so you should be able to understand it easily if you know another programming language.&lt;/p&gt;

&lt;p&gt;Raku is most similar to &lt;a href=&quot;https://www.perl.org&quot;&gt;Perl&lt;/a&gt;. Both languages are syntactically similar to C/C++, Java and JavaScript: block-based, with statements separated by semicolons, blocks demarcated by braces, and argument lists in parentheses and separated by commas. The main feature that sets Perl and Raku apart from other languages is the use of sigils (&amp;#39;funny characters&amp;#39;) which identify the type of a variable: &lt;code&gt;$&lt;/code&gt; for a scalar, &lt;code&gt;@&lt;/code&gt; for an array, &lt;code&gt;%&lt;/code&gt; for a hash (map) and &lt;code&gt;&amp;amp;&lt;/code&gt; for a subroutine. Variables also have keywords to identify their scope, I will only use &lt;code&gt;my&lt;/code&gt; which marks the variable as lexically scoped. A subroutine is declared with the &lt;code&gt;sub&lt;/code&gt; keyword, and subroutines can be named or anonymous:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;span class=&quot;c1&quot;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$anon_square&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python this would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anon_square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- Raku also has [twigils](https://docs.raku.org/language/variables#index-entry-Twigil), secondary sigils that influence the scoping of a variable. For this article, the only twigil used in the code is `.` which is used to declare a role or class attribute with automatically generated accessors (like `$.notes` in the example below). --&gt;

&lt;p&gt;Raku supports sigil-less variables, and uses the &lt;code&gt;\&lt;/code&gt; syntax to declare them. For more on the difference between ordinary and sigil-less variables, see &lt;a href=&quot;https://docs.raku.org/language/variables#Sigilless_variables&quot;&gt;the Raku documentation&lt;/a&gt;. For example (&lt;code&gt;say&lt;/code&gt; prints its argument followed by a newline):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;# sigilless&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;; 
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code in this article, I will use the sigil-less variables whenever possible.&lt;/p&gt;

&lt;p&gt;Raku has several types of sequence data structures. In the code below I will use &lt;a href=&quot;https://docs.raku.org/language/list&quot;&gt;lists and arrays&lt;/a&gt; and &lt;a href=&quot;https://docs.raku.org/type/Range&quot;&gt;ranges&lt;/a&gt;. The main difference between a list and an array in Raku is that a list is immutable, which means that once created, it can&amp;#39;t be modified. So it is a read-only data structure. To &amp;#39;update&amp;#39; an immutable data structure, you need to create an updated copy. Arrays on the other hand are mutable, so we can update their elements, extend them, shrink them etc. All updates happen in place on the original. &lt;/p&gt;

&lt;p&gt;Raku&amp;#39;s arrays are similar to Python&amp;#39;s lists and Raku&amp;#39;s lists are similar to Python&amp;#39;s tuples, which are also immutable. Apart from the syntax, ranges in Raku are similar to ranges in Python, and both are immutable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@array1&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; an array because of the &amp;#39;@&amp;#39; sigil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;array2&lt;/span&gt; = [&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;]; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; an array, because of the &amp;#39;[...]&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;range1&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a range 1 .. 10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@array3&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; an array from a range, because of the &amp;#39;@&amp;#39; sigil&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$list2&lt;/span&gt; = (&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; also a list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;list3&lt;/span&gt; = |(&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;);  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; an array from a range because of the &amp;#39;|&amp;#39; flattening operation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The equivalent Python code would be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a list from a tuple&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a list, because of the &amp;#39;[...]&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;range1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a range 1 .. 10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a list from a range&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tuple1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a tuple&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tuple2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; a tuple from a list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tuple3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; creates a tuple from a range&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Other specific bits of syntax or functionality will be explained for the particular examples. &lt;/p&gt;

&lt;h2&gt;&lt;em&gt;A function, by any other name&lt;/em&gt; &amp;mdash; functions as values&lt;/h2&gt;

&lt;p&gt;Functions are the essence of functional programming. As I explained in my article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/everything-is-a-function&quot;&gt;&amp;quot;Everything is a function&amp;quot;&lt;/a&gt;, in a proper functional language, all constructs are built from functions. &lt;/p&gt;

&lt;p&gt;All modern programming languages have a notion of functions, procedures, subroutines or methods. They are an essential mechanism for code reuse.
Typically, we think of a function as something that operates on some input values to produce one or more output values. The input values can be globally declared, attributes of a class or passed as arguments to the function. Similarly, the output values can be returned directly, to global variables, as class attributes or by modifying the input values. &lt;/p&gt;

&lt;p&gt;To benefit most from functional programming, it is best if functions are &lt;em&gt;pure&lt;/em&gt;, which means that a call to the function always produces the same output for the same inputs. In practice, this is easier to achieve if the function only takes inputs as arguments and returns the output directly, but this is not essential.&lt;/p&gt;

&lt;p&gt;The crucial feature of functional programming is that the input and output values of a function &lt;em&gt;can themselves be functions&lt;/em&gt;. So functions must be values in your language. Sometimes this is called &amp;quot;functions must be first-class&amp;quot;, and a function that takes and/or returns a function is sometimes called a &amp;quot;higher-order function&amp;quot;. &lt;/p&gt;

&lt;p&gt;If functions are values, it follows that we can assign them to variables. In particular we will assign them to the arguments of other functions. But we can also assign them to ordinary variables. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s consider the following function, &lt;code&gt;choose&lt;/code&gt;, which takes three arguments &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;} &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First let&amp;#39;s call &lt;code&gt;choose&lt;/code&gt; with strings as values for the first two arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;tstr&lt;/span&gt; = &lt;span class=&quot;s&quot;&gt;&amp;quot;True!&amp;quot;&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt; = &lt;span class=&quot;s&quot;&gt;&amp;quot;False!&amp;quot;&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;tstr&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;True&lt;/span&gt;);

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;True!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;True!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;False!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;True!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s try with functions as arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt;) { &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;True {s}!&amp;quot;&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;ff&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt;) { &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;False {s}!&amp;quot;&lt;/span&gt; }

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;res_f&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;tt&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;&amp;amp;ff&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;False&lt;/span&gt;);

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;res_f&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;amp;ff&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;rumour&amp;quot;&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;False rumour!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;True &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;False&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;lt;function tt at 0x7f829c3aa310&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rumour&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;False rumour!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So our function &lt;code&gt;choose&lt;/code&gt; took two functions as its first two arguments, and returned a function. In Raku we need the &lt;code&gt;&amp;amp;&lt;/code&gt; sigil on the function names because otherwise they would be evaluated: a bare function name like &lt;code&gt;tt&lt;/code&gt; is the same as calling the function without arguments, &lt;code&gt;tt()&lt;/code&gt;. By assigning this function to a variable (&lt;code&gt;res_f&lt;/code&gt;), we can now call &lt;code&gt;res_f&lt;/code&gt; as a function and it will eventually call &lt;code&gt;tt&lt;/code&gt; or &lt;code&gt;ff&lt;/code&gt; depending of the choice.&lt;/p&gt;

&lt;h2&gt;Functions don&amp;#39;t need a name&lt;/h2&gt;

&lt;p&gt;Now, if we can assign functions to variables, they don&amp;#39;t really need a name themselves. So our functions can be anonymous. Most languages support anonymous functions. In functional languages they are usually called &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/everything-is-a-function/&quot;&gt;&amp;quot;lambda functions&amp;quot;&lt;/a&gt;. In Raku, we have two ways to create anonymous functions:&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;sub (...)&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt;) { &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;True {s}!&amp;quot;&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or using the &lt;a href=&quot;https://docs.raku.org/language/functions#index-entry-pointy_blocks&quot;&gt;&amp;#39;pointy block&amp;#39; syntax&lt;/a&gt;, which is a little bit more compact:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;ff&lt;/span&gt; = -&amp;gt; \&lt;span class=&quot;o&quot;&gt;s&lt;/span&gt; { &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;False {s}!&amp;quot;&lt;/span&gt; };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python uses the &lt;code&gt;lambda&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;True &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;False &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now we can say&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;res_f&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;ff&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;True&lt;/span&gt;);

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;res_f&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says sub { }&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;story&amp;quot;&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;True story!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we print out the variable to which the function is bound, Raku returns &lt;code&gt;sub { }&lt;/code&gt; to indicate that the variable contains a function.&lt;/p&gt;

&lt;p&gt;In Python:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;lt;function &amp;lt;lambda&amp;gt; at 0x7f829b298b80&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;story&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;quot;True story!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Examples: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Functions of functions have many uses, and I just want to highlight three examples that are available readily in Raku: &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. Python has &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, and provides &lt;code&gt;reduce&lt;/code&gt; via the &lt;code&gt;functools&lt;/code&gt; module. What these functions have in common is that they offer an alternative to &lt;code&gt;for&lt;/code&gt;-loops over lists.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;map&lt;/code&gt; : applying a function to all elements of a list&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; takes two arguments: a function and a list. It applies the function to all values in the list in order and returns the results, for example to square all values in a list:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x&lt;/span&gt;} , &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python we need to explicitly create the tuple, but apart from the syntax differences, the structure is quite the same:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the functional alternative to the more conventional &lt;code&gt;for&lt;/code&gt;-loop:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; = [];
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x*x&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in both Raku and Python we need to use a mutable data structure for the &lt;code&gt;for&lt;/code&gt;-loop version, whereas the &lt;code&gt;map&lt;/code&gt; version uses immutable data structures.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;grep&lt;/code&gt; : filtering a list&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; (called &lt;code&gt;filter&lt;/code&gt; in Python) also takes arguments, a function and a list, but it only returns the values from the list for which the function returns &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; }, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can of course write this using a &lt;code&gt;for&lt;/code&gt;-loop and an &lt;code&gt;if&lt;/code&gt;-statement, but that again requires a mutable data structure:  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; = [];
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#39;s nice about &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; is that you can easily chain them together:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; % &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; }, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x&lt;/span&gt;}, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; take a list and return a list, so as long as you need to operate on a list, you can do this by chaining the calls.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;reduce&lt;/code&gt; : combining all elements of a list into a single value&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; also takes a function and a list, but it uses the function to combine all elements of the list into a single result. So the function must take two arguments. The &lt;em&gt;second&lt;/em&gt; argument is the element taken from the list, and the first argument is used as a state variable to combine all elements. For example, calculating the sum of a list of numbers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;) {&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;}, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;;

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happens here is that &lt;code&gt;acc&lt;/code&gt; is first set to the first element of the list (1), and then the second element is added to it, so &lt;code&gt;acc&lt;/code&gt; becomes 1+2=3; then the third element (3) is added to this, and so on. The effect is to consecutively sum all the numbers in list.&lt;/p&gt;

&lt;p&gt;To make this more clear, let&amp;#39;s write our own version of &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Writing your own&lt;/h3&gt;

&lt;p&gt;In many functional languages, a distinction is made between a left-to-right (starting at the lowest index) and right-to-left (starting at the highest index) reduction. This matters because depending on the function doing the reducing, the result can be different if the list is consumed from the left or from the right. For example, suppose our reducing function is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
-&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then it does not matter which direction we traverse the list. But consider the following function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
-&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; &amp;lt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; !! &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;( &lt;code&gt;... ?? ... !! ...&lt;/code&gt; is the Raku syntax for the conditional operator which is  &lt;code&gt;... ? ... : ...&lt;/code&gt; in most other languages and &lt;code&gt;... if ... else ...&lt;/code&gt; in Python)&lt;/p&gt;

&lt;p&gt;In this case the result will be different if the list is reduced from the left or from the right. In Raku and Python, &lt;code&gt;reduce&lt;/code&gt; is a left-to-right reduction.     &lt;/p&gt;

&lt;p&gt;Also, instead of using the first element of the list, the reduction function can take an additional argument, usually called the accumulator. In functional languages, reduce is usually  called &lt;em&gt;fold&lt;/em&gt;, so we can have a left fold and a right fold. Let&amp;#39;s have a look how we could implement these. &lt;/p&gt;

&lt;h4&gt;Left fold&lt;/h4&gt;

&lt;p&gt;A straightforward way to implement a left fold (so the same as &lt;code&gt;reduce&lt;/code&gt;) is to use a &lt;code&gt;for&lt;/code&gt;-loop inside the function. That means we have to update the value of the accumulator on every iteration of the loop. In Raku, sigil-less variables are immutable (I am simplifying here, see &lt;a href=&quot;https://docs.raku.org/language/containers#Binding&quot;&gt;the Raku documentation&lt;/a&gt; for the full story) so we need to use a sigiled variable, &lt;code&gt;$acc&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldll&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) { 
  &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;; 
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; {
    &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;);
  }
  &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to use immutable variables only, we can use recursion. Raku makes this easy because it allows multiple signatures for a subroutine (&lt;code&gt;multi sub&lt;/code&gt;s), and it will call the variant that matches the signature. In Python, there is the module &lt;a href=&quot;https://pypi.org/project/multipledispatch/&quot;&gt;multipledispatch&lt;/a&gt; that lets you do something similar to multi subs.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;foldl&lt;/code&gt; will consume the input list &lt;code&gt;lst&lt;/code&gt; and use &lt;code&gt;f&lt;/code&gt; combine its elements into the accumulator &lt;code&gt;acc&lt;/code&gt;. When the list has been consumed, the computation is finished and we can return &lt;code&gt;acc&lt;/code&gt; as the result. So our first variant says that if the input list is empty, we should return &lt;code&gt;acc&lt;/code&gt;.
The second variant takes an element &lt;code&gt;elt&lt;/code&gt; from the list (see &lt;a href=&quot;https://docs.raku.org/type/Range&quot;&gt;the Raku documentation&lt;/a&gt; for details on the &lt;code&gt;*&lt;/code&gt;) and combines it with &lt;code&gt;acc&lt;/code&gt; into &lt;code&gt;f(acc,elt)&lt;/code&gt;. It then calls &lt;code&gt;foldl&lt;/code&gt; again with this new accumulator and the remainder of the list, &lt;code&gt;rest&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# When the list is empty, return the accumulator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, ()) { &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) {
  &lt;span class=&quot;c1&quot;&gt;# Raku&amp;#39;s way of splitting a list in the first elt and the rest&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# The &amp;#39;*&amp;#39; is a shorthand for the end of the list&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. * ]; 
   &lt;span class=&quot;c1&quot;&gt;# The actual recursion&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;), &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python does not allow pattern matching of this kind so we need to write the recursion using a conditional:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Python&amp;#39;s way of splitting a tuple in the first elt and the rest&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# rest will be a list, not a tuple, but we&amp;#39;ll let that pass&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; 
   &lt;span class=&quot;c1&quot;&gt;# The actual recursion&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this implementation, none of the variables is ever updated. So all variables can be immutable. &lt;/p&gt;

&lt;h4&gt;Right fold&lt;/h4&gt;

&lt;p&gt;The right fold is quite similar to the left fold. For the loop-based version, all we do is &lt;code&gt;reverse&lt;/code&gt; the list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldrl&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) { 
  &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;reverse&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; {
    &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;);
  }
  &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldlr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iacc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the recursive version, we take the last element from the list instead of the first one. For details on the &lt;code&gt;..^ * - 1&lt;/code&gt; syntax please see &lt;a href=&quot;https://docs.raku.org/language/operators#infix_..%5E&quot;&gt;the Raku documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldr&lt;/span&gt; ( &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, ()) { &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldr&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;..^*-&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, *  ];
    &lt;span class=&quot;n&quot;&gt;foldr&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;), &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; 
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are folds&lt;/h4&gt;

&lt;p&gt;Now, what about &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;? We can of course implement these with &lt;code&gt;for&lt;/code&gt;-loops, but we can also implement them using our &lt;code&gt;foldl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;) {
            (|&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;))
            }, (), &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;,()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the function &lt;code&gt;f&lt;/code&gt; is mappable, it only has a single argument. But &lt;code&gt;foldl&lt;/code&gt; needs a function with two arguments, the first for the accumulator. So we call &lt;code&gt;foldl&lt;/code&gt; with an anonymous function of two arguments. The accumulator itself is an empty list. Although we said earlier that a reduction combines all elements of the original list into a single return value, this return value can of course be any data type, so also a list. So we call &lt;code&gt;f&lt;/code&gt; on every element of the original list and add it to the end of the accumulator list. (The &lt;code&gt;|&lt;/code&gt; flattens the list, so &lt;code&gt;(|acc,f(elt))&lt;/code&gt; is a new list built from the elements of &lt;code&gt;acc&lt;/code&gt; and result of &lt;code&gt;f(elt)&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;In a similar way we can also define &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;( &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;) {
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;)) {
          (|&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;)
      } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
      }
    }, (), &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like in the &lt;code&gt;map&lt;/code&gt; implementation, we call &lt;code&gt;foldl&lt;/code&gt; with an anonymous function. In this function we test if &lt;code&gt;f(elt)&lt;/code&gt; is true for every &lt;code&gt;elt&lt;/code&gt; in &lt;code&gt;lst&lt;/code&gt;. If it is true we create a new list from &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;elt&lt;/code&gt;, otherwise we just return &lt;code&gt;acc&lt;/code&gt;. Because &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; operate on each element of the list separately, we could implement them using the right fold as well. &lt;/p&gt;

&lt;p&gt;With these examples I hope that both the concept of a function working on functions and the possible ways of implementing them has become more clear. The advantage of the recursive implementation is that it allows us to use immutable data structures. &lt;/p&gt;

&lt;h3&gt;Why immutable data structures?&lt;/h3&gt;

&lt;p&gt;You may wonder why I focus on these immutable data structures. As we will have seen, functional programming works really well with immutable data structures. And they have one big advantage: you never have to worry if you have accidentally modified your data, or whether you should make a copy to be sure. So using immutable data structures make code less error-prone and easier to debug. They also have potential performance benefits. And as we&amp;#39;ll see next, in Raku there is yet another advantage.&lt;/p&gt;

&lt;h2&gt;Functions returning functions&lt;/h2&gt;

&lt;p&gt;Functions can also return functions. This is in particular useful if we want to have a parametrisable function. As a trivial example, suppose we want a series of functions that increments a number with a fixed value: &lt;code&gt;add1&lt;/code&gt;, &lt;code&gt;add2&lt;/code&gt; etc. We could of course write each of them separately:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_1&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_2&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_3&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_4&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_5&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;}

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_1&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or we could use a list filled with anonymous functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; =
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;},
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;},
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;},
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;},
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;},
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;};

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;].(&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could do better and use a loop to fill an array with anonymous functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; = [];
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; .. &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;});
}

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;].(&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We create a new anonymous function with every loop iteration, and add it to the array. But instead, we could use a function to create these anonymous functions, and then we could use &lt;code&gt;map&lt;/code&gt; instead of a loop, and use an immutable data structure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_add&lt;/span&gt;(\&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;) {  
  &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {&lt;span class=&quot;o&quot;&gt;x+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;}
}

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;gen_add&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;;

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;].(&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Laziness&lt;/h3&gt;

&lt;p&gt;In Raku, using a range has an additional benefit: we can set the end of the range to infinity, which in Raku can be written as &lt;code&gt;∞&lt;/code&gt; (unicode 221E), &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;Inf&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;gen_add&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; .. ∞;  

&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;].(&lt;span class=&quot;mi&quot;&gt;7124&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says 7368&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an example of what is called &amp;quot;lazy evaluation&amp;quot;, or laziness for short: Raku is not going to try (and fail) to process this infinite list. Instead, it will do the processing when we actually use an element of that list. The evaluation of the expression is delayed until the result is needed, so when we call &lt;code&gt;add[244]&lt;/code&gt;, what happens is that &lt;code&gt;gen_add(244)&lt;/code&gt; is called to generate that function. 
Note that this will not work with the for-loop, because to use the for-loop we need a mutable data structure, and the lazy lists have to be immutable. So this is a nice example of how the functional programming style allows you to benefit from laziness. For the full story of laziness in Raku, please see &lt;a href=&quot;https://docs.raku.org/language/list#index-entry-laziness_in_Iterable_objects&quot;&gt;the documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Python does not have lazy lists but is have a different form of laziness: the call to &lt;code&gt;map&lt;/code&gt; (or &lt;code&gt;filter&lt;/code&gt;) does not return the sequence of results but instead it returns a &lt;em&gt;generator&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Pythom&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map_gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; says &amp;lt;map object at 0x7f344caefdc0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is only when we wrap the generator in a sequence constructor such as &lt;code&gt;tuple()&lt;/code&gt; that the results are actually generated. &lt;/p&gt;

&lt;h2&gt;Function composition&lt;/h2&gt;

&lt;p&gt;We saw above that you can chain calls to &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; together. Often you only need to chain &lt;code&gt;map&lt;/code&gt; calls together, for example&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; }, &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; {&lt;span class=&quot;o&quot;&gt;x*x&lt;/span&gt;}, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that case, we can do this a little bit more efficient: rather than creating a list and then calling map on that list, we can do both computations at once by composing the functions. Raku provides a special operator for this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; } ∘ -&amp;gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; { &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; * &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; }, &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The operator &lt;code&gt;∘&lt;/code&gt; (the &amp;quot;ring operator&amp;quot;, unicode 2218, but you can also use a plain &lt;code&gt;o&lt;/code&gt;) is the function composition operator, and it&amp;#39;s pronounced &amp;quot;after&amp;quot;, so &lt;code&gt;f ∘ g&lt;/code&gt; is &amp;quot;f after g&amp;quot;. What it does is create a new function by combining two existing functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;h&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt; ∘ &lt;span class=&quot;nv&quot;&gt;&amp;amp;g&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is the same as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The advantage of the composition operator is that that it works for any function, including anonymous ones. But in fact, it is just another higher-order functions. It is simply the operator form of the following function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Raku&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;f&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;g&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (\&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt;)) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python does not have a function composition operator, but you can easily have &lt;code&gt;compose&lt;/code&gt; in Python too:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article I have used Raku and Python examples to introduce three key functional programming techniques: functions that operate on functions, functions that return functions and function composition. I have shown how you to use the functions &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;reduce&lt;/em&gt; (&lt;em&gt;fold&lt;/em&gt;) and &lt;em&gt;grep&lt;/em&gt; (&lt;em&gt;filter&lt;/em&gt;) to operate on immutable lists. I have explained how yo(u can implement such functions with and without recursion, and what the advantage is of the recursive implementation. Here is the code from the article, &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.raku&quot;&gt;Raku&lt;/a&gt; and &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.py&quot;&gt;Python&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;There is of course a lot more to functional programming and I have written &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/&quot;&gt;a few articles on more advanced topics&lt;/a&gt;. The concepts introduced in this article should provide a good basis for understanding those more advanced topics. If you want to learn more about functional programming, you might consider &lt;a href=&quot;https://www.futurelearn.com/courses/functional-programming-haskell&quot;&gt;my free online course&lt;/a&gt;.&lt;/p&gt;

&lt;!-- (reduce -&gt;\x,\y {x o y}, -&gt; \x {x+1},-&gt; \x {x*2}, -&gt; \x {2*x-1})(33) --&gt;

&lt;!-- ([∘] fs)(x) --&gt;

&lt;!-- List comprehensions
[ expression for item in list if conditional ] --&gt;

&lt;!-- From my perspective:
∘ Partial application 
∘ Pureness of I/O --&gt;

        </content>
    </entry>
    
    <entry>
        <title>Everything is a function</title>
        <link href="https://wimvanderbauwhede.github.io/articles/everything-is-a-function/"/>
        <updated>2020-07-03T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/everything-is-a-function</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/everything-is-a-function_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;This is an article I wrote several years ago. It is part of the &lt;a href=&quot;https://www.futurelearn.com/courses/functional-programming-haskell&quot;&gt;&amp;quot;Functional Programming in Haskell&amp;quot; online course&lt;/a&gt;. It discusses one of the aspects of functional programming that I like in particular, the fact that the entire language can be build starting from the &lt;a href=&quot;https://www.futurelearn.com/courses/functional-programming-haskell/0/steps/27249&quot;&gt;lambda calculus&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;In a functional language, there are only functions&lt;/h2&gt;

&lt;p&gt;Although it might seem that a language like Haskell has a lot of different objects and constructs, they can all be reduced to functions. We will demonstrate how variables, tuples, lists, conditionals, Booleans and numbers can all be constructed from lambda functions. The article assumes some familiarity with Haskell, but here is a quick introduction.&lt;/p&gt;

&lt;h3&gt;Haskell: a quick introduction&lt;/h3&gt;

&lt;p&gt;Haskell is whitespace-sensitive like Python, but has a markedly different syntax. Because everything is a function, there is no keyword to mark a function; because there is only lexical scope, there is no need for any special scope identifiers. Function arguments are separated by spaces; anonymous functions are called &lt;em&gt;lambda functions&lt;/em&gt; and have a special syntax to identify them: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- named function&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- lambda function bound to a named variable&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;anon_square&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several of the examples use the  &lt;code&gt;let ... in ...&lt;/code&gt;  construct, which behaves as a lexically scoped block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let_square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;x0&lt;/code&gt;, &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are in scope only in the expression after the &lt;code&gt;in&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Haskell is statically typed, and the type of a function or variable is written in a separate annotation, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;isEmpty&lt;/code&gt; function has a type signature, identified by &lt;code&gt;::&lt;/code&gt;, that reads &amp;quot;&lt;code&gt;isEmpty&lt;/code&gt; is a function from a list of anything to a Boolean&amp;quot;. Types must be written with an initial capital. The &lt;code&gt;a&lt;/code&gt; is a &lt;em&gt;type variable&lt;/em&gt; which can take on any type, as explained in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/everything-is-a-function/&quot;&gt;my post on algebraic data types&lt;/a&gt;. Most of the time, you don&amp;#39;t need to write type declarations as Haskell works them out automatically. In the rest of the article, I&amp;#39;m not focusing on the types so I have omitted them.&lt;/p&gt;

&lt;h3&gt;Variables and &lt;code&gt;let&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Haskell uses &lt;code&gt;let&lt;/code&gt; expressions to define variables used in a final expression, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can rewrite this to use only one variable per &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we rewrite any named functions (&lt;code&gt;f&lt;/code&gt;) as lambda functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we rewrite the &lt;code&gt;let&lt;/code&gt; expressions themselves as lambdas, first the inner &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do this by turning the variable in the &lt;code&gt;let&lt;/code&gt; part of the expression (&lt;code&gt;f&lt;/code&gt;) into a parameter of a lambda function (&lt;code&gt;\f -&amp;gt; ...&lt;/code&gt;). The body of the function is the expression after the &lt;code&gt;in&lt;/code&gt; (&lt;code&gt;f n&lt;/code&gt;). Then we apply this lambda function to the expression bound to the variable (&lt;code&gt;\x -&amp;gt; x+1&lt;/code&gt;).   &lt;/p&gt;

&lt;p&gt;Then we rewrite outer &lt;code&gt;let&lt;/code&gt; in the same way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This expression consists only of lambda expressions, which shows that variables and &lt;code&gt;let&lt;/code&gt;-expressions are just syntactic sugar for lambda expressions.    &lt;/p&gt;

&lt;h3&gt;Tuples&lt;/h3&gt;

&lt;p&gt;Haskell has &lt;em&gt;tuples&lt;/em&gt;, also called record types or product types, ordered collections of expressions of potentially different types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tuple notation is syntactic sugar for a function application:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkTup&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tuple construction function can again be defined purely using lambdas:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;mkTup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we do here is to use the elements of the tuple as the arguments of a lambda function. So what &lt;code&gt;mkTup&lt;/code&gt; returns is also a lambda function, in other words &lt;code&gt;mkTup&lt;/code&gt; is a higher-order function. Now we rewrite the &lt;code&gt;mkTup&lt;/code&gt; named function as lambda function as well:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;mkTup&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So our tuples are now also encoded purely as lambda functions.&lt;/p&gt;

&lt;p&gt;The same goes for the tuple accessor functions:          &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s see what happens here: the argument &lt;code&gt;tp&lt;/code&gt; of &lt;code&gt;fst&lt;/code&gt; is a function: &lt;code&gt;\t -&amp;gt; t x&amp;#39; y&amp;#39; z&amp;#39;&lt;/code&gt;. We now apply this function to another function, &lt;code&gt;\x y z -&amp;gt; x&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Applying the function gives:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so the result will of course be &lt;code&gt;x&amp;#39;&lt;/code&gt;, which is indeed the first element of the tuple. &lt;/p&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;p&gt;Lists can be defined in terms of the empty lists &lt;code&gt;[]&lt;/code&gt; and the &lt;code&gt;cons&lt;/code&gt; operation &lt;code&gt;(:)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rewriting this using &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or using &lt;code&gt;cons&lt;/code&gt; explicitly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Defining &lt;code&gt;cons&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We can define &lt;code&gt;cons&lt;/code&gt; using only lambda functions as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;ve used the same approach as for the tuples: &lt;code&gt;cons&lt;/code&gt; returns a lambda function. So we can write a list as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also define &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; using only lambdas, similar to what we did for &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt; above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;The empty list&lt;/h4&gt;

&lt;p&gt;We can define the empty list as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a lambda function which always returns &lt;code&gt;true&lt;/code&gt;, regardless of its argument. The definitions for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are given below under Booleans.  With this definition we can check if a list is empty or not:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s see how this works. A non-empty list is always defined as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which with our definition of &lt;code&gt;(:)&lt;/code&gt; (i.e. &lt;code&gt;cons&lt;/code&gt;) is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And therefore:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so we have a pure-lambda definition of lists, including construction, access and testing for empty. &lt;/p&gt;

&lt;h4&gt;Recursion on lists&lt;/h4&gt;

&lt;p&gt;Now that we can test for the empty list we can define recursions on lists such as &lt;code&gt;foldl&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; etc.:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
          &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; 
            &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The definitions of &lt;code&gt;foldl&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; use an if-then-else expression which is defined below under Conditionals.&lt;/p&gt;

&lt;h4&gt; List concatenation&lt;/h4&gt;

&lt;p&gt;With &lt;code&gt;foldl&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; it is easy to express list concatenation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; The length of a list&lt;/h4&gt;

&lt;p&gt;To compute the length of a list we need integers, they are defined below. We increment the lent counter for every element of the list consumed by the fold.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc_length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;calc_length&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;We have used conditionals in the above expressions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_true_exp&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_false_exp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;cond&lt;/code&gt; is an expression returning either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, these are defined below.&lt;/p&gt;

&lt;p&gt;We can write the if-then-else clause as a pure function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_true_exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_false_exp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Booleans&lt;/h3&gt;

&lt;p&gt;To evaluate the condition we need to define Booleans as lambda functions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Boolean is a function selecting the expression corresponding to true or false. With this definition, the if-then-else becomes simply:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_true_exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_false_exp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_true_exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_false_exp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Basic Boolean operations: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Using &lt;code&gt;ifthenelse&lt;/code&gt; we can define &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifthenelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Boolean equality: &lt;code&gt;xnor&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We note that to test equality of Booleans we can use &lt;code&gt;xnor&lt;/code&gt;, and we can of course define &lt;code&gt;xor&lt;/code&gt; in terms of &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;xnor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Signed Integers&lt;/h3&gt;

&lt;p&gt;The common way to define integers in the lambda calculus is as &lt;a href=&quot;https://en.wikipedia.org/wiki/Church_encoding&quot;&gt;Church numerals&lt;/a&gt;. Here we take a different approach, but it is of course equivalent. We define an integer as a list of Booleans, using &lt;a href=&quot;https://en.wikipedia.org/wiki/Unary_coding&quot;&gt;thermometer code&lt;/a&gt;, and with the following definitions:&lt;/p&gt;

&lt;p&gt;We define unsigned &lt;code&gt;0&lt;/code&gt; as a 1-element list containing &lt;code&gt;false&lt;/code&gt;. To get signed integers we simply define the first bit of the list as the sign bit. We define unsigned and signed versions of &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:[]&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For convenience we define also:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;isPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isNeg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isZero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Integer equality&lt;/h4&gt;

&lt;p&gt;The definition of &lt;code&gt;0&lt;/code&gt; makes the integer equality &lt;code&gt;(==)&lt;/code&gt; easier:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xnor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Negation&lt;/h4&gt;

&lt;p&gt;We can also easily define negation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;neg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Increment and Decrement&lt;/h4&gt;

&lt;p&gt;For convenience we define also define increment and decrement operations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
      &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isZero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
        &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
        &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isZero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
      &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
      &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isNeg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
        &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; 
        &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Addition and Subtraction&lt;/h4&gt;

&lt;p&gt;General addition is quite easy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_if_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_if_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the same way, subtraction is also straightforward:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_if_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sub_if_true&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Multiplication&lt;/h4&gt;

&lt;p&gt;An easy way to define multiplication is by defining the &lt;code&gt;replicate&lt;/code&gt; and &lt;code&gt;sum&lt;/code&gt; operations:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
          &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; 
          &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then multiplication simply becomes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a similar way we can define integer division and modulo.&lt;/p&gt;

&lt;h3&gt;Floats, Characters and Strings&lt;/h3&gt;

&lt;p&gt;We note that floating-point numbers and characters use an integer representation, and strings are simply lists of characters. So we don&amp;#39;t need to do any additional work to represent them, and the operations on them are analogous to the ones defined above. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this way, we have defined a language with variables, (higher-order) functions, conditionals and recursion. We can manipulate lists and tuples of integers, floats, chars and strings. And yet it consists of nothing more than lambda functions!&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>List-based parser combinators in Haskell and Raku</title>
        <link href="https://wimvanderbauwhede.github.io/articles/list-based-parser-combinators/"/>
        <updated>2020-06-22T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/list-based-parser-combinators</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/list-based-parser-combinators_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;This is a follow-on from my article &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;introducing algebraic data types and explaining how to implement them in Raku&lt;/a&gt;. 
If you are not familiar with algebraic data types, I suggest you read that article first. In this article I use algebraic data types to create a statically typed version of a list-based parser combinators library which I originally created for dynamic languages. The article introduces list-based parser combinators are and how to implement them in Raku and Haskell using algebraic data types.&lt;/p&gt;

&lt;h2&gt;Perl, Haskell and Raku: a quick introduction&lt;/h2&gt;

&lt;p&gt;The code examples in this article are written in &lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; and &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt;. If you are familiar with these languages, you can skip this section. The code is written in a functional style and is not very idiomatic so you should be able to understand it easily if you know another programming language.&lt;/p&gt;

&lt;p&gt;Perl and Raku are syntactically similar to C/C++, Java and JavaScript: block-based, with statements separated by semicolons, blocks demarcated by braces, and argument lists in parentheses and separated by commas. The main feature that sets Perl and Raku apart is the use of sigils (&amp;#39;funny characters&amp;#39;) which identify the type of a variable: &lt;code&gt;$&lt;/code&gt; for a scalar, &lt;code&gt;@&lt;/code&gt; for an array, &lt;code&gt;%&lt;/code&gt; for a hash (map) and &lt;code&gt;&amp;amp;&lt;/code&gt; for a subroutine. Variables also have keywords to identify their scope, I will only use &lt;code&gt;my&lt;/code&gt; which marks the variable as lexically scoped. A subroutine is declared with the &lt;code&gt;sub&lt;/code&gt; keyword, and subroutines can be named or anonymous:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;span class=&quot;c1&quot;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$anon_square&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haskell is whitespace-sensitive like Python, but has a markedly different syntax. Because everything is a function, there is no keyword to mark a function; because there is only lexical scope, there is no need for any special scope identifiers. Function arguments are separated by spaces; anonymous functions have a special syntax to identify them: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- named function&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- lambda function bound to a named variable&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;anon_square&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several of the examples use the  &lt;code&gt;let ... in ...&lt;/code&gt;  construct, which behaves as a lexically scoped block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let_square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;x0&lt;/code&gt;, &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are in scope only in the expression after the &lt;code&gt;in&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Haskell is statically typed, and the type of a function or variable is written in a separate annotation, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;isEmpty&lt;/code&gt; function has a type signature, identified by &lt;code&gt;::&lt;/code&gt;, that reads &amp;quot;&lt;code&gt;isEmpty&lt;/code&gt; is a function from a list of anything to a Boolean&amp;quot;. Types must be written with an initial capital. The &lt;code&gt;a&lt;/code&gt; is a &lt;em&gt;type variable&lt;/em&gt; which can take on any type, as explained in &lt;a href=&quot;https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/&quot;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Raku has optional typing: you can add type information as part of the declarations, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isOfSz&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@lst&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sz&lt;/span&gt; --&amp;gt; &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;@lst&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt; == &lt;span class=&quot;nv&quot;&gt;$sz&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function takes array of any type and an integer and returns a Boolean. &lt;/p&gt;

&lt;p&gt;Other specific bits of syntax or functionality will be explained for the particular examples. &lt;/p&gt;

&lt;h2&gt;Parsers and parser combinators&lt;/h2&gt;

&lt;p&gt;What I call a parser here is technically a combination of a lexer or tokeniser and a parser. The lexical analysis (splitting a sequence of characters into a sequence of tokens, strings with an identified meaning) meaning and parsing (syntactic analysis, analysing the sequence of tokens in terms of a formal grammar) are not separate stages.&lt;/p&gt;

&lt;p&gt;Parser combinators are building blocks to create parsers by combining small parsers into very complex ones. In Haskell they became popular because of the &lt;a href=&quot;http://book.realworldhaskell.org/read/using-parsec.html&quot;&gt;Parsec&lt;/a&gt; library. This library provides &lt;a href=&quot;http://jakewheat.github.io/intro_to_parsing/&quot;&gt;monadic parser combinators&lt;/a&gt;. My parser combinator library implements a subset of Parsec&amp;#39;s functionality. I am not going to explain what monads are because the point of creating list-based parser combinators is precisely that they do not require monads. There is a connection however, and you can read about it in &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/2617548.2617551&quot;&gt;my paper&lt;/a&gt; if you&amp;#39;re interested. &lt;/p&gt;

&lt;p&gt;I created the original version of the list-based parser combinators library for dynamically typed languages: there are versions in &lt;a href=&quot;https://metacpan.org/pod/Parser::Combinators&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://gitlab.com/wim_v12e/parser-combinators-py&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://github.com/wimvanderbauwhede/parser-combinators-ls&quot;&gt;LiveScript&lt;/a&gt;, &lt;a href=&quot;http://livescript.net/&quot;&gt;a Haskell-like language which compiles to JavaScript&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Because I like Raku and it has gradual typing, I was interested in what &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/ListBasedCombinators.pm6&quot;&gt;a statically typed Raku version&lt;/a&gt; would look like. As a little detour I first implemented them in Haskell, just for fun really. &lt;/p&gt;

&lt;p&gt;Raku has &lt;a href=&quot;https://docs.raku.org/language/grammars&quot;&gt;Grammars&lt;/a&gt;, which also let you build powerful parsers. If you are familiar with them it will be interesting to compare the parser combinator approach to the inheritance mechanism used to compose Grammars.&lt;/p&gt;

&lt;h2&gt;List-based parser combinators&lt;/h2&gt;

&lt;p&gt;So what are list-based parser combinators? Let&amp;#39;s say I want to parse a string containing this very simple bit of code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assignStr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;   answer = 42&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have an identifier, an assignment operator and a natural number, maybe preceded by whitespace, and with some whitespace that doesn&amp;#39;t matter between these tokens. I am assuming that the string which we want to parse is code written in a language which is whitespace-insensitive. 
What I would like is that I can write a parser for as close as possible to the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assignParser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And when I apply &lt;code&gt;assignParser&lt;/code&gt; to &lt;code&gt;assignStr&lt;/code&gt;, it should return the parsed tokens, a status, and the remainder of the string, if any. So each parser takes a string and returns this triplet of values (I&amp;#39;ll call it a tuple instead of a triplet). We&amp;#39;ll define this more formally in the next sections.&lt;/p&gt;

&lt;p&gt;What we have here is that the list acts as the sequencing combinator for the specific parsers. The &lt;code&gt;maybe&lt;/code&gt; is a combinator to make the token optional. We can provide more combinators, such as &lt;code&gt;choice&lt;/code&gt;, (to try several parsers), &lt;code&gt;many&lt;/code&gt; (to repeatedly apply a parser), etc. And because every parser is a function, complex parsers can easily be composed of smaller parsers expressed in terms of the building blocks. For example, if we had many assignments, we could have something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assignsParser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignParser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now suppose that we want to extend our parser to include declarations, something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;    int answer&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which we parse as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;declParser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then we need to add get the following parser:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;statementsParser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is also essential that we can label tokens or groups of tokens, so that we can easily extract the relevant information from a parse tree, as the intermediate step in transforming the parse tree into an abstract syntax tree. In the above example, we are only interested in the variable name and the value. The whitespace and equal sign are not important. So we could label the relevant tokens, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;whiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;var&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;val&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Implementation in a dynamically typed language&lt;/h2&gt;

&lt;p&gt;How do we implement the above mechanism in a dynamically typed language? A parser like &lt;code&gt;identifier&lt;/code&gt; is simply a function which takes a string and returns a tuple. In Perl, the code looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $str ) {&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^([a-z_]\w*)/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/^$matches\s*//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(In Perl, &lt;code&gt;=~ /.../&lt;/code&gt; is the regular expression matching syntax, and &lt;code&gt;s/.../.../&lt;/code&gt; is regular expression substitution.)&lt;/p&gt;

&lt;p&gt;But what about a parser like &lt;code&gt;symbol&lt;/code&gt;? It takes the string representing the symbol as an argument, so in the example, &lt;code&gt;symbol( &amp;quot;=&amp;quot; )&lt;/code&gt; should be the actual parser. What we need is that a call to &lt;code&gt;symbol&lt;/code&gt; will return a function to do the parsing, like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $lit_str ) {&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $str ) {&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^\s*$lit_str\s*/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lit_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/^\s*$lit_str\s*//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;undef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is of course not limited to string arguments, any argument of the outer function can be used inside the inner function. In particular, if a parser combinator takes parsers as arguments, like &lt;code&gt;choice&lt;/code&gt; and &lt;code&gt;maybe&lt;/code&gt;, then these parsers can be passed on to the inner function. &lt;/p&gt;

&lt;p&gt;This is fine as far as it goes, but what about the labelled parsers? and what about the lists of parsers? Neither of these can be directly applied to a string, but neither is a function that can generate a function either. So to apply them to a string, we will need to get the parsers out of label-parser pair and the list. We do that using a helper function which I call &lt;code&gt;apply&lt;/code&gt;, and which in Perl looks like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $p, $str ) {&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;CODE&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ARRAY&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;HASH&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The syntax &lt;code&gt;$p-&amp;gt;($str)&lt;/code&gt; applies the anonymous function referenced by &lt;code&gt;$p&lt;/code&gt; to its arguments.)&lt;/p&gt;

&lt;p&gt;This function checks the type of &lt;code&gt;$p&lt;/code&gt; using the &lt;code&gt;ref&lt;/code&gt; built-in: it can either be code (i.e. a subroutine), an array or a hash. If it&amp;#39;s subroutine it&amp;#39;s applied directly to the string, otherwise it calls &lt;code&gt;sequence&lt;/code&gt; or &lt;code&gt;retag&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $plst ) {&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;( $str ) {&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$st1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$st2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$st2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$st1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$plst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;foldl&lt;/code&gt; function is my Perl version of the left-to-right reduction in Haskell or &lt;code&gt;reduce&lt;/code&gt; in Raku.&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;retag&lt;/code&gt; does is taking the parser from the label pair (which is a single-element hash), apply it to the string, and label the resulting matches with the label of the parser:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;($p, $str) {&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The syntax &lt;code&gt;%{$p}&lt;/code&gt; is dereferencing, a bit like the &lt;code&gt;*&lt;/code&gt; prefix in C.)&lt;/p&gt;

&lt;p&gt;Here is a simple example of how to use the list-based parser combinators. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;    Hello, brave new world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;whiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adjectives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Noun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str_parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Implementation in a language with algebraic data types&lt;/h2&gt;

&lt;p&gt;All of the above is fine in a dynamically typed language, but in a statically typed language, the list can&amp;#39;t contain a function and a hash and another list, as they all have different types. Also, only testing if an entry of the list is code, hash or list is rather weak, as it does not guarantee that the code is an actual parser. So let&amp;#39;s see what it looks like in Haskell and Raku.
list-based parser combinators 
In Haskell, we start (of course) by defining a few types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- The list-based combinator&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- The match, i.e. the bit of the string the parser matches&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TaggedMatches&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefinedMatch&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- The tuple returned by the parser  &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- some aliases&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(In Haskell, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;newtype&lt;/code&gt; define a new algebraic datatype; &lt;code&gt;type&lt;/code&gt; defines an alias for an existing type.)&lt;/p&gt;

&lt;p&gt;So our list of parsers will be a list of &lt;code&gt;LComb&lt;/code&gt;, and this can be a parser, sequence of parsers or tagged pair. Because the tag eventually is used to label the matched string, the &lt;code&gt;Match&lt;/code&gt; type also has a tagged variant. In principle, the return type of the parser could just be a tuple, but I define the &lt;code&gt;MTup&lt;/code&gt; polymorphic type so I can make it an instance of a type class later on, e.g. to make it a monad.&lt;/p&gt;

&lt;p&gt;With these types we can define our parser combinators and the &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;sequence&lt;/code&gt; functions. Here is the &lt;code&gt;symbol&lt;/code&gt; parser. Many of the parsers in the library are implemented using &lt;a href=&quot;http://pcre.org/&quot;&gt;Perl-Compatible Regular Expressions&lt;/a&gt; (&lt;a href=&quot;https://hackage.haskell.org/package/regex-pcre&quot;&gt;&lt;code&gt;Text.Regex.PCRE&lt;/code&gt;&lt;/a&gt;), because what else can you expect of a &lt;a href=&quot;https://andrewshitov.com/2015/05/05/interview-with-audrey-tang/&quot;&gt;lamdacamel&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lit_str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s*&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lit_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lit_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UndefinedMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The &lt;code&gt;$&lt;/code&gt; behaves like an opening parenthesis that does not need a closing parenthesis; &lt;code&gt;++&lt;/code&gt; is the list concatenation operator, in Haskell strings are lists of characters.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;apply&lt;/code&gt; function pattern matches against the type alternatives for &lt;code&gt;LComb&lt;/code&gt;. Because of the pattern matching there is not need for an &lt;code&gt;untag&lt;/code&gt; function. It is clear from this implementation that we can write a sequence of parsers both as &lt;code&gt;Seq [...]&lt;/code&gt; or &lt;code&gt;sequence [...]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;p&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TaggedMatches&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
            &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apart from the static typing, the &lt;code&gt;sequence&lt;/code&gt; function is very close to the Perl version. That is of course because I wrote the Perl code in a functional style. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LComb&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pseq&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;
                    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
                            &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
                                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
                                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pseq&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Raku, I use roles as algebraic datatypes as explained in &lt;a href=&quot;&quot;&gt;my previous post&lt;/a&gt;. Essentially, each alternative of a sum types mixes in an empty role which is only used to name the type; product types are just roles with some attributes that are declared in the role&amp;#39;s parameter list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# The list-based combinator type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Seq&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@combs&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.combs&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@combs&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comb&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$comb&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.comb&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$comb&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$comb&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.tag&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.comb&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$comb&lt;/span&gt;; 
} 

&lt;span class=&quot;c1&quot;&gt;# The matches&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.match&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;;
} 
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaggedMatch&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.tag&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.matches&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;;
} 
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UndefinedMatch&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {}

&lt;span class=&quot;c1&quot;&gt;# The tuple returned by the parser&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$st&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rest&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.status&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$st&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.rest&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$rest&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.matches&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The way the Raku regular expressions are used in this implementation of &lt;code&gt;symbol&lt;/code&gt; is closer to the Haskell version than the Perl 5 version. But the main difference with the Perl 5 version is that the combinator and the return tuple are statically typed. The function &lt;code&gt;undef-match&lt;/code&gt; is a convenience to return an array with an undefined match. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lit_str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lit_str_&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$lit_str&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;Comb&lt;/span&gt;[ &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (
                &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; ~~ &lt;span class=&quot;sr&quot;&gt;m/^\s*$lit_str_\s* $&amp;lt;r&amp;gt; = [.*]/&lt;/span&gt; 
          ) {
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;=&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt;](&lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$lit_str_&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;);
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str_&lt;/span&gt; = ~&lt;span class=&quot;nv&quot;&gt;$&amp;lt;r&amp;gt;&lt;/span&gt;; 
            &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str_&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
        } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
            &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;undef-match&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;; 
        }
    }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As explained in &lt;a href=&quot;&quot;&gt;my previous post&lt;/a&gt;, we use Raku&amp;#39;s &lt;code&gt;multi sub&lt;/code&gt;s for pattern matching on the types. In Haskell this is also possible, and the definition of &lt;code&gt;apply&lt;/code&gt; can be rewritten as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Comb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TaggedMatches&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
            &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Raku version of &lt;code&gt;apply&lt;/code&gt; is quite close to this Haskell version. For convenience, I use a function &lt;code&gt;unmtup&lt;/code&gt; to unpack the &lt;code&gt;MTup&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Comb&lt;/span&gt;[ &lt;span class=&quot;nb&quot;&gt;Sub&lt;/span&gt; ] &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
    (&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;comb&lt;/span&gt;)(&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;);
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Seq&lt;/span&gt;[ &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt; ] &lt;span class=&quot;nv&quot;&gt;$ps&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;( &lt;span class=&quot;nv&quot;&gt;$ps&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;combs&lt;/span&gt;), &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;);
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;[ &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; ] &lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;comb&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;);
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;,  &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@mms&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;unmtup&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;);
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@matches&lt;/span&gt; = ( &lt;span class=&quot;n&quot;&gt;TaggedMatch&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@mms&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; );
    &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;@matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the &lt;code&gt;sequence&lt;/code&gt; code in Raku. It follows closely the structure of the Perl 5 and Haskell versions. Raku&amp;#39;s &lt;code&gt;reduce&lt;/code&gt; is equivalent to Haskell&amp;#39;s &lt;code&gt;foldl&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@combs&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;Comb&lt;/span&gt;[
        &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; ( &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt; --&amp;gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;) {
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$st1&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$ms1&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;unmtup&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;);
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;);
                &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$st2&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$ms2&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;unmtup&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;);
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$st2&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$st1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) {
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$str1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;empty-match&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
                } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$str2&lt;/span&gt;,  
                        &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(|&lt;span class=&quot;nv&quot;&gt;$ms1&lt;/span&gt;,|&lt;span class=&quot;nv&quot;&gt;$ms2&lt;/span&gt;) ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
                }
            }
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt; = 
                &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;empty-match&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,|&lt;span class=&quot;nv&quot;&gt;@combs&lt;/span&gt;;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$rest&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;unmtup&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;);
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt; == &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;) {
                &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$rest&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;empty-match&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
            } &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;n&quot;&gt;MTup&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$rest&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
            }
        }
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is still a minor issue with this definition of &lt;code&gt;sequence&lt;/code&gt;: Because of the signature, we can&amp;#39;t write &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;, ...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, we would have to write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;, ...))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is a bit tedious. So I rename &lt;code&gt;sequence&lt;/code&gt; to &lt;code&gt;sequence_&lt;/code&gt; and wrap it in a new function &lt;code&gt;sequence&lt;/code&gt; which has a &amp;#39;slurpy&amp;#39; argument (i.e. it is variadic) like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; (*&lt;span class=&quot;nv&quot;&gt;@ps&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;sequence_&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;](&lt;span class=&quot;nv&quot;&gt;@ps&lt;/span&gt;) ); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I do the same for all combinators that take a list of combinators as argument. If you wanted to type check the arguments of the wrapper function, you could do this with a &lt;code&gt;where&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; (*&lt;span class=&quot;nv&quot;&gt;@ps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; { .&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt; ~~ &lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;} ) &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;choice_&lt;/span&gt;( &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;LComb&lt;/span&gt;](&lt;span class=&quot;nv&quot;&gt;@ps&lt;/span&gt;));
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type constructor based tagging (&lt;code&gt;Tag label parser&lt;/code&gt;) is nice in Haskell but in Raku it would look like &lt;code&gt;Tag[label, parser].new&lt;/code&gt; which I don&amp;#39;t like. Therefore, I wrap the constructor in a &lt;code&gt;tag&lt;/code&gt; function so I can write &lt;code&gt;tag(label, parser)&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;An example of typical usage&lt;/h2&gt;

&lt;p&gt;As an example, we can construct the following parser for a part of a Fortran 90-style variable declaration, apply it to the given string and get the parse tree:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;type_parser&lt;/span&gt; =     
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;Type&amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;),
        &lt;span class=&quot;k&quot;&gt;maybe&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;parens&lt;/span&gt;( 
            &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;( 
                &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;Kind&amp;quot;&lt;/span&gt; ,&lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;),
                &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;(
                    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;),
                    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;),
                    &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;( &lt;span class=&quot;s&quot;&gt;&amp;quot;Kind&amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;)
                )
            )
        ))
      ); 

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;type_str&lt;/span&gt; = &lt;span class=&quot;s&quot;&gt;&amp;quot;integer(kind=8), &amp;quot;&lt;/span&gt;;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; (\&lt;span class=&quot;n&quot;&gt;tpst&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;tpstr&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;tpms&lt;/span&gt;) = &lt;span class=&quot;n&quot;&gt;unmtup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;( &lt;span class=&quot;n&quot;&gt;type_parser&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;type_str&lt;/span&gt;);   
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getParseTree&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;tpms&lt;/span&gt;); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(In Raku, variables declared with a &lt;code&gt;\&lt;/code&gt; are sigil-less )&lt;/p&gt;

&lt;p&gt;For reference, here is the Haskell code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type_parser&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Type&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kind&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kind&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;natural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;type_str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;integer(kind=8), &amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;MTup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tpms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_str&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getParseTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tpms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(If you wonder about the strange signature of &lt;code&gt;main&lt;/code&gt;, the &lt;code&gt;do&lt;/code&gt; keyword or the &lt;code&gt;let&lt;/code&gt; without an &lt;code&gt;in&lt;/code&gt;, the answers are &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;here&lt;/a&gt;. Or you could take &lt;a href=&quot;https://www.futurelearn.com/courses/functional-programming-haskell&quot;&gt;my free online course&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;As is clear from this example, in both languages, list-based parser combinators provide a clean and highly composable way of constructing powerful and complex parsers. It is also quite easy to extend the library with additional parsers. I think this is a nice practical application of algebraic data types in particular and functional programming in general. You can find both the &lt;a href=&quot;https://github.com/wimvanderbauwhede/list-based-combinators-hs&quot;&gt;Haskell code&lt;/a&gt; and the &lt;a href=&quot;https://github.com/wimvanderbauwhede/list-based-combinators-raku&quot;&gt;Raku code&lt;/a&gt; in my repo. &lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Roles as Algebraic Data Types in Raku</title>
        <link href="https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku/"/>
        <updated>2020-06-05T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/roles-as-adts-in-raku</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/roles-as-adts-in-raku_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;I have been a &lt;a href=&quot;https://andrewshitov.com/2015/05/05/interview-with-audrey-tang/&quot;&gt;lambdacamel&lt;/a&gt;, one of those who like &lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt; and functional programming, especially in &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, for a long time. I still write most of my code in either of these languages.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve also been a fan of &lt;a href=&quot;https://raku.org/&quot;&gt;Raku&lt;/a&gt; from long before it was called Raku, but I&amp;#39;d never used it much in real life. Recently though, I&amp;#39;ve been moving increasingly to Raku for code that I don&amp;#39;t have to share with other people. It&amp;#39;s a lovely language, and its functional heritage is very strong. It was therefore only natural to me to explore the limits of Raku&amp;#39;s type system. &lt;/p&gt;

&lt;h2&gt;Is this article for you?&lt;/h2&gt;

&lt;p&gt;In this article I will introduce &lt;a href=&quot;https://www.cs.kent.ac.uk/people/staff/dat/miranda/nancypaper.pdf&quot;&gt;algebraic data types&lt;/a&gt;, a kind of static type system used in functional languages like Haskell, and a powerful mechanism for creating complex data structures. I will show a way to implement them in Raku using &lt;em&gt;roles&lt;/em&gt;. You don&amp;#39;t need to know Haskell at all and I only assume a slight familiarity with Raku (I&amp;#39;ve added &lt;a href=&quot;#raku-intro&quot;&gt;a quick introduction&lt;/a&gt;), but I do assume you are familiar with basic programming. You may find this article interesting if you are curious about functional-style static typing or if your would like an alternative to object-oriented programming. &lt;/p&gt;

&lt;h2&gt;Algebraic Data Types&lt;/h2&gt;

&lt;p&gt;Datatypes (types for short) are just labels or containers for values in a program. Algebraic data types are composite types, they are formed by combining other types.
They are called algebraic because they consist of alternatives (sums, also called disjoint unions) and record (products) of types. For more details see &lt;a href=&quot;https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types&quot;&gt;[1]&lt;/a&gt; or &lt;a href=&quot;https://gist.github.com/gregberns/5e9da0c95a9a8d2b6338afe69310b945&quot;&gt;[2]&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To give a rough intuition for the terms &amp;quot;sum type&amp;quot; and &amp;quot;product type&amp;quot;: in Raku,  with Booleans &lt;code&gt;$a&lt;/code&gt;, &lt;code&gt;$b&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt;, you can write &lt;code&gt;$a or $b or $c&lt;/code&gt; but you could also write &lt;code&gt;$a + $b + $c&lt;/code&gt; and evaluate it as &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Similarly, &lt;code&gt;$a and $b and $c&lt;/code&gt; can be written as &lt;code&gt;$a * $b * $c&lt;/code&gt;. In other words, &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; behave in the same way as &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;. In a generalised way, the types in algebraic data type system can be composed using similar rules.&lt;/p&gt;

&lt;h3&gt;A few examples.&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s first give a few examples of algebraic data types. In this section I am not using a specific programming language syntax. Instead I use a minimal notation to illustrate the concepts. I use the &lt;code&gt;datatype&lt;/code&gt; keyword to indicate that what follows is a declaration for an algebraic data type; for a sum type, I&amp;#39;ll separate the alternatives with &amp;#39;|&amp;#39;; for a product type, I separate the components with a space. To declare a variable to be of some type, I will write the type name in front of it.&lt;/p&gt;

&lt;p&gt;We can define a Boolean value purely as a type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use this as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that &lt;code&gt;ok&lt;/code&gt; is a variable of type &lt;code&gt;Bool&lt;/code&gt; with a value of &lt;code&gt;True&lt;/code&gt;. In an algebraic data type, the labels are called &amp;#39;constructors&amp;#39;. So &lt;code&gt;True&lt;/code&gt; is a constructor that takes no arguments.&lt;/p&gt;

&lt;p&gt;For a product type, we could for example create a type for an RGB colour triplet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGBColour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;RGB&lt;/code&gt; label on the right-hand side is the constructor of the type. It takes three arguments of type &lt;code&gt;Int&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;RGBColour&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aquamarine&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;212&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So &lt;code&gt;aquamarine&lt;/code&gt; is a variable of type &lt;code&gt;RGBColour&lt;/code&gt; with a value of &lt;code&gt;RGB 127 255 212&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The constructor identifies the type. Suppose we also have an HSL colour type&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HSLColour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HSL&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a variable &lt;code&gt;chocolate&lt;/code&gt; of that type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;HSLColour&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chocolate&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HSL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then both &lt;code&gt;RGB&lt;/code&gt; and &lt;code&gt;HSL&lt;/code&gt; are triplets of &lt;code&gt;Int&lt;/code&gt; but because of the different type constructors they are not the same type. &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we create an RGB Pixel type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XYCoord&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XY&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGBPixel&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGBColour&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XYCoord&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;RGBPixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aquamarine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;XY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is fine but&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;RGBPixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chocolate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;XY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will be a type error because &lt;code&gt;chocolate&lt;/code&gt; is of type &lt;code&gt;HSLColour&lt;/code&gt;, not &lt;code&gt;RGBColour&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We could support both RGB and HSL using a sum type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HSL&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HSLColour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGBColour&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and change make a Pixel type definition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XYCoord&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can say &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_rgb&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aquamarine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;XY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_hsl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pixel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chocolate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;XY&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Integers and strings, recursion and polymorphism&lt;/h3&gt;

&lt;p&gt;I can hear you say: but what about &lt;code&gt;Int&lt;/code&gt;, it doesn&amp;#39;t have constructors? And what about a string, how can that be an algebraic data type? These are interesting questions as they allow me to introduce two more concepts: &lt;em&gt;recursive&lt;/em&gt; and &lt;em&gt;polymorphic&lt;/em&gt; types.&lt;/p&gt;

&lt;h4&gt;The type of an integer and recursive types&lt;/h4&gt;

&lt;p&gt;From a type perspective, you can look at an integer in two ways: if it is a fixed-size integer then the &lt;code&gt;Int&lt;/code&gt; type can be seen as a sum type. For example, the type for an 8-bit unsigned integer could be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, every number is actually the name of a type constructor, as a generalisation of the &lt;code&gt;Bool&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;However, in the mathematical sense, integers are not finite. If we consider the case of the natural numbers, we can construct a type for them as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Z&lt;/code&gt; stands for &amp;quot;zero&amp;quot;, the &lt;code&gt;S&lt;/code&gt; for &amp;quot;successor of&amp;quot;. This is a &lt;em&gt;recursive&lt;/em&gt; type, because the &lt;code&gt;S&lt;/code&gt; constructor takes a &lt;code&gt;Nat&lt;/code&gt; as argument. With this type, we can now create any natural number:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way of constructing the natural numbers is called &lt;a href=&quot;https://www.britannica.com/science/Peano-axioms&quot;&gt;Peano numbers&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The type of a string and polymorphic types&lt;/h4&gt;

&lt;p&gt;Now, what about strings? Enumerating all possible strings of any length is not practical. But from a type perspective, a string is a list of characters. So the question is then: what is the type of a list? For one thing, a list must be able to contain values of any type. (In the context of algebraic datatypes, all values must be the same, so our list is more like a typed array in Raku.) But that means we need types that can be parameterised by other types. This is called &lt;em&gt;parametric polymorphism&lt;/em&gt;. So a list type must look something like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;a&lt;/code&gt; is a type variable, i.e. it can be replaced by an arbitrary type. For example, assuming we define the &lt;code&gt;Char&lt;/code&gt; type simply by enumerating all characters in the alphabet (because of course, at machine level, every character is represented by an integer number):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we can type our string as: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what about &lt;code&gt;List&lt;/code&gt;? We use a similar approach as for &lt;code&gt;Nat&lt;/code&gt; above, using a recursive sum type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmptyList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create a list of any length:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
         &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;h&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;kt&quot;&gt;EmptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the typical syntactic sugar for lists, we can write this as     &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I now invent an alias &lt;code&gt;Str&lt;/code&gt; for &lt;code&gt;List Char&lt;/code&gt;, and use double quotes instead of list notation, I can write    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So integers and strings can be expressed as algebraic data types, and now we have introduced recursive and parameterised types.&lt;/p&gt;

&lt;h3&gt;What are algebraic data types good for?&lt;/h3&gt;

&lt;p&gt;These may seem like rather contrived examples, after all a language like Raku already has an &lt;code&gt;Int&lt;/code&gt; and a &lt;code&gt;Str&lt;/code&gt; type that work very well. So what is the use of these  algebraic data types? Of course the purpose of static types is to provide type safety and make debugging easier. But using algebraic data types also makes a different, more functional style of programming possible.&lt;/p&gt;

&lt;p&gt;One common use case is a list where you want to store values of different types: you can create a sum type that has an alternative for each of these types. Another common case is a recursive type, such as a tree. Finally, the polymorphism provides a convenient way to create custom containers. I will give examples of each of these in the next section. Time to move on to Raku!&lt;/p&gt;

&lt;h2&gt;Algebraic data types in Raku&lt;/h2&gt;

&lt;p&gt;As Raku is not a very well-known language (yet), here is a quick introduction of the features you&amp;#39;ll need to follow the discussion below. &lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;raku-intro&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A quick introduction to Raku&lt;/h3&gt;

&lt;p&gt;Before Raku went its own way, it was meant to be the next iteration of Perl (hence the original name Perl 6). It is therefore more similar to Perl than to any other language.&lt;/p&gt;

&lt;p&gt;Raku is syntactically similar to C/C++, Java and JavaScript: block-based, with statements separated by semicolons, blocks demarcated by braces, and argument lists in parentheses and separated by commas. The main feature it shares with Perl is the use of sigils (&amp;#39;funny characters&amp;#39;) which identify the type of a variable: &lt;code&gt;$&lt;/code&gt; for a scalar, &lt;code&gt;@&lt;/code&gt; for an array, &lt;code&gt;%&lt;/code&gt; for a hash (map) and &lt;code&gt;&amp;amp;&lt;/code&gt; for a subroutine. Variables also have keywords to identify their scope, I will only use &lt;code&gt;my&lt;/code&gt; which marks the variable as lexically scoped. A subroutine is declared with the &lt;code&gt;sub&lt;/code&gt; keyword, and subroutines can be named or anonymous:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;span class=&quot;c1&quot;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$anon_square&lt;/span&gt; = &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; (&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;) {
    &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;*&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Raku also has &lt;a href=&quot;https://docs.raku.org/language/variables#index-entry-Twigil&quot;&gt;twigils&lt;/a&gt;, secondary sigils that influence the scoping of a variable. For this article, the only twigil used in the code is &lt;code&gt;.&lt;/code&gt; which is used to declare a role or class attribute with automatically generated accessors (like &lt;code&gt;$.notes&lt;/code&gt; in the example below).&lt;/p&gt;

&lt;p&gt;Raku supports sigil-less variables, and uses the &lt;code&gt;\&lt;/code&gt; syntax to declare them. For more on the difference between ordinary and sigil-less variables, see &lt;a href=&quot;https://docs.raku.org/language/variables#Sigilless_variables&quot;&gt;the Raku documentation&lt;/a&gt;. For example (&lt;code&gt;say&lt;/code&gt; prints its argument followed by a newline):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt; = &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;;
&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;x&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Raku has &lt;a href=&quot;https://raku.guide/&quot;&gt;gradual typing&lt;/a&gt;: it allows both static and dynamic typing. That&amp;#39;s a good start because we need static typing to support algebraic data types. It also has &lt;a href=&quot;https://docs.raku.org/language/variables&quot;&gt;immutable variables&lt;/a&gt; and &lt;a href=&quot;https://raku.guide/#_anonymous_functions&quot;&gt;anonymous functions&lt;/a&gt;, and even &lt;a href=&quot;https://docs.raku.org/language/list#index-entry-laziness_in_Iterable_objects&quot;&gt;(limited) laziness&lt;/a&gt;. And of course &lt;a href=&quot;https://raku.guide/#_functional_programming&quot;&gt;functions are first-class citizens&lt;/a&gt;, so we have everything we need for pure, statically-typed functional programming. But what about the algebraic data types?&lt;/p&gt;

&lt;p&gt;In Raku, &lt;code&gt;enum&lt;/code&gt;s are sum types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;False True&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, they are limited to type constructors that don&amp;#39;t take any arguments. &lt;/p&gt;

&lt;p&gt;Classes can be seen as product types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoolAndInt&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.bool&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.int&lt;/span&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, classes do not support parametric polymorphism. &lt;/p&gt;

&lt;p&gt;This is where &lt;em&gt;roles&lt;/em&gt; come in. According to the &lt;a href=&quot;https://docs.raku.org/language/objects#Roles&quot;&gt;Raku documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
Roles are a collection of attributes and methods; however, unlike classes, roles are meant for describing only parts of an object's behavior; this is why, in general, roles are intended to be mixed in classes and objects. In general, classes are meant for managing objects and roles are meant for managing behavior and code reuse within objects.
&lt;/blockquote&gt;

&lt;p&gt;Roles use the keyword &lt;code&gt;role&lt;/code&gt; preceding the name of the role that is declared. Roles are mixed in using the &lt;code&gt;does&lt;/code&gt; keyword preceding the name of the role that is mixed in.  Roles are what in Python and Ruby is called &lt;em&gt;mixins&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So roles are basically classes that you can use to add behaviours to other classes without using inheritance. Here is a stripped-down example take from the &lt;a href=&quot;https://docs.raku.org/language/objects#Roles&quot;&gt;Raku documentation&lt;/a&gt; (&lt;code&gt;has&lt;/code&gt; declares an attribute, &lt;code&gt;method&lt;/code&gt; a method)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notable&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.notes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rw&lt;/span&gt;;

    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;() { ... }; 
}

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Journey&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Notable&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.origin&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.destination&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.travelers&lt;/span&gt;;

    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; { ... &lt;span class=&quot;s&quot;&gt;&amp;lt;implemented using notes()&amp;gt;&lt;/span&gt; ... };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In particular, roles can be mixed into other roles, and that is one of the key features I will exploit. Furthermore, role constructors can take arguments &lt;em&gt;and&lt;/em&gt; they are parametric. So we have everything we need to create proper algebraic data types. Let&amp;#39;s look at a few examples.&lt;/p&gt;

&lt;h3&gt;A few simple examples&lt;/h3&gt;

&lt;h4&gt;An opinionated Boolean&lt;/h4&gt;

&lt;p&gt;This is the example of a sum type for a Boolean as above, but implemented with roles. The first line declares the type as an empty role, this corresponds to the data type name on the left-hand side. The next lines define the alternatives, each alternative uses &lt;code&gt;does OpinionatedBool&lt;/code&gt; to tie it to the &lt;code&gt;OpinionatedBool&lt;/code&gt; role which functions purely as the type name.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbsolutelyTrue&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotallyFalse&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Raku, types are values; and for a role with an empty body, you don&amp;#39;t need the &lt;code&gt;.new&lt;/code&gt; constructor call. In a sum type, the alternatives usually are labelled containers for values, but they can be empty containers as well. When that is the case, there is no need to create separate instances of them because there is only one way to have an empty container.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpinionatedBool&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;bt&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;AbsolutelyTrue&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sum types can be used in combination with Raku&amp;#39;s &lt;code&gt;multi sub&lt;/code&gt; feature: Raku lets you provide several definitions for a function, with the same name but different signatures. With multi subs we can do what is known as pattern matching on types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;AbsolutelyTrue&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;TotallyFalse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;) {
    &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;;
}

&lt;span class=&quot;c1&quot;&gt;# Trying it out:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;bt&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# prints True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we use a type as a value, to test if a value is &lt;code&gt;AbsolutelyTrue&lt;/code&gt; or &lt;code&gt;TotallyFalse&lt;/code&gt;, we can use either the smart match &lt;code&gt;~~&lt;/code&gt;, the container (type) identity &lt;code&gt;=:=&lt;/code&gt; or the value (instance) identity &lt;code&gt;===&lt;/code&gt; to test this (the smart match operator behaves like &lt;code&gt;=:=&lt;/code&gt; if the right-hand side is a type and as &lt;code&gt;===&lt;/code&gt; if it is an object instance). If we would create an instance like &lt;code&gt;AbsolutelyTrue.new&lt;/code&gt;, this would not be the case. See the &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/roles_types_and_instances.raku&quot;&gt;code example&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4&gt;The Colour, XYCoord and Pixel types&lt;/h4&gt;

&lt;p&gt;Here is the implementation of the &lt;code&gt;Colour&lt;/code&gt;, &lt;code&gt;XYCoord&lt;/code&gt; and &lt;code&gt;Pixel&lt;/code&gt; types from above. The &lt;code&gt;RGBColour&lt;/code&gt; type is an example of a product type. There are two differences with my notation from above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGBColour&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RGB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Because the role serves both as the type (&lt;code&gt;RGBColour&lt;/code&gt;) and the instance constructor (&lt;code&gt;RGB&lt;/code&gt;), they must have the same name. I only named them differently to make it easier to distinguish them so this is not an issue.&lt;/li&gt;
&lt;li&gt;The types that make up each field must be named with unique names in the role&amp;#39;s argument list, and need to have a corresponding attributes declared. That is again not really a limitation, because accessors for record type fields are handy. So it looks like:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGBColour&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.r&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.g&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.b&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(the role&amp;#39;s parameters are in square brackets)&lt;/p&gt;

&lt;p&gt;And we create &lt;code&gt;aquamarine&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGBColour&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;aquamarine&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;RGBColour&lt;/span&gt;[ &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;212&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The definitions of &lt;code&gt;HSLColour&lt;/code&gt; and &lt;code&gt;XYCoord&lt;/code&gt; are analogous, you can find them in the &lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/role_as_adt_colour_example.raku&quot;&gt;code example&lt;/a&gt;. Let&amp;#39;s look at the sum type to combine the RGB and HSL colour types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colour&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HSL&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;HSLColour&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;hsl&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colour&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HSLColour&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.hsl&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;hsl&lt;/span&gt;;
};
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;RGBColour&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colour&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RGBColour&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.rgb&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;rgb&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is essentially the same approach as for the opinionated Boolean, but we don&amp;#39;t have empty roles: the &lt;code&gt;HSL&lt;/code&gt; alternative takes an argument of type &lt;code&gt;HSLColour&lt;/code&gt;, and the &lt;code&gt;RGB&lt;/code&gt; alternative takes an argument of type &lt;code&gt;RGBColour&lt;/code&gt;.
As in the product type, we use the role as a container to hold the values. The &lt;code&gt;Pixel&lt;/code&gt; type from above looks like: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;Colour&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;XYCoord&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt; ] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.c&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XYCoord&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.xy&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can create pixels with RGB and HSL colours:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p_rgb&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;RGB&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;aquamarine&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; , &lt;span class=&quot;n&quot;&gt;XYCoord&lt;/span&gt;[ &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;p_hsl&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Pixel&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;HSL&lt;/span&gt;[ &lt;span class=&quot;n&quot;&gt;chocolate&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; , &lt;span class=&quot;n&quot;&gt;XYCoord&lt;/span&gt;[ &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt; ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Recursion and polymorphism&lt;/h4&gt;

&lt;p&gt;Above, I showed the Peano number type to illustrate type-level recursion. This works just fine with roles in Raku too:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt;{}    
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$n&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nat&lt;/span&gt; {}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can combine this with type parameters as in the list example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;] {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyList&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;] {}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cons&lt;/span&gt;[ ::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt; ] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.elt&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.lst&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The prefix &lt;code&gt;::&lt;/code&gt; is the Raku syntax to declare type variables)&lt;/p&gt;

&lt;h5&gt;Issues with current raku&lt;/h5&gt;

&lt;p&gt;There are some issues here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;EmptyList&lt;/code&gt; alternative must either be declared as above, with a type parameter, or as&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyList&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt; {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the type also doesn&amp;#39;t take a type variable. We can&amp;#39;t write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyList&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;List&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;] {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is of course only a minor issue, resulting only in some redundancy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A more serious issue is that the type of &lt;code&gt;lst&lt;/code&gt; must be &lt;code&gt;List&lt;/code&gt; (or &lt;code&gt;List[]&lt;/code&gt;) instead of &lt;code&gt;List[a]&lt;/code&gt;. That is actually a problem, as it weakens the type checking. So it must be a bug in the current version of &lt;code&gt;raku&lt;/code&gt; (2020.01). When I provide &lt;code&gt;List[a]&lt;/code&gt; I get the following error:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Could not instantiate role &amp;#39;Cons&amp;#39;:
    Internal error: inconsistent bind result
    in any protect at gen/moar/stage2/NQPCORE.setting line 1216
    in block &amp;lt;unit&amp;gt; at list-adt.raku line 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;A few more useful examples&lt;/h3&gt;

&lt;h4&gt;A multi-type array&lt;/h4&gt;

&lt;p&gt;For the first example, I want to store values of different types in a typed array. They elements can be strings, labeled lists of strings, or undefined. I call this type &lt;code&gt;Matches&lt;/code&gt;. Using the notation from above, it would be&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Str&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TaggedMatches&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UndefinedMatch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Raku, it is defined as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {}
    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UndefinedMatch&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {}
    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.match&lt;/span&gt;=&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;;
    } 
    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaggedMatches&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.tag&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;$tag&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@.matches&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt;;
    } 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This type uses type constructors with 0 (&lt;code&gt;UndefinedMatch&lt;/code&gt;), 1 (&lt;code&gt;Match&lt;/code&gt;) and 2 (&lt;code&gt;TaggedMatches&lt;/code&gt;) arguments, and the latter is a recursive type: the second argument is a list of &lt;code&gt;Matches&lt;/code&gt;. With this definition, we can create an array of matches like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt; = &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
        &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,
        &lt;span class=&quot;n&quot;&gt;TaggedMatches&lt;/span&gt;[
            &lt;span class=&quot;s&quot;&gt;&amp;quot;Adjectives&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
                &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;quot;brave&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,
                &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;) 
                ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;,
        &lt;span class=&quot;nb&quot;&gt;Match&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;
        );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the typed values are actually constructed by calling &lt;code&gt;.new&lt;/code&gt;. It is a bit nicer to create constructor functions, and once Raku has a more developped macro system, we might be able to generate these automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ms&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;mkMatches&lt;/span&gt;(
        &lt;span class=&quot;n&quot;&gt;mkMatch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,
        &lt;span class=&quot;n&quot;&gt;mkTaggedMatches&lt;/span&gt;(
            &lt;span class=&quot;s&quot;&gt;&amp;quot;Adjectives&amp;quot;&lt;/span&gt;,
            &lt;span class=&quot;n&quot;&gt;mkMatches&lt;/span&gt;(
                &lt;span class=&quot;n&quot;&gt;mkMatch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;brave&amp;quot;&lt;/span&gt;,
                &lt;span class=&quot;n&quot;&gt;mkMatch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;new&amp;quot;&lt;/span&gt; 
                )
        ),
        &lt;span class=&quot;n&quot;&gt;mkMatch&lt;/span&gt; &amp;quot;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;)
        );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/roles_as_types.raku&quot;&gt;Code for this example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;A generic tuple&lt;/h4&gt;

&lt;p&gt;For the next example, I want to define a type called &lt;code&gt;Either&lt;/code&gt;. This is a parametric sum type with two parameters, so a kind of generic tuple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Raku, this can be done through the use of type variables as parameters for the role:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;,::&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;] { }
    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;,::&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;] { 
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.left&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;;
    }
    &lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;,::&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;] { 
        &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.right&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because Raku expects both type variables to be declared in each constructor, it is a little bit less nice than my more abstract notation. We can pattern match on this type with a &lt;code&gt;multi sub&lt;/code&gt;: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;) { &lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Left: &amp;#39;&lt;/span&gt;~&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;) {&lt;span class=&quot;nb&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Right: &amp;#39;&lt;/span&gt;~&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we can write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;nb&quot;&gt;Str&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;s&quot;&gt;&amp;#39;forty-two&amp;#39;&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;

&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;iv&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# prints &amp;#39;Left: 42&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;); &lt;span class=&quot;c1&quot;&gt;# prints &amp;#39;Right: forty-two&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/either.raku&quot;&gt;Code for this example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;A parameterised binary tree&lt;/h4&gt;

&lt;p&gt;As a final example, here is a simple binary tree. First, let&amp;#39;s look at an example implementation using a role from the &lt;a href=&quot;https://docs.raku.org/language/objects#index-entry-Parameterized_Roles&quot;&gt;Raku documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] {
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.left&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.right&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.node&lt;/span&gt;;

    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) {
        &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.node&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.left&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$.right&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) {
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.left&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;$.right&lt;/span&gt; -&amp;gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; {
            &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;;
        }
        &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.node&lt;/span&gt;;
    }
    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;vg&quot;&gt;::?CLASS&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;U:&lt;/span&gt; *&lt;span class=&quot;nv&quot;&gt;@el&lt;/span&gt;) {
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$middle-index&lt;/span&gt; = &lt;span class=&quot;nv&quot;&gt;@el&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@left&lt;/span&gt;         = &lt;span class=&quot;nv&quot;&gt;@el&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; .. &lt;span class=&quot;nv&quot;&gt;$middle-index&lt;/span&gt; - &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;];
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$middle&lt;/span&gt;       = &lt;span class=&quot;nv&quot;&gt;@el&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$middle-index&lt;/span&gt;];
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@right&lt;/span&gt;        = &lt;span class=&quot;nv&quot;&gt;@el&lt;/span&gt;[&lt;span class=&quot;nv&quot;&gt;$middle-index&lt;/span&gt; + &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. *];
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;(
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;nv&quot;&gt;$middle&lt;/span&gt;,
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;nv&quot;&gt;@left&lt;/span&gt;  ?? &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@left&lt;/span&gt;)  !! &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;,
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;nv&quot;&gt;@right&lt;/span&gt; ?? &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;@right&lt;/span&gt;) !! &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;,
        );
}

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;].&lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;);
&lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;say&lt;/span&gt;);    &lt;span class=&quot;c1&quot;&gt;# OUTPUT: «5␤4␤6␤» &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$t&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;nv&quot;&gt;&amp;amp;say&lt;/span&gt;);   &lt;span class=&quot;c1&quot;&gt;# OUTPUT: «4␤6␤5␤» &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example contains quite a bit of Raku syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raku allows dashes in names;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;-&amp;gt;&lt;/code&gt; syntax is a foreach loop, iterating over all elements of the preceding list;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;..&lt;/code&gt; is array slicing;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::?CLASS&lt;/code&gt; is a compile-time type variable populated with the class you&amp;#39;re in and &lt;code&gt;:U&lt;/code&gt; is a type constraint which specifies that it should be interpreted as a type object. Finally, the &lt;code&gt;:&lt;/code&gt; marks the argument to its left as the invocant. In other words, it allows us to write &lt;code&gt;BinaryTree[Int].new-from-list(4, 5, 6)&lt;/code&gt; where &lt;code&gt;BinaryTree[Int] is the value of&lt;/code&gt;::?CLASS`. This is the Raku way to create custom constructors.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;*&lt;/code&gt; in front of the &lt;code&gt;@el&lt;/code&gt; argument of &lt;code&gt;new-from-list&lt;/code&gt; makes this a variadic function where &lt;code&gt;@el&lt;/code&gt; contains all arguments;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;=&amp;gt;&lt;/code&gt; syntax allows to assign arguments by name rather than by position;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?? ... !! ...&lt;/code&gt; is Raku&amp;#39;s syntax for C&amp;#39;s ternary &lt;code&gt;? ... : ...&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example is written in Raku&amp;#39;s object-oriented style, with methods acting on the attributes of the role. Let&amp;#39;s see how we can write this in a functional style.&lt;/p&gt;

&lt;p&gt;The algebraic data type for this binary tree is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datatype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BinaryTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BinaryTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BinaryTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Tip&lt;/code&gt; alternative is for the empty leaf nodes of the tree, which in the above example are left undefined. In Raku, we can implement this type as: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] { }
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;,  \&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;,  \&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;, \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] { 
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.left&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] &lt;span class=&quot;nv&quot;&gt;$.right&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$.node&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tip&lt;/span&gt;[::&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] &lt;span class=&quot;nb&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;] { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of the methods we use functions, implemented as &lt;code&gt;multi sub&lt;/code&gt;s. Most of the code is of course identical, but there is no need for conditionals to check if a leaf node has been reached. I have also used sigil-less immutable variables.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl6&quot; data-lang=&quot;perl6&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) {
    &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;)
    }
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Tip&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) { }

&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) {    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; -&amp;gt; \&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;)
    }
    &lt;span class=&quot;n&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;;
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;Tip&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;cb&lt;/span&gt;) { }

&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(::&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,[]) {
    &lt;span class=&quot;n&quot;&gt;Tip&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;    
}
&lt;span class=&quot;k&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(::&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,\&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;middle-index&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;.&lt;span class=&quot;nb&quot;&gt;elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;         = &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;[&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; .. &lt;span class=&quot;n&quot;&gt;middle-index&lt;/span&gt; - &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;];
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;       = &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;middle-index&lt;/span&gt;];
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;        = &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;middle-index&lt;/span&gt; + &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; .. *];    
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,
        &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;),
        &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;),
        &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;            
    ].&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;;
}

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryTree&lt;/span&gt;[&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;] \&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;new-from-list&lt;/span&gt;(&lt;span class=&quot;nb&quot;&gt;Int&lt;/span&gt;,[&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;]);
&lt;span class=&quot;n&quot;&gt;visit-preorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;say&lt;/span&gt;);    &lt;span class=&quot;c1&quot;&gt;# OUTPUT: «5␤4␤6␤» &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;visit-postorder&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;&amp;amp;say&lt;/span&gt;);   &lt;span class=&quot;c1&quot;&gt;# OUTPUT: «4␤6␤5␤» &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to note is that in the &lt;code&gt;multi sub&lt;/code&gt;s we don&amp;#39;t have to match against the full type, for example in &lt;code&gt;visit-preorder&lt;/code&gt; we match against &lt;code&gt;Tip&lt;/code&gt; and &lt;code&gt;Node&lt;/code&gt; rather than the full &lt;code&gt;Tip[a]&lt;/code&gt; and &lt;code&gt;Node[::a,BinaryTree[a],BinaryTree[a],a]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wimvanderbauwhede/raku-examples/blob/master/binary_tree_2.p6&quot;&gt;Code for this example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Creating algebraic data types with Raku&amp;#39;s roles is very straightforward. Any product type is simply a role with a number of typed attributes. The key idea for the sum type is to create an empty role and mix it in with other roles that become the type constructors for your alternatives. Because roles accept type parameters, we can have parametric polymorphism. And because a role can have attributes of its own type, we have recursive types as well. Combined with Raku&amp;#39;s other functional programming features, this makes writing pure, statically typed functional code in Raku great fun.  &lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types&quot;&gt;&amp;quot;The algebra (and calculus!) of algebraic data types&amp;quot;, by Joel Burget&lt;/a&gt;
&lt;br/&gt;
[2] &lt;a href=&quot;https://gist.github.com/gregberns/5e9da0c95a9a8d2b6338afe69310b945&quot;&gt;&amp;quot;The Algebra of Algebraic Data Types, Part 1&amp;quot;, by Chris Taylor&lt;/a&gt;&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>The Winds of Kyoto</title>
        <link href="https://wimvanderbauwhede.github.io/articles/the-winds-of-kyoto/"/>
        <updated>2020-03-28T00:00:00+00:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/the-winds-of-kyoto</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/the-winds-of-kyoto_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;I wrote a very short story for the &lt;a href=&quot;https://www.writersinkyoto.com/2019/12/writers-in-kyoto-present-the-fifth-annual-kyoto-writing-competition/&quot;&gt;Fifth Annual Kyoto Writing Competition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the &lt;a href=&quot;www.dpri.kyoto-u.ac.jp/en/&quot;&gt;Disaster Prevention Research Institute&lt;/a&gt; of Kyoto University, researchers are modelling the flow of the wind over the city.&lt;/p&gt;

&lt;p&gt;The wind that blows over the tiny machiyas of Gion and around Kyoto station with its tall hotels and the Tower.&lt;/p&gt;

&lt;p&gt;In spring, it scatters a storm of sakura petals all over the city. In the rainy season, it blows down from Arashiyama along the waters of the Katsuragawa, and carries streams of clouds over the hills. When the temple ponds are full of lotus flowers, it stirs the lanterns and chases the incense smoke, and cools the faces of the teams that pull the Yamaboko along Shijou Doori. At the end of summer, when the higanbana is blooming, that same wind follows the railway line to Uji and blows in through the open window of the researchers’ offices, rifling the stacks of diagrams that reveal its very flow.&lt;/p&gt;

&lt;p&gt;But sometimes that flow gathers to a tremendous strength, and then a typhoon will lacerate the city. The models of the wind predicts this, to make sure the people of Kyoto are prepared.&lt;/p&gt;

&lt;p&gt;Then Kyoto hunkers down, and waits.&lt;/p&gt;

&lt;p&gt;When the storm has passed, the sky is a transparent clear and blue. The wind of Kyoto is once again cool and mild, blowing gently over the city.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/les-reynolds-stress.png&quot; alt=&quot;Reynolds stress of wind flow over Kyoto, at 4 different heights&quot;
title=&quot;Reynolds stress of wind flow over Kyoto, at 4 different heights&quot; /&gt;
&lt;figcaption&gt;Result of wind flow simulation over Kyoto,  from a paper [1] by  DPRI researchers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;[1] &lt;a href=&quot;https://doi.org/10.1007/s10546-018-0344-8&quot;&gt;Yoshida, T., Takemi, T. &amp;amp; Horiguchi, M. Large-Eddy-Simulation Study of the Effects of Building-Height Variability on Turbulent Flows over an Actual Urban Area. Boundary-Layer Meteorol 168, 127–153 (2018). &lt;/a&gt;&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Writing faster Perl code</title>
        <link href="https://wimvanderbauwhede.github.io/articles/writing-faster-perl/"/>
        <updated>2019-04-27T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/writing-faster-perl</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/writing-faster-perl_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;As part of my research I have been developing a &lt;a href=&quot;https://github.com/wimvanderbauwhede/RefactorF4Acc&quot;&gt;Fortran source-to-source compiler&lt;/a&gt; &amp;mdash; in &lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;. The compiler transforms legacy FORTRAN 77 scientific code into more modern Fortran 95. For the reasons to target FORTRAN 77, please read &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0045793018302950&quot;&gt;my paper&lt;/a&gt;. The compiler is written in Perl because it is available on any Linux-like system and can be executed without the need for a build toolchain. The compiler has no external dependencies at all, so that it is very simple to install and run. This is crucial because my target users are weather and climate scientists, not programmers or computer scientists. Python would have been a viable alternative but I personally prefer Perl.&lt;/p&gt;

&lt;h2&gt;Perl performance as we know it&lt;/h2&gt;

&lt;p&gt;An often-made argument is that if you want performance, you should not write your code in Perl. And it is of course true that compiled code will almost always be faster. However, often rewriting in a compiled language is not an option, so it is important to know how to get the best possible performance in pure Perl. The Perl documentation has &lt;a href=&quot;https://perldoc.perl.org/perlperf.html&quot;&gt;perlperf&lt;/a&gt; which offers good advice and &lt;a href=&quot;http://makepp.sourceforge.net/2.0/perl_performance.html&quot;&gt;these tips&lt;/a&gt; provide some more detail. But for my needs I did not find the answers there, nor anywhere else. So I created some simple test cases to find out. I used Perl version &lt;code&gt;5.28&lt;/code&gt;, the most recent one, but the results should be quite similar for earlier versions.&lt;/p&gt;

&lt;h2&gt;Testing some hunches&lt;/h2&gt;

&lt;p&gt;Before going into the details on the performance bottleneck in my compiler, here are some results of performance comparisons that influenced design decisions for the compiler. The compiler is written in a functional style &amp;mdash; I am after all a Haskell programmer &amp;mdash; but performance matters more than functional purity. &lt;/p&gt;

&lt;h3&gt;Hash key testing is faster than regexp matching&lt;/h3&gt;

&lt;p&gt;Fortran code essentially consists of a list of statements which can contain expressions, and the parser labels each of the statements once using a hashmap, ever the workhorse data structure in Perl. Every parsed line of code is stored as a pair with this hashmap (which I call &lt;code&gt;$info&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$parsed_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$src_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means than in principle I can choose to match a pattern in $line using a regex or use one of the lables in &lt;code&gt;$info&lt;/code&gt;. So I tested the performance of hash key testing versus regexp matching, using some genuine FORTRAN 77 code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;READ( 1, 2, ERR=8, END=9, IOSTAT=N ) X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/read/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;ReadCall&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/read/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;ReadCall&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the &lt;code&gt;if&lt;/code&gt;-condidion, the loop takes 3.1 s on my laptop. The loop with the regexp match condition takes 10.1 s; with the hash key existence test it takes 5.6 s. So the actual condition evaluation takes 7 s for regexp and 2.5 s for hash key existence check. So testing hash keys is alsmost three times faster than simple regexp matching. &lt;/p&gt;

&lt;h3&gt;Custom tree traversals are faster&lt;/h3&gt;

&lt;p&gt;I tested the cost of using higher-order functions for tree traversal. Basically, this is the choice between a generic traversal which takes an arbitrary function that operates on the tree nodes: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_traverse_ast_with_action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;cond&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scalar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;_traverse_ast_with_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or a custom traversal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_traverse_ast_custom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;&amp;lt;cond&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scalar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;_traverse_ast_custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the case of the tree data structures in my compiler, the higher-order implementation takes twice as long as the custom traversal, so for performance this is not a good choice. Therefore I don&amp;#39;t use higher-order functions in the parser, but I do use them in the later refactoring passes.&lt;/p&gt;

&lt;h3&gt;Maps are slower than for-loops, but not much&lt;/h3&gt;

&lt;p&gt;Finally I tested the cost of using &lt;code&gt;map&lt;/code&gt; instead of a &lt;code&gt;foreach&lt;/code&gt;-loop:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# map, so much more concise!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# declarations for all for-loops&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# foreach-loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# index-based for-loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# C-style for-loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$elt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt;-loop version takes 2.6 s, the &lt;code&gt;map&lt;/code&gt; version 3.3 s, so the map is 25% slower. For reference, the index-based &lt;code&gt;for&lt;/code&gt;-loop version takes 3.8 s and the C-style &lt;code&gt;for&lt;/code&gt;-loop version 4.4 s &amp;mdash; don&amp;#39;t do that! &lt;/p&gt;

&lt;p&gt;Because the map is slower, again I did not use it in the parser, and I implemented my own higher-order functions which use foreach-loops internally for the refactoring passes.&lt;/p&gt;

&lt;h2&gt;Compiler bottleneck: expression parsing&lt;/h2&gt;

&lt;p&gt;As the compiler grew in capabilities, it became noticeably slower. Perl has a great profiling tool, &lt;a href=&quot;https://metacpan.org/pod/Devel::NYTProf&quot;&gt;Devel::NYTProf&lt;/a&gt;, and I used it to identify the bottleneck. As you can see from the flame graph in the banner image, it turned out to be the expression parser. This part of the code was based on &lt;a href=&quot;https://metacpan.org/pod/Math::Expression::Evaluator&quot;&gt;Math::Expression::Evaluator&lt;/a&gt; because it was convenient to reuse. But it was not built for performance, and also not to parse Fortran. So I finally bit the bullet and wrote my own.&lt;/p&gt;

&lt;p&gt;What I loosely call an expression parser is actually a combination of a lexer and a parser: it turns a string of source code into a tree-like datastructure which expresses the structure of the expression and the purpose of its constituents. For example if the expression is &lt;code&gt;2*v+1&lt;/code&gt;, the result of the expression parser will be a data structure which identifies the top-level expression as a sum of a multplication with  the integer constant &lt;code&gt;1&lt;/code&gt;, and the multiplication of an integer constant &lt;code&gt;2&lt;/code&gt; with a variable &lt;code&gt;v&lt;/code&gt;. So how do we build a fast expression parser? It is not my intention to go into the computing science details, but instead to discuss the choices to be considered.&lt;/p&gt;

&lt;h2&gt;Testing some more hunches&lt;/h2&gt;

&lt;p&gt;First, the choice of the data structure matters. As we need a tree-like ordered data structure, it would have to be either an object or a list. But objects in Perl are slow, so I use a nested list. As it happens, &lt;code&gt;Math::Expression&lt;/code&gt; already uses nested lists. Using the parser from &lt;code&gt;Math::Expression&lt;/code&gt;, the above expression would be turned into:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Integer comparison is faster than string comparison&lt;/h3&gt;

&lt;p&gt;This data structure is fine if you don&amp;#39;t need to do a lot of work on it. However, because every node is labeled with a string, testing against the node type is a string comparison. I did a quick test:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my laptop, the version with string comparison takes 5.3 s, the integer comparison 4.6 s. Without the &lt;code&gt;if&lt;/code&gt;-statement, the code takes 3.1 s. In other words, the actual &lt;code&gt;if&lt;/code&gt; with string comparison takes 2.2 s, with integer comparison 1.5 s. So doing string comparisons is 50% slower than doing integer comparisons. Therefore my data structure uses integer labels. Also, I label the constants so that I can have different labels for string, integer and real constants, and because in this way all nodes are arrays. This avoids having to test if a node is an array or a scalar, which is a slow operation.&lt;/p&gt;

&lt;p&gt;So the example becomes :&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Less readable, but faster and easier to extend.&lt;/p&gt;

&lt;h3&gt;Regexes are faster than string comparisons&lt;/h3&gt;

&lt;p&gt;Then we have to decide how to parse the expression string. The traditional way to build an expression parser is using a Finite State Machine, consuming one character at a time (if needed with one or more characters look-ahead) and keeping track of the identified portion of the string. This is very fast in a language such as C but in Perl I was not too sure, because in Perl a character is actually a string of length one, so every test against a character is a string comparison. On the other hand, Perl has a famously efficient regular expression engine. So I created a little testbench to see which approach was faster:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;This means we need a stack per type of operation and run until the end of the expression&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@chrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;ne&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10_000_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^(\w+)//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;s/^\s+//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my laptop, the FSM version takes 3.25 s, the regex version 1.45 s (mean over 10 runs), so the regexp version is twice as fast &amp;mdash; the choice is clear.&lt;/p&gt;

&lt;h2&gt;A faster expression parser&lt;/h2&gt;

&lt;p&gt;With the choices of string parsing and data structure made, I focused on the structure of the overall algorithm. The basic approach is to loop through a number of states and in every state perform a specific action. This is very simple because we use regular expressions to identify tokens, so most of the state transitions are implicit:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prev_lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match unary prefix operations&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match terms&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Add prefix operations if matched&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Match binary operators&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;# Append to the AST&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The matching rules and operations are very simple (I use &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; as placeholders for the actual values):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prefix operations:
&lt;code&gt;perl
if ( $str=~s/^&amp;lt;pattern&amp;gt;// ) { $state=&amp;lt;integer&amp;gt;; } 
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;terms:
&lt;code&gt;perl
if ( $str=~s/^(&amp;lt;pattern&amp;gt;)// ) { $expr_ast=[&amp;lt;integer&amp;gt;,$1]; }
&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;operators:
&lt;code&gt;perl
$prev_lev=$lev;
if ( $str=~s/^&amp;lt;pattern&amp;gt;// ) { $lev=&amp;lt;integer&amp;gt;; $op=&amp;lt;integer&amp;gt;; }
&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operators have precedence and associativity, and Fortran requires twelve precedence levels. In the &amp;quot;Append to AST&amp;quot; state, the parser uses &lt;code&gt;$lev&lt;/code&gt; and &lt;code&gt;$prev_lev&lt;/code&gt; to work out how the previously matched &lt;code&gt;$expr_ast&lt;/code&gt; and &lt;code&gt;$op&lt;/code&gt; should be appended to the &lt;code&gt;@ast&lt;/code&gt; array. The prefix operations are handled by setting a state which is checked after term matching. The actual code is a bit more complicated because we need to parse array index expressions and function calls as well. This is done recursively during term matching; if a function call has multiple arguments, the parser is put into a new &lt;code&gt;$state&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So the end result is a minimally recursive parser, i.e. it only uses recursion when it is really necessary. This is because Perl is not efficient in doing recursive function calls (nor in fact for non-recursive ones).&lt;/p&gt;

&lt;p&gt;There is a lot of repetition of the patterns for matching terms and operators because if I would instead abstract the &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt; values by e.g. storing them in an array, the array accesses would considerably reduce the performance. I do store the precedence levels in an array because there are so many of them that the logic for appending terms to the AST would otherwise become very hard to read and update.&lt;/p&gt;

&lt;h2&gt;Expression parser performance&lt;/h2&gt;

&lt;p&gt;I tested the new expression parser on a set of 50 different expressions taken from a weather simulation code. The old expression parser takes 45 s to run this test a thousand times; the new expression parser takes only 2 s. In other words, the new parser is &lt;em&gt;more than twenty times faster&lt;/em&gt; than the old one. &lt;/p&gt;

&lt;p&gt;It is also quite easy to maintain and adapt despite its minimal use of abstractions, and because it is Fortran-specific, the rest of the code has become a lot cleaner too. You can find the code in &lt;a href=&quot;https://github.com/wimvanderbauwhede/RefactorF4Acc/blob/devel/RefactorF4Acc/Parser/Expressions.pm&quot;&gt;my GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Here is a summary of all optimisations I tested. The tests were run using Perl v5.28 on a MacBook Pro (late 2013), timings are averages over 5 runs and measured using &lt;code&gt;time&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;| --- | --- | 
| Optimisation | Speed-up |
| --- | --- | 
| Hash key testing is faster than regexp matching | 3&amp;times; |
| Custom tree traversals are faster than generic ones | 2&amp;times; |
| &lt;code&gt;foreach&lt;/code&gt; is faster than &lt;code&gt;map&lt;/code&gt; | 1.3&amp;times; |
| &lt;code&gt;foreach&lt;/code&gt; is faster than indexed &lt;code&gt;for&lt;/code&gt; | 1.4&amp;times; |
| &lt;code&gt;foreach&lt;/code&gt; is faster than C-style &lt;code&gt;for&lt;/code&gt; | 1.7&amp;times; | 
| Integer comparison is faster than string comparison | 1.5&amp;times; |
| Regexp matching is faster than successive string comparisons | 2.2&amp;times; |&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Why Europe needs hurricane contingency planning</title>
        <link href="https://wimvanderbauwhede.github.io/articles/prepare-for-hurricanes/"/>
        <updated>2018-10-21T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/prepare-for-hurricanes</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/prepare-for-hurricanes_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;As a result of global warming, hurricanes will become common in Europe in the next few decades. I discuss the evidence, the impact and the need for proper contingency planning.&lt;/p&gt;

&lt;h2&gt;Some terminology&lt;/h2&gt;

&lt;h3&gt;Tropical cyclones&lt;/h3&gt;

&lt;p&gt;A tropical cyclone is a rapidly rotating storm system with a low-pressure centre, strong winds, and a spiral arrangement of thunderstorms that produce heavy rain. They are called &amp;quot;tropical&amp;quot; because they form almost exclusively over tropical or sub-tropical waters. &amp;quot;Cyclone&amp;quot; refers to their winds moving in a circle, rotating around a central clear eye. The winds blow counterclockwise in the Northern Hemisphere and clockwise in the Southern Hemisphere. &lt;/p&gt;

&lt;p&gt;For completeness, an anticyclone is a large-scale circulation of winds around a central region of high atmospheric pressure, clockwise in the Northern Hemisphere, counterclockwise in the Southern Hemisphere&amp;quot;. Anticyclones are not storm systems, and in Belgium, where I used to live, the famous[^1] &lt;a href=&quot;https://en.wikipedia.org/wiki/Azores_High&quot;&gt;Azores Anticyclone&lt;/a&gt; usually lead to nice weather.&lt;/p&gt;

&lt;h3&gt;Storms, hurricanes and typhoons&lt;/h3&gt;

&lt;p&gt;The terms &amp;quot;hurricane&amp;quot; and &amp;quot;typhoon&amp;quot; refer both to powerful tropical cyclones. A hurricane[^2] occurs in the Atlantic Ocean and northeastern Pacific Ocean, and a typhoon[^3] occurs in the northwestern Pacific Ocean[^4].  The diameter of the hurricane is typically of the order of hundreds of kilometers. Last month&amp;#39;s hurricane Florence was over 600 km in diameter, and typhoon Trami about 500 km. A &amp;quot;tropical storm&amp;quot; is &amp;quot;tropical cyclone&amp;quot; that is less strong than a hurricane or typhoon. &lt;/p&gt;

&lt;h2&gt;Strength and potential damage&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.nhc.noaa.gov/aboutsshws.php&quot;&gt;Saffir-Simpson Hurricane Wind Scale&lt;/a&gt; is a scale from 1 to 5 based on a hurricane&amp;#39;s sustained wind speed, used to estimate potential property damage. Hurricanes reaching Category 3 and higher are considered major hurricanes because of their potential for significant loss of life and damage. However, Category 1 and 2 hurricanes are still much more dangerous than ordinary tropical storms, and require preventive measures.&lt;/p&gt;

&lt;p&gt;The amount of energy in a hurricane is very large. &lt;a href=&quot;http://www.aoml.noaa.gov/hrd/tcfaq/D7.html&quot;&gt;NOAA&lt;/a&gt; (US National Oceanic and Atmospheric Administration) notes that the energy released by an average hurricane &amp;quot;is equivalent to 200 times the world-wide electrical generating capacity&amp;quot;.&lt;/p&gt;

&lt;p&gt;The table below is adapted from &lt;a href=&quot;https://www.nhc.noaa.gov/aboutsshws.php&quot;&gt;NOAA&lt;/a&gt; page linked above.&lt;/p&gt;

&lt;table&gt;
 &lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
Category&lt;/th&gt;
&lt;th&gt;Sustained wind&amp;nbsp;speed&lt;/th&gt;
&lt;th&gt;Extent of damage&lt;/th&gt;
&lt;/tr&gt;
  &lt;/thead&gt;
   &lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
1&lt;/td&gt;&lt;td&gt;119-153 km/h&lt;/td&gt;&lt;td&gt; &lt;em&gt;Very dangerous winds will produce some damage:&lt;/em&gt; &lt;br&gt;Houses could have damage to roof, shingles and gutters. Large branches of trees will snap and shallowly rooted trees may be toppled. Extensive damage to power lines and poles likely will result in power outages that could last a few to several days.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
2&lt;/td&gt;&lt;td&gt;154-177 km/h&lt;/td&gt;&lt;td&gt; &lt;em&gt;Extremely dangerous winds will cause extensive damage:&lt;/em&gt; &lt;br&gt;Houses could sustain major roof and siding damage. Many shallowly rooted trees will be snapped or uprooted and block numerous roads. Near-total power loss is expected with outages that could last from several days to weeks.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
3&lt;/td&gt;&lt;td&gt;178-208 km/h&lt;/td&gt;&lt;td&gt; &lt;em&gt;Devastating damage will occur:&lt;/em&gt; &lt;br&gt;Houses may incur major damage or removal of roof decking and gable ends. Many trees will be snapped or uprooted, blocking numerous roads. Electricity and water will be unavailable for several days to weeks after the storm passes.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
4&lt;/td&gt;&lt;td&gt;209-251 km/h&lt;/td&gt;&lt;td&gt; &lt;em&gt;Catastrophic damage will occur:&lt;/em&gt;&lt;br&gt;Houses can sustain severe damage with loss of most of the roof structure and/or some exterior walls. Most trees will be snapped or uprooted and electricity poles downed. Fallen trees and electricity poles will isolate residential areas. Power outages will last weeks to possibly months. Most of the area will be uninhabitable for weeks or months.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
5&lt;/td&gt;&lt;td&gt;252 km/h or higher&lt;/td&gt;&lt;td&gt;&lt;em&gt;Catastrophic damage will occur:&lt;/em&gt;&lt;br&gt;A high percentage of houses will be destroyed, with total roof failure and wall collapse. Fallen trees and electricity poles will isolate residential areas. Power outages will last for weeks to possibly months. Most of the area will be uninhabitable for weeks or months.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note that this table uses &lt;a href=&quot;http://www.aoml.noaa.gov/hrd/tcfaq/D4.html&quot;&gt;sustained wind speeds&lt;/a&gt;. The &lt;em&gt;gusts&lt;/em&gt; occuring during a tropical cyclone can be a lot stronger than this (typically about 30% stronger), and are usually what is quoted in the media.&lt;/p&gt;

&lt;h2&gt;Global warming causes hurricanes to get stronger&lt;/h2&gt;

&lt;p&gt;Slightly simplifying, hurricanes get their energy from the heat in the surface sea water. As the planet gets warmer, the sea surface gets warmer, which leads to stronger tropical cyclones.&lt;/p&gt;

&lt;p&gt;There is plenty evidence for this trend. For example, very recent work by my friend and colleague Prof. Takemi of the Disaster Prevention Research Institute (DPRI) of Kyoto University [1] used observation data of historical typhoons to reproduce them in simulation, and then simulated the effects of future warmer conditions. They conclude that both wind speed and precipitation would increase significantly. When I visited DPRI in September, a researcher explained me their latest simulations. With 2 degrees warming, wind speeds and rainfall during a typhoon could double.&lt;/p&gt;

&lt;p&gt;The recent Guardian article &lt;a href=&quot;https://www.theguardian.com/weather/ng-interactive/2018/sep/11/atlantic-hurricanes-are-storms-getting-worse&quot;&gt;&amp;quot;Is climate change making hurricanes worse?&amp;quot;&lt;/a&gt; provides a good overview. Note that this trend refers to &lt;em&gt;all&lt;/em&gt; tropical cyclones, not just these that made landfall.&lt;/p&gt;

&lt;h2&gt;Hurricanes are coming to Europe&lt;/h2&gt;

&lt;p&gt;Historically, &lt;em&gt;none of the tropical storms&lt;/em&gt; in Europe in the last century except &lt;a href=&quot;https://en.wikipedia.org/wiki/Hurricane_Vince&quot;&gt;hurricane Vince in 2005&lt;/a&gt; have been hurricanes, no matter how severe they might have seemed. However, this is about to change.&lt;/p&gt;

&lt;p&gt;As hurricanes get more powerful and last longer, the chance that they can reach Europe grows. Again, there is evidence for this. Already in 2013 Reindert Haarsma, Senior Scientist at the Royal Netherlands Meteorological Institute wrote the article &lt;a href=&quot;https://theconversation.com/the-future-will-bring-hurricanes-to-europe-16339&quot;&gt;&amp;quot;The future will bring hurricanes to Europe&amp;quot;&lt;/a&gt; which gives a good overview. The article is based on Haarsma&amp;#39;s scientific research [2]. Other researchers predict similar trends [3,4,5].&lt;/p&gt;

&lt;h2&gt;Impact and contingency planning&lt;/h2&gt;

&lt;p&gt;Hurricanes do not only cause damage because of the strong winds. They also lead to flash floods because of the very heavy rainfall that they cause (often 30-50 cm/h), and because of the &lt;a href=&quot;https://www.nhc.noaa.gov/surge/&quot;&gt;storm surges&lt;/a&gt; which are several meters in height (e.g. 5 m for hurricane Michael a few weeks ago). &lt;/p&gt;

&lt;p&gt;To put this into perspective, in December 2015 &lt;a href=&quot;https://en.wikipedia.org/wiki/2015%E2%80%9316_Great_Britain_and_Ireland_floods&quot;&gt;storm Desmond&lt;/a&gt; broke the United Kingdom&amp;#39;s 24-hour rainfall record with 34 cm of rainfall in 24 hours, and led to widespread flooding in the UK and Ireland.  The only storm surge on record comparable to those caused by hurricanes was the notorious &lt;a href=&quot;https://en.wikipedia.org/wiki/North_Sea_flood_of_1953&quot;&gt;Great Storm of 1953&lt;/a&gt;. In Scotland, where storms are common, this was the worst storm[^5] in 500 years.&lt;/p&gt;

&lt;p&gt;Better flood defenses are therefore absolutely crucial to deal with future hurricanes. As a result of the 1953 disaster, much was done in the UK, the Netherlands and Belgium to strenghten flood defenses, but these focus on the North Sea. Similar works on the coasts facing the Atlantic will be necessary. Furthermore because of the increased damage, power outages and disruption of supplies will last much longer than for the storms we have now and therefore contingency plans will have to be put in place. 
A capability for accurate forecasting of hurricane trajectories is necessary for timely evacuation of people in the affected areas.  &lt;/p&gt;

&lt;p&gt;The good news is that Europe can benefit from the extensive know-how developed for example in the US and Japan, both in predictions and in dealing with the effects of such severe weather events. &lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;p&gt;[1] Kanada S, Takemi T, Kato M, Yamasaki S, Fudeyasu H, Tsuboki K, Arakawa O, Takayabu I. A multimodel intercomparison of an intense typhoon in future, warmer climates by four 5-km-mesh models. &lt;em&gt;Journal of Climate.&lt;/em&gt; 2017 Aug;30(15):6017-36.&lt;/p&gt;

&lt;p&gt;[2] Haarsma RJ, Hazeleger W, Severijns C, De Vries H, Sterl A, Bintanja R, Van Oldenborgh GJ, van den Brink HW. More hurricanes to hit western Europe due to global warming. &lt;em&gt;Geophysical Research Letters.&lt;/em&gt; 2013 May 16;40(9):1783-8.&lt;/p&gt;

&lt;p&gt;[3] Baker A, Hodges K, Schiemann R, Vidale PL. North Atlantic post-tropical cyclones in reanalysis datasets. In &lt;em&gt;EGU General Assembly Conference Abstracts&lt;/em&gt;, 2018 Apr (Vol. 20, p. 14606).&lt;/p&gt;

&lt;p&gt;[4] Dekker MM, Haarsma RJ, de Vries H, Baatsen M, van Delden AJ. Characteristics and development of European cyclones with tropical origin in reanalysis data. &lt;em&gt;Climate Dynamics.&lt;/em&gt; 2018 Jan 1;50(1-2):445-55.&lt;/p&gt;

&lt;p&gt;[5] Mousavi ME, Irish JL, Frey AE, Olivera F, Edge BL. Global warming and hurricanes: the potential impact of hurricane intensification and sea level rise on coastal flooding. &lt;em&gt;Climatic Change.&lt;/em&gt; 2011 Feb 1;104(3-4):575-97.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The banner image shows typhoon Halong approaching Japan in September 2014, &amp;copy; NASA Terra/MODIS 2014&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[^1]: It is so famous that a travel book shop in Brussels took it as its name.&lt;br&gt;
[^2]: The term &amp;quot;hurricane&amp;quot; derives from the Spanish word &lt;em&gt;huracán&lt;/em&gt;, which in turn probably derives from the Taino (an indigenous people of the Caribbean) word &lt;em&gt;hurakán&lt;/em&gt; &amp;quot;god of the storm&amp;quot;.&lt;br&gt;
[^3]: In Japan they are called 台風 (&lt;em&gt;taifuu&lt;/em&gt;) and are given numbers rather than names.&lt;br&gt;
[^4]: In the northwestern Pacific, the term &amp;quot;super typhoon&amp;quot; is used for tropical cyclones with sustained winds exceeding 240 km/h.&lt;br&gt;
[^5]: This was a &lt;a href=&quot;https://en.wikipedia.org/wiki/European_windstorm&quot;&gt;European windstorm&lt;/a&gt;, a type of extratropical cyclone, caused by different weather phenomena than hurricanes. There is evidence that this type of storms is also getting stronger [5].&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Hacking the Pleroma: Elixir, Phoenix and a bit of ActivityPub</title>
        <link href="https://wimvanderbauwhede.github.io/articles/hacking-pleroma/"/>
        <updated>2018-04-19T00:00:00+01:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/hacking-pleroma</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/hacking-pleroma_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;&lt;a href=&quot;https://pleroma.social/&quot;&gt;Pleroma&lt;/a&gt; &amp;quot;is a microblogging server software that can federate (= exchange messages with) other servers that support the same federation standards (OStatus and ActivityPub). What that means is that you can host a server for yourself or your friends and stay in control of your online identity, but still exchange messages with people on larger servers. Pleroma will federate with all servers that implement either OStatus or ActivityPub, like GNU Social, Friendica, Hubzilla and Mastodon.&amp;quot; &lt;a href=&quot;https://blog.soykaf.com/post/what-is-pleroma/&quot;&gt;(stolen from Lain&amp;#39;s blog post)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently I modified my Pleroma instance to support bot services: parse a posted message, take an action, post the result. To get there I had to learn &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;, the language in which Pleroma is written, as well as &lt;a href=&quot;https://hexdocs.pm/phoenix/overview.html&quot;&gt;Phoenix&lt;/a&gt;, the web framework Elixir uses, and a little bit about ActivityPub, the protocol for exchanging messages. What I want to explain here in particular is the architecture of Pleroma, so that you can hack it more easily, for fun or if you want to participate in the development.&lt;/p&gt;

&lt;h2&gt;Elixir&lt;/h2&gt;

&lt;p&gt;As Pleroma is written in &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; you&amp;#39;ll need to learn that language to some extent. If you are familiar with Ruby (or Perl, for that matter) and with the idea of functional programming (everything is a function), then it is quite easy to learn and understand. The &lt;a href=&quot;https://hexdocs.pm/elixir/&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://elixir-lang.org/getting-started/introduction.html&quot;&gt;guides&lt;/a&gt; are very good. &lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve never hear of functional programming, the main difference with e.g. Ruby or Java is that Elixir does not use an object-oriented programming model. Instead, there are functions that manipulate data structures and other functions. A particular consequence of the functional model is that there are no for- or while-loops. Instead, there are what is called higher-order functions which e.g. apply another function to a list. Elixir programs also make a lot more use of recursion. &lt;/p&gt;

&lt;p&gt;Another point about Elixir as a web programming language is that it is built on a system where processes communicate by passing messages to one another, and it is  built in such a way that if a process dies it will normally be restarted automatically. This approach makes it very easy to offload work to separate worker processes etc. &lt;/p&gt;

&lt;p&gt;All this comes courtesy of &lt;a href=&quot;https://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt;, the language on which Elixir is built, with its powerfull OTP framework for building applications and its BEAM virtual machine, which manages the processes. &lt;/p&gt;

&lt;h2&gt;Phoenix&lt;/h2&gt;

&lt;p&gt;A lot of the groundwork of Pleroma is done by &lt;a href=&quot;https://hexdocs.pm/phoenix/overview.html&quot;&gt;Phoenix&lt;/a&gt;, a very easy-to-use web server framework. Essentially, what happens is that the end user accesses the application using a specific url, typically via a web browser, and based on this url the application performs a number of actions, which in the end result in a change in the state of the application and usually in what is shown in the browser window.&lt;/p&gt;

&lt;p&gt;In Phoenix, there are five stages or components  between the connection and the resulting action by the application:&lt;/p&gt;

&lt;h3&gt;Endpoint&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.Endpoint.html&quot;&gt;endpoint&lt;/a&gt; is the boundary where all requests to your web application start. It is also the interface your application provides to the underlying web servers.&lt;/p&gt;

&lt;p&gt;Pleroma&amp;#39;s endpoint is &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/endpoint.ex&quot;&gt;&lt;code&gt;web/endpoint.ex&lt;/code&gt;&lt;/a&gt;. If you look at the source you see several occurrences of &lt;code&gt;plug(Plug...)&lt;/code&gt;. &lt;a href=&quot;https://hexdocs.pm/phoenix/plug.html&quot;&gt;Plug&lt;/a&gt; is a specification for composable modules in between web applications, and it is very heavily used in Pleroma.  For example, to serve only specific static files/folders from &lt;code&gt;priv/static&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Plug.Static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pleroma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~w(index.html static finmoji emoji packs sounds images instance sw.js)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another very nice feature of Phoenis is that you can edit your code while your server is running. It gets automatically recompiled and the affected processes are automatically restarted, courtesy of the &lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.CodeReloader.html&quot;&gt;Phoenix.CodeReloader&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Code reloading can be explicitly enabled under the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# :code_reloader configuration of your endpoint.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_reloading?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Phoenix.CodeReloader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Router&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.Router.html&quot;&gt;Routers&lt;/a&gt; are the main hubs of Phoenix applications. They match HTTP requests to controller actions, wire up real-time channel handlers, and define a series of pipeline transformations for scoping middleware to sets of routes.&lt;/p&gt;

&lt;p&gt;Pleroma&amp;#39;s router is &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/router.ex&quot;&gt;&lt;code&gt;web/router.ex&lt;/code&gt;&lt;/a&gt;. The key function in the router is the &lt;code&gt;pipeline&lt;/code&gt; which lets you create pipelines of plugs. Other functions are &lt;code&gt;scope&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;pipe_through&lt;/code&gt;, all of these let you match on the url and whether you are dealing with a get or post request, and define appropriate pipelines of actions. For example, federated ActivityPub requests handled as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pleroma.Web.ActivityPub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pipe_through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:activitypub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/users/:nickname/inbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityPubController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/inbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityPubController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where the &lt;code&gt;pipe_through(:activitypub)&lt;/code&gt; call is used to insert a custom pipeline:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:activitypub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:accepts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;activity+json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Web.Plugs.HTTPSignaturePlug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Controllers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.Controller.htm&quot;&gt;Controllers&lt;/a&gt; are used to group common functionality in the same (pluggable) module.  &lt;/p&gt;

&lt;p&gt;Pleroma makes heavy use of controllers: almost every request is handled by a specific controller for any given protocol, e.g. &lt;code&gt;MastodonAPIController&lt;/code&gt; or &lt;code&gt;ActivityPubController&lt;/code&gt;. This makes it easy to identify the files to work on if you need to make a change to the code for a given protocol. For example, the ActivityPub post requests in the Router are handled by &lt;code&gt;inbox&lt;/code&gt; function in the &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/activity_pub/activity_pub_controller.ex&quot;&gt;ActivityPubController&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;assigns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;valid_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Federator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:incoming_ap_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Views&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.View.html&quot;&gt;Views&lt;/a&gt; are used to control the rendering of templates. You create a view module, a template and a set of assigns, which are basically key-value pairs.&lt;/p&gt;

&lt;p&gt;Pleroma uses views for &amp;quot;rendering&amp;quot; JSON objects. For example in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/activity_pub/activity_pub_controller.ex&quot;&gt;&lt;code&gt;web/activity_pub/activity_pub_controller.ex&lt;/code&gt;&lt;/a&gt; there are lines like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;user.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;UserView.render&lt;/code&gt; is defined in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/activity_pub/views/user_view.ex&quot;&gt;&lt;code&gt;web/activity_pub/views/user_view.ex&lt;/code&gt;&lt;/a&gt; for a number of different &amp;quot;*.json&amp;quot; strings. These are not really templates, they are simply used to pattern match on the function definitions.&lt;/p&gt;

&lt;p&gt;The more conventional usage to create HTML is also used, e.g. the template &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/templates/mastodon_api/mastodon/index.html.eex&quot;&gt;&lt;code&gt;web/templates/mastodon_api/mastodon/index.html.eex&lt;/code&gt;&lt;/a&gt;
is used in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/mastodon_api/mastodon_api_controller.ex&quot;&gt;&lt;code&gt;web/mastodon_api/mastodon_api_controller.ex&lt;/code&gt;&lt;/a&gt; via the view
&lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/mastodon_api/views/mastodon_view.ex&quot;&gt;&lt;code&gt;web/mastodon_api/views/mastodon_view.ex&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MastodonView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;initial_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Templates&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.Template.html&quot;&gt;Templates&lt;/a&gt; are text files (typically html pages) with Elixir code to generate the specific values based on the assigns, included in &lt;code&gt;&amp;lt;%= ... %&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, in Pleroma, the Mastodon front-end uses a template for the &lt;code&gt;index.html&lt;/code&gt; file which has the code&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pleroma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to show the name of the instance.&lt;/p&gt;

&lt;h2&gt;Ecto&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/ecto/Ecto.html&quot;&gt;Ecto&lt;/a&gt; is not a part of Phoenix, but it is an integral part of most web applications: Ecto is Elixir&amp;#39;s main library for working with databases. It provides the tools to interact with databases under a common API.&lt;/p&gt;

&lt;p&gt;Ecto is split into 4 main components:&lt;/p&gt;

&lt;p&gt;Ecto.Repo - repositories are wrappers around the data store. Via the repository, we can create, update, destroy and query existing entries. A repository needs an adapter and credentials to communicate to the database&lt;/p&gt;

&lt;p&gt;Pleroma uses the PostgresQL database.&lt;/p&gt;

&lt;p&gt;Ecto.Schema - schemas are used mainly to map tables into Elixir data (there are other use cases too).&lt;/p&gt;

&lt;p&gt;Ecto.Changeset - changesets provide a way for developers to filter and cast external parameters, as well as a mechanism to track and validate changes before they are applied to your data&lt;/p&gt;

&lt;p&gt;Ecto.Query - written in Elixir syntax, queries are used to retrieve information from the database.&lt;/p&gt;

&lt;h2&gt;GenServer&lt;/h2&gt;

&lt;p&gt;Because Elixir, like Erlang, uses a processes-with-message-passing paradigm, client-server relationships are so common that they have been abstracted as a &lt;em&gt;behaviour&lt;/em&gt;, which in Elixir is a specification for composable modules which have to implement specified public functions (a bit like an interface in Java or typeclass in Haskell).&lt;/p&gt;

&lt;p&gt;If we look at the &lt;code&gt;Federator.enqueue&lt;/code&gt; function, its implementation actually reduces to a single line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;GenServer&lt;/a&gt; is an Elixir behaviour module for implementing the server of a client-server relation. The &lt;code&gt;cast&lt;/code&gt; call sends an asynchronous request to the server (synchronous requests use &lt;code&gt;call&lt;/code&gt;). The server behaviour is implemented using the &lt;code&gt;handle_cast&lt;/code&gt; callback, which handles &lt;code&gt;cast&lt;/code&gt; calls. &lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/federator/federator.ex&quot;&gt;&lt;code&gt;Pleroma.Federator&lt;/code&gt;&lt;/a&gt;, these are implemented in the same module as the &lt;code&gt;enqueue&lt;/code&gt; function, hence the use of &lt;code&gt;__MODULE__&lt;/code&gt; rather than the hardcoded module name.&lt;/p&gt;

&lt;h2&gt;Applications, Workers and Supervisors&lt;/h2&gt;

&lt;p&gt;Elixir borrows the concept of a &amp;quot;supervision tree&amp;quot; from Erlang/OTP. AN application consists of a tree of processes than can either be &lt;em&gt;supervisors&lt;/em&gt; or &lt;em&gt;workers&lt;/em&gt;. The task of a supervisors is to ensure that the worker processes do their work, including distributing the work and restarting the worker processes when they die. Supervisors can supervise either worker or other supervisors, so you can build a &lt;em&gt;supervision tree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Elixir provides an &lt;a href=&quot;http://elixir-lang.org/docs/stable/elixir/Application.html&quot;&gt;Application&lt;/a&gt; behaviour module and a &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;Supervisor&lt;/a&gt; module to make this easy. The Application module requires a &lt;code&gt;start()&lt;/code&gt; function as entry point. Typical code to create a supervision tree is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;start_link()&lt;/code&gt; spawns the top process of the tree, and it spawns all the child processes in the list &lt;code&gt;children&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Pleroma uses a convenient but deprecated module called &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.Spec.html&quot;&gt;Supervisor.Spec&lt;/a&gt; which provides &lt;code&gt;worker()&lt;/code&gt; and &lt;code&gt;supervisor()&lt;/code&gt; functions, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Web.Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Web.Federator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every worker has this own &lt;code&gt;start_link&lt;/code&gt; function,  e.g.  in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/federator/federator.ex&quot;&gt;&lt;code&gt;web/federator/federator.ex&lt;/code&gt;&lt;/a&gt; we find: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that the Federator module borrows the &lt;code&gt;start_link&lt;/code&gt; from the GenServer module. This is a very common way to create a worker.&lt;/p&gt;

&lt;h2&gt;Mix&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;Mix&lt;/a&gt; is the build tool for Elixir, and its main advantage is that the build scripts are also written in Elixir. Some key &lt;code&gt;mix&lt;/code&gt; actions are provided by Phoenix, for example to build and run the final Pleroma application the action is &lt;code&gt;mix phx.server&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Hacking Pleroma&lt;/h2&gt;

&lt;p&gt;After this brief tour of Elixir and Phoenix I want to give an example of adding simple bot functionality to Pleroma. See &lt;a href=&quot;https://git.pleroma.social/andarna/pleroma&quot;&gt;my fork of Pleroma&lt;/a&gt; for the code.&lt;/p&gt;

&lt;p&gt;My bot parses incoming messages for &lt;code&gt;@pixelbot&lt;/code&gt;, extracts a list of pixel from the message, modifies a canvas with the new pixels and creates a PNG image of the result. It then posts a link to the PNG image. &lt;/p&gt;

&lt;h3&gt;Adding a worker&lt;/h3&gt;

&lt;p&gt;Because updating the canvas and creating the PNG image could be time-consuming, especially if the canvas were large, I put this functionality in a separate server module, and added this to the list of workers for the &lt;a href=&quot;https://git.pleroma.social/andarna/pleroma/tree/develop/lib/pleroma/application.ex&quot;&gt;main Pleroma application&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bot_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Bots.PixelBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_canvas_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PixelBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bot takes the size of the canvas from my &lt;a href=&quot;https://git.pleroma.social/andarna/pleroma/blob/develop/config/config.exs&quot;&gt;&lt;code&gt;config.exs&lt;/code&gt;&lt;/a&gt; using the helper function &lt;code&gt;get_canvas_size()&lt;/code&gt;. The &lt;code&gt;id: PixelBot&lt;/code&gt; allows to access the worker by name.&lt;/p&gt;

&lt;p&gt;When the application starts, it launches the PixelBot worker (&lt;a href=&quot;https://git.pleroma.social/andarna/pleroma/tree/develop/lib/pleroma/bots/pixelbot.ex&quot;&gt;&lt;code&gt;bots/pixelbot.ex&lt;/code&gt;&lt;/a&gt;). The worker calls its &lt;code&gt;init()&lt;/code&gt; function (part of the GenServer behaviour) which loads the last canvas from a file.&lt;/p&gt;

&lt;h3&gt;A bit of ActivityPub&lt;/h3&gt;

&lt;p&gt;One of the protocols used for federation is &lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;. The specification is long and not so easy to read. However, for the purpose of hacking Pleroma it mainly
helps to understand the structure of an ActivityPub &lt;em&gt;action&lt;/em&gt; (in this case a post):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;actor&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/followers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/contexts/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/activities/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;actor&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/media/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&amp;quot;mediaType&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Link&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/followers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/contexts/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;emoji&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{},&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/objects/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;published&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://www.w3.org/ns/activitystreams&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Public&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Note&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;published&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://www.w3.org/ns/activitystreams&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Public&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Create&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inserted_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://www.w3.org/ns/activitystreams&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Public&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/followers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndt&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case, &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://pynq.limited.systems&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/users/pixelbot&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;canvas.png&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Canvas:&amp;lt;br&amp;gt;&amp;lt;a href=\&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/media/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\&amp;quot; class=&amp;#39;attachment&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Pleroma this activity is linked to the Ecto repository Pleroma.Repo (&lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/repo.ex&quot;&gt;&lt;code&gt;repo.ex&lt;/code&gt;&lt;/a&gt;) in the module Pleroma.Activity (&lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/activity.ex&quot;&gt;&lt;code&gt;activity.ex&lt;/code&gt;&lt;/a&gt;), which defines a schema.&lt;/p&gt;

&lt;h3&gt;Getting the messages&lt;/h3&gt;

&lt;p&gt;The bot only supports ActivityPub. As we have seen above, in Pleroma incoming messages are handled by &lt;code&gt;inbox&lt;/code&gt; function in the ActivityPubController (in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/activity_pub/activity_pub_controller.ex&quot;&gt;&lt;code&gt;web/activity_pub/activity_pub_controller.ex&lt;/code&gt;&lt;/a&gt;), so I put in a little hook there to detect if a message is for &lt;code&gt;@pixelbot&lt;/code&gt; and has an actual message body (&lt;code&gt;content&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;assigns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;valid_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;nickname&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;nickname&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pixelbot&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pleroma.Bots.PixelBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:nok&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:nok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the content of a message for &lt;code&gt;@pixelbot&lt;/code&gt; is passed on to the PixelBot worker for processing using the &lt;code&gt;GenServer.cast(Pleroma.Bots.PixelBot,content)&lt;/code&gt; call.&lt;/p&gt;

&lt;h3&gt;Processing the messages&lt;/h3&gt;

&lt;p&gt;The PixelBot worker parses the message to extract any pixels from it (&lt;a href=&quot;https://git.pleroma.social/andarna/pleroma/tree/develop/lib/pleroma/bots/pixelbot/parse_messages.ex&quot;&gt;&lt;code&gt;bots/pixelbot/parse_messages.ex&lt;/code&gt;&lt;/a&gt;). If there are any, it updates the canvas (which is just a list of lists). It and writes the content to a file, and calls an external program to create the final image. &lt;/p&gt;

&lt;h3&gt;Posting a reply&lt;/h3&gt;

&lt;p&gt;Finally, the bot posts a status to the public timeline (&lt;a href=&quot;https://git.pleroma.social/andarna/pleroma/tree/develop/lib/pleroma/bots/pixelbot/pixelbot_post_status.ex&quot;&gt;&lt;code&gt;bots/pixelbot/pixelbot_post_status.ex&lt;/code&gt;&lt;/a&gt;). The status contains the current time and a link to the latest canvas.  The function &lt;code&gt;pixelbot_post_status()&lt;/code&gt; creates the status and wraps it in the correct structure required by ActivityPub. &lt;/p&gt;

&lt;p&gt;It also gets the user object based on the nickname via &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/user.ex&quot;&gt;&lt;code&gt;Pleroma.User.get_cached_by_nickname(nickname)&lt;/code&gt;&lt;/a&gt;. Like the activity, this user object is defined via a schema and linked to the Ecto repository (in &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/user.ex&quot;&gt;&lt;code&gt;user.ex&lt;/code&gt;&lt;/a&gt;). So &lt;code&gt;user&lt;/code&gt; in the code below is a complicated object, not a url or nickname.&lt;/p&gt;

&lt;p&gt;Finally, the function calls &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/web/activity_pub/activity_pub.ex&quot;&gt;&lt;code&gt;ActivityPub.create()&lt;/code&gt;&lt;/a&gt; which creates the activity, and in this case that means it posts a status.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixelbot_post_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utc_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pixelbot&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pleroma.User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_cached_by_nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#get_visibility(data)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://pynq.limited.systems&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/users/pixelbot&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;canvas_512x512.png&amp;quot;&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://www.w3.org/ns/activitystreams&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Public&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/followers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/contexts/pixelbot-dummy-context&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;actor&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Image&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/pixelbot/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&amp;quot;mediaType&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Link&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pixelbot-dummy-uuid&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/followers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Canvas at &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;br&amp;gt;&amp;lt;a href=\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/pixelbot/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;\&amp;quot; class=&amp;#39;attachment&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_file_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/a&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;emoji&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&amp;quot;to&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://www.w3.org/ns/activitystreams&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Public&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Note&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Pleroma.Web.ActivityPub.ActivityPub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;additional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Pleroma.User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increase_note_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Pleroma source tree&lt;/h2&gt;

&lt;p&gt;This is only a part of the &lt;a href=&quot;https://git.pleroma.social/pleroma/pleroma/blob/develop/lib/pleroma/&quot;&gt;Pleroma source tree&lt;/a&gt;, it shows on the files mentioned above.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;/lib/pleroma/
├── activity.ex
├── application.ex
├── notification.ex
├── object.ex
├── plugs
│   ├── authentication_plug.ex
│   ├── http_signature.ex
│   └── oauth_plug.ex
├── repo.ex
├── user.ex
└── web
    ├── activity_pub
    │   ├── activity_pub.ex
    │   ├── activity_pub_controller.ex
    │   ├── transmogrifier.ex
    │   ├── utils.ex
    │   └── views
    │       ├── object_view.ex
    │       └── user_view.ex
    ├── common_api
    │   ├── common_api.ex
    │   └── utils.ex
    ├── endpoint.ex
    ├── federator
    │   └── federator.ex
    ├── mastodon_api
    │   ├── mastodon_api.ex
    │   ├── mastodon_api_controller.ex
    │   ├── mastodon_socket.ex
    │   └── views
    │       ├── mastodon_view.ex
    ├── router.ex
    ├── templates
    │   ├── mastodon_api
    │   │   └── mastodon
    │   │       ├── index.html.eex
    ├── web.ex
    ├── web_finger
    │   ├── web_finger.ex
    │   └── web_finger_controller.ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        </content>
    </entry>
    
    <entry>
        <title>A little maths puzzle in two parts</title>
        <link href="https://wimvanderbauwhede.github.io/articles/constructing-a-pentagon/"/>
        <updated>2018-03-13T00:00:00+00:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/constructing-a-pentagon</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/constructing-a-pentagon_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;I like solving little maths puzzles, deriving known results using nothing more complicated than secondary school level trigonometry, algebra and maybe a little calculus. The one below is actually two puzzles, but both have to do with regular polygons. &lt;/p&gt;

&lt;h2&gt;Part 1 Approximating &amp;pi; by the perimeter of a regular polygon&lt;/h2&gt;

&lt;p&gt;Can one approximate $\pi$ by the perimeter of regular polygon with
increasing numbers of sides inscribed in a unit circle, so starting with
a triangle, then a hexagon, a dodecagon,... ? You may say that is obvious: the more sides, the closer the polygon approximates a circle. But I still wanted to work out the proof.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/polygons-to-pi.png&quot; width=&quot;80%&quot; alt=&quot;Relationship between length of the side of a polygon and the
angle&quot; id=&quot;fig:Relationship-between-lenght&quot; /&gt;
&lt;figcaption&gt;Figure 1. Relationship between length of the side of a polygon and the
angle&lt;/figcaption&gt;&lt;/figure&gt;

From  &lt;a href=&quot;#fig:Relationship-between-lenght&quot;&gt;Figure 1&lt;/a&gt;, clearly

$$\begin{equation}
b=2\,sin\frac{\alpha}{2}\label{eq:1}
\end{equation}$$


For a polygon with *n* sides, we have

$$\begin{equation}
\alpha=\frac{2\pi}{n}\label{eq:2}
\end{equation}$$

So we can express the lenght of the side of a polygon as a function of
the number of sides as

$$\begin{equation}
b(n)=2\,sin\frac{\pi}{n}\label{eq:3}
\end{equation}$$

The perimeter of a regular polygon is obviously

$$\begin{align}
n.b(n) &amp; = &amp; 2n\,sin\frac{\pi}{n}\label{eq:4}\\
 &amp; = &amp; 2\pi\frac{sin\frac{\pi}{n}}{\frac{\pi}{n}}\nonumber \end{align}$$

We know that

$$\begin{equation}
\underset{x\rightarrow0}{lim}\frac{sin\,x}{x}=1\label{eq:5}
\end{equation}$$


This is easily proven using &lt;a href=&quot;https://en.wikipedia.org/wiki/L%27H%C3%B4pital%27s_rule&quot;&gt;de l’Hôpital’s
rule&lt;/a&gt;
&lt;br&gt;&lt;br&gt;

Using $x=\frac{\pi}{n}$ it follows indeed that

$$\begin{equation}
\underset{n\rightarrow\infty}{lim}n.b(n)=2\pi\label{eq:6}
\end{equation}$$

In other words the perimeter of successive polygons inscribed in a unit
circle does approach $2\pi$ -- which of course comes hardly as a surprise.

The following code implements this starting from a polygon with a given number of sides $n$ . The argument $h$ is half of the length of the side, and $n_{max}$ is the number of iterations. What the algorithm does is recursively creating polygons with $n, 2n, 4n, 8n, ... $ sides. The example starts from a triangle so $n=3$ and $h=\sqrt(3)/2$.
&lt;br&gt;
&lt;br&gt;

&lt;code style=&quot;font-size:80%&quot;&gt;
      -- n: # sides of the polygon&lt;br&gt;
      -- h: half of the length of a side&lt;br&gt;
&lt;br&gt;
      approx_pi n h n_max&lt;br&gt;
        | n == n_max = n*h&lt;br&gt;
        | otherwise =&lt;br&gt;
            approx_pi (2*n) (sqrt ((1 - sqrt (1-h*h) )/2)) n_max&lt;br&gt;
      -- e.g starting from a triangle.&lt;br&gt;
      main = print $ approx_pi 3 ((sqrt 3)/2) (3*2**14)&lt;br&gt;
&lt;br&gt;
&lt;/code&gt;
&lt;br&gt;

What I find interesting is that every prime polygon produces a different series but they all converge towards $\pi$.
&lt;br&gt;

&lt;figure&gt;
&lt;/figure&gt;

&lt;h2&gt;Part 2 How to construct a pentagon using a compass and a ruler&lt;/h2&gt;

&lt;p&gt;People have worked out &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentagon&quot;&gt;how to construct a pentagon using only a compass
and a ruler&lt;/a&gt; long ago. Nevertheless, I wanted to derive the construction
from first principles.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/pentagon-relationships.png&quot; width=&quot;80%&quot;  alt=&quot;Relationships in a pentagon&quot; id=&quot;fig:Relationships-in-a&quot; /&gt;
&lt;figcaption&gt;Figure 2. Relationships in a pentagon&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;The length of a side of a pentagon&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;#fig:Relationships-in-a&quot;&gt;Figure 2&lt;/a&gt; we can write down some
straightforward relationships between the length of a side of a pentagon
(&lt;em&gt;b&lt;/em&gt; from the previous part) and the angle of the arc, $\frac{2\pi}{5}$.&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
x=\frac{b}{2}=sin\frac{\pi}{5}\label{eq:2.1}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
y=cos\frac{\pi}{5}\label{eq:2.2}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
x^{2}+y^{2}=1\label{eq:2.3}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
q = 2sin\frac{2\pi}{5}=4sin\frac{\pi}{5}cos\frac{\pi}{5}\label{eq:2.4}\end{equation}$$&lt;/p&gt;

&lt;p&gt;Substitution of Eqs. $\ref{eq:2.1}$ and $\ref{eq:2.2}$ gives&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
q = 4xy\label{eq:2.5}\end{equation}$$&lt;/p&gt;

&lt;p&gt;Now we consider the right triangle with hypothenuse &lt;em&gt;q&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
q^{2} = x^{2}+(1+y)^{2}\label{eq:2.6}\end{equation}$$&lt;/p&gt;

&lt;p&gt;Substitution of Eq. $\ref{eq:2.3}$ in the RHS of Eq. $\ref{eq:2.6}$ and refactoring gives:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
q^{2} = 2+2y\label{eq:2.7}\end{equation}$$&lt;/p&gt;

&lt;p&gt;Substitution of Eq. $\ref{eq:2.3}$ and Eq. $\ref{eq:2.5}$ in the LHS of Eq. $\ref{eq:2.7}$ and refactoring gives:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
(4-(2y)^{2})(2y)^{2} = 2+2y\label{eq:2.8}\end{equation}$$&lt;/p&gt;

&lt;p&gt;Now we define $z=2y$ and rewrite Eq. $\ref{eq:2.8}$ as:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
(4-z^{2}).z^{2}=2+z\label{eq:2.9}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;Which after more refactoring finally gives&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
z^{2}(2-z)-1=0\label{eq:2.10}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;This is a third-order equation but fortunately there is an obvious root
for $z=1$. After some factorization we obtain the remaining second-order
equation:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
z^{2}-z-1=0\label{eq:2.11}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;The roots of this equation are:&lt;/p&gt;

&lt;p&gt;$$\begin{align}
z &amp;amp; = &amp;amp; \frac{1\pm\sqrt{(-1)^{2}-4.1.(-1)}}{2.1}\label{eq:2.12}\
 &amp;amp; = &amp;amp; \frac{1\pm\sqrt{5}}{2}\nonumber \end{align}$$&lt;/p&gt;

&lt;p&gt;This is actually a very famous equation and its positive root is known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Golden_ratio&quot;&gt;Golden ratio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;$$\begin{align}
\phi &amp;amp; = &amp;amp; \frac{1}{a} &amp;amp; = &amp;amp; \frac{a}{1-a}\label{eq:goldenratio}
\end{align}$$&lt;/p&gt;

&lt;p&gt;Clearly &lt;em&gt;y&lt;/em&gt; as defined is positive so $y=\frac{z}{2}=\frac{\phi}{2}$ or&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
y=\frac{1+\sqrt{5}}{4}\label{eq:2.13}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;From Eq. $\ref{eq:2.13}$ we can express &lt;em&gt;b&lt;/em&gt; in terms of &lt;em&gt;y&lt;/em&gt; using Eqns
$\ref{eq:2.1}$, $\ref{eq:2.2}$ and $\ref{eq:2.3}$:&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
b=2\sqrt{1-y^{2}}\label{eq:2.14}
\end{equation}$$&lt;/p&gt;

&lt;p&gt;And so we obtain the expression for the length of the side of a pentagon
as&lt;/p&gt;

&lt;p&gt;$$\begin{equation}
b=\sqrt{\frac{5-\sqrt{5}}{2}}\label{eq:2.15}
\end{equation}$$&lt;/p&gt;

&lt;h3&gt;Construction of the pentagon&lt;/h3&gt;

&lt;p&gt;The remaining question is then, how do we construct a line of length &lt;em&gt;b&lt;/em&gt;
using a rules and compass?&lt;/p&gt;

&lt;p&gt;We do this indirectly, by constructing a line
of length &lt;em&gt;y&lt;/em&gt; as shown in &lt;a href=&quot;#fig:Construction-of-a&quot;&gt;Figure 3&lt;/a&gt;. First, we
construct a line of length 1/2. Then the hypothenuse of the right
triangle with sides 1/2 and 1 has a lenght of $\frac{\sqrt{5}}{2}$. We
add this to the 1/2 by drawing an arc of radius $\frac{\sqrt{5}}{2}$
using the compass. This way we get a line of length
$\phi = \frac{1+\sqrt{5}}{2}$. Dividing this into two gives &lt;em&gt;y&lt;/em&gt; and through the
way we constructed this, we immediately get &lt;em&gt;b&lt;/em&gt; as well and so we can
construct the pentagon using arcs of radius &lt;em&gt;b&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/pentagon-construction.png&quot; alt=&quot;Construction of a regular pentagon using ruler and compass&quot; id=&quot;fig:Construction-of-a&quot; /&gt;
&lt;figcaption&gt;Figure 3. Construction of a regular pentagon using ruler and compass&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;A hidden triangle&lt;/h3&gt;

&lt;p&gt;The equation we solved to obtain &lt;em&gt;y&lt;/em&gt; (&lt;a href=&quot;#eq:2.11&quot;&gt;Eq. $\ref{eq:2.10}$&lt;/a&gt;) is a third order equation, and
its other positive root is $z=1$. This shows in a way the danger of transforming a geometry problem into algebra:
only one of these roots, $z=\phi$, corresponds to a solution of our geometric problem.&lt;/p&gt;

&lt;p&gt;But there is also a geometric interpretation for the root $z=1$. Substitution of $y=1/2$ in the equations for  results in $q=\sqrt{3}$ and $b=\sqrt{3}$,
in other words a regular triangle inscribed in the unit circle.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/triangle-relationships.png&quot; width=&quot;70%&quot; alt=&quot;Relationships in a triangle&quot; id=&quot;fig:Relationships-in-a&quot; /&gt;
&lt;figcaption&gt;Figure 4. Relationships in a triangle&lt;/figcaption&gt;
&lt;/figure&gt;

        </content>
    </entry>
    
    <entry>
        <title>A strategy for debugging</title>
        <link href="https://wimvanderbauwhede.github.io/articles/debugging/"/>
        <updated>2018-03-05T00:00:00+00:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/debugging</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/debugging_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;For a long time it has been my contention that for a developer, more than programming, debugging should be treated as a core skill. A developer typically spends more time debugging code than writing code so it makes sense to try and optimize this process. Over the years I have developed a strategy for debugging. I see debugging as a generic, transferable skill that is applicable not only to coding but to any form of systems design.&lt;/p&gt;

&lt;h2&gt;The mental models&lt;/h2&gt;

&lt;p&gt;To debug a system we need a mental model, an understanding of the system in our mind. I believe this is the real cornerstone of debugging, and the common mistake is to spend too little time in constructing these models.&lt;/p&gt;

&lt;p&gt;The mental model should cover all aspects of the system that you need to understand. For example, if you want to understand why a program is slow, your mental model of the system should allow you to reason about the performance trade-offs.&lt;/p&gt;

&lt;p&gt;I distinguish three types of mental models, each of them corresponds to a different view of the system.&lt;/p&gt;

&lt;h3&gt;Behavioural system model&lt;/h3&gt;

&lt;p&gt;The understanding of &lt;em&gt;what&lt;/em&gt; the system does (or should do), how it should behave, is the &lt;em&gt;behavioural&lt;/em&gt; model. A bug is observed through this model: the system behaves in a way that does not conform to the behavioural model.
Usually (or at least if you&amp;#39;re lucky) the behavioural system model is codified in a specification.&lt;/p&gt;

&lt;h3&gt;Operational system model&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;operational&lt;/em&gt; system model is your understanding of &lt;em&gt;how&lt;/em&gt; the system works. This model allows us to formulate hypotheses about &lt;em&gt;why&lt;/em&gt; the system does not behave as expected. This is the most important mental system model, and part of the debugging process is actually improving and refining this model.&lt;/p&gt;

&lt;p&gt;In many cases, the operational model is actually your model of how a program in a given language is compiled/interpreted and executed on the hardware. This model starts from the syntax and semantics of the programming language, and includes a model for any API used in the code. As a trivial example, in Python, the keys in a dictionary are unordered, whereas the default in a C++ map is ordered.&lt;/p&gt;

&lt;p&gt;The closer you are to the bare metal, or the more you care about performance or memory footprint, the more details your mental model will have to include about the actual hardware, to the extent that for e.g. running code on FPGAs you even need to have a detailed mental model for the memory controllers. For debugging in higher-level languages, usually the model can be much more abstract, with a basic notion of memory management and code execution.&lt;/p&gt;

&lt;h3&gt;Structural system model&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;structural&lt;/em&gt; system model is the model of &lt;em&gt;where&lt;/em&gt; we should look to trace and fix a bug. For software, this model is our understanding of the code structure. In general, the structure of software systems tends to be hierarchical and relatively loosely coupled. This means we only need to focus on a fraction of the codebase at a time. If this were not the case, debugging time would grow more than linearly with the code size. Fortunately for most systems it&amp;#39;s closer to logarithmic.&lt;/p&gt;

&lt;h2&gt;The debugging activity&lt;/h2&gt;

&lt;p&gt;Given the above mental system models, the activity of debugging is an iterative process involving several steps, and during the process we often jump between these steps.&lt;/p&gt;

&lt;h3&gt;Identifying the bug&lt;/h3&gt;

&lt;p&gt;First, identify the bug. Is it really a bug or is your behavioural model incorrect, not specific enough or ambiguous? If necessary, adapt the model and re-iterate.&lt;/p&gt;

&lt;p&gt;Then there are essentially three stages in the process of finding the bug.&lt;/p&gt;

&lt;h3&gt;Narrowing down through exclusion&lt;/h3&gt;

&lt;p&gt;We start by narrowing down through a process of exclusion: &amp;quot;This bug can&amp;#39;t be caused by X because of reason Y&amp;quot;. This process relies mostly on the operational system model, but sometimes also on the structural model, especially if you&amp;#39;re not 100% certain: &amp;quot;it is unlikely that the bug is in module X because of reason Y&amp;quot;. For example, it is unlikely that the cause of the bug is located in a standard library, compiler or interpreter. The chances that the bug is in your own code is much higher, so that possibility should be explored first.&lt;/p&gt;

&lt;h3&gt;Formulating hypotheses&lt;/h3&gt;

&lt;p&gt;Once we cannot proceed any further through exclusion, we switch to the most interesting stage. We formulate a hypothesis &amp;quot;Let&amp;#39;s assume that the bug is caused by X&amp;quot; and then we use this as the basis for further investigation.&lt;/p&gt;

&lt;p&gt;The main difference between exclusion and formulating a hypothesis is that when we formulate a hypothesis, we don&amp;#39;t know if it is true or false, so we need to test it. With the exclusion process, we do know that our stated reason holds -- or at least we have a high degree of confidence -- so we don&amp;#39;t test it.&lt;/p&gt;

&lt;p&gt;Quite frequently our hypothesis will prove to be false, and then we have one fewer possible cause for the bug. Equally frequently, when our hypothesis proves to be false, this indicates that our operational model is incomplete. In that case we should formulate additional hypotheses to improve our mental model. I believe this is an important step that is often skipped because it seems to detract from the real task, i.e. finding the bug. But without an accurate operational model, it is much harder to find bugs, so the time spent in improving your system knowledge is always well spent.&lt;/p&gt;

&lt;h3&gt;Gathering information&lt;/h3&gt;

&lt;p&gt;To test a hypothesis we can either use emulation or observation of the system behaviour. This requires the structural model to tell us where to look.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By emulation I mean that we mentally run part of a program using our operational model. In that case we assume that our operational model is accurate enough to produce the same result as the actual system. In general, this is a tricky approach to debugging because if our mental model is inaccurate we won&amp;#39;t find the bug. However, it is generally the approach taken when we have narrowed down the location of the bug sufficiently.&lt;/li&gt;
&lt;li&gt;We can observe the system behaviour through compiler or interpreter warnings, by using a debugger, or by making the code generate additional information. This requires a good structural model to guide us to the locations that we want to inspect using the debugger or where we want to add the code to generate the debugging information.&lt;/li&gt;
&lt;li&gt;Either way, the result should be some information that helps to test the hypothesis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Example scenarios&lt;/h2&gt;

&lt;h3&gt;Debugging your own code&lt;/h3&gt;

&lt;p&gt;Debugging code you wrote and understand, and whose use case is intimately familiar to you, should be the easiest type of debugging. However, the problem with this kind of code is often that, precisely because it is your own code and you have a very precise behavioural model, and of course a perfect structural model, you never bothered to create an accurate operational model of the code. This may sound strange because after all, if you wrote it, you should know how it works. But the reality is that we often perform very limited mental verification, esp. of corner cases, on our own code.&lt;/p&gt;

&lt;h3&gt;Debugging a minimal, complete, and verifiable example&lt;/h3&gt;

&lt;p&gt;Debugging someone else&amp;#39;s code is much harder because you typically lack all of the mental models.&lt;/p&gt;

&lt;p&gt;I often have to debug code written by my students, usually long after they have graduated. The main conclusion is that we should teach our students how to write maintainable code, i.e. code that makes it easy to understand the structural model.&lt;/p&gt;

&lt;p&gt;If the code is a Minimal, Complete, and Verifiable example &lt;a href=&quot;https://stackoverflow.com/help/mcve&quot;&gt;MCVE&lt;/a&gt; then building your mental models is relatively easy because the code base should be small and self-contained. For such examples, the operational model is usually defined at the level of language semantics and standard library APIs. There is a nice detailed post about debugging small programs on &lt;a href=&quot;https://ericlippert.com/2014/03/05/how-to-debug-small-programs/&quot;&gt;Eric Lippert&amp;#39;s blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Debugging a huge codebase&lt;/h3&gt;

&lt;p&gt;The main challenge with debugging a truly huge codebase (millions of lines of code) is that you need to build mental models that cover the overall system, even if you are looking to debug a very specific aspect of the system behaviour.&lt;/p&gt;

&lt;p&gt;For example, some years ago I modified the Weather Research and Forecasting model to run on GPUs, and debugged the changes. This is a numerical weather simulator with a codebase of about two million lines of Fortran 90. It is very well architected and there is reasonably good documentation. The main challenge in this system was actually to understand the build system first, because a large amount of code is generated at build time. Apart from that, I had to learn how a weather simulator works at the level of the physics, and how the code was parallelised. I modified the part of the code known as the advection kernel, to make it work on GPUs. As expected, the changes were not first-time-right, and debugging GPU code is difficult because it is hard to observe what happens inside the GPU. Nevertheless, I followed essentially the approach outlined above.
In this case, the original, unmodified code provided the reference behavioural model. I built the structural model through the process of working out which part of the code needed to be modified.  So the difficulty was as usual with the operational model, and in this case the bugs mostly originated from the fact that the GPU code is essentially C, and the host code Fortran, and they have different views on arrays and argument passing.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Debugging is difficult and time consuming but a strategy based on behavioural, operational and structural mental models can make the process more efficient in a variety of scenarios.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I would like to thank &lt;a href=&quot;https://fasiha.github.io/&quot;&gt;Ahmed Fasih&lt;/a&gt; for motivating me to write this article and suggesting the example scenarios.&lt;/em&gt;&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Imagine we had better weather forecasts</title>
        <link href="https://wimvanderbauwhede.github.io/articles/better-forecasts/"/>
        <updated>2018-03-04T00:00:00+00:00</updated>
        <id>https://wimvanderbauwhede.github.io/articles/better-forecasts</id>
        <author>
					<name>Wim Vanderbauwhede</name>
					<uri>https://wimvanderbauwhede.github.io/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;https://wimvanderbauwhede.github.io/images/better-forecasts_1600x600.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;The last few days have shown that current weather forecasts are at the same time very advanced and yet not good enough. We had little warning of the very large amount of snow that would cripple our infrastructure. Earlier and more accurate warnings could help to limit the damage of such events (estimated at £470m a day just from the travel disruption). Also, better long-range predictions about the probabilities of such events in the future could help with investment and planning of infrastructure and services: should councils invest in more snow ploughs; should rail operators invest in making the network more resilient to extreme cold weather; how can the emergency services be kept running in such extreme conditions, etc.?&lt;/p&gt;

&lt;h2&gt;So why are our forecasts not better?&lt;/h2&gt;

&lt;h3&gt;Resolution&lt;/h3&gt;

&lt;p&gt;One of the main reasons is that the resolution of the weather forecasting computer models is at the moment still quite coarse. For example the MetOffice forecasting model, which is considered amongst the best in the world, divides the UK in squares of 1.5 km at its highest resolution, i.e. the simulation produces a single averaged value anywhere within this 1.5 km x 1.5 km area. The time resolution for the shortest-term forecast is 50 seconds.&lt;/p&gt;

&lt;p&gt;In contrast, for accurate simulation of local weather, a resolution of hundred metres and a time step of about a second are required. This would require a supercomputer a thousand times more powerful than the one currently in use by the MetOffice.&lt;/p&gt;

&lt;h3&gt;Speed and power&lt;/h3&gt;

&lt;!--
Computers of course get faster all the time, but about ten years ago there was a fundamental change in _how_ they got faster. This is explained very well in the famous article [&quot;The Free Lunch Is Over&quot;](http://www.gotw.ca/publications/concurrency-ddj.htm) by Herb Sutter, but the result was that computers became harder to program and older programs would actually run _slower_ on the newer computers.
--&gt;

&lt;p&gt;A key problem with supercomputers is that they consume &lt;em&gt;a lot&lt;/em&gt; of power. The current MetOffice supercomputer consumes 2.7 MW of electricity. A supercomputer a thousand times more powerful would need 2.7GW which is more than twice as much as all the electricity produced by the UK&amp;#39;s largest nuclear power station, Hinkley Point B.&lt;/p&gt;

&lt;p&gt;To reduce the power consumption, new supercomputers have started using special hardware called &lt;a href=&quot;https://www.techradar.com/news/world-of-tech/future-tech/accelerating-supercomputing-power-1223031&quot;&gt;&lt;em&gt;accelerators&lt;/em&gt;&lt;/a&gt;. Already, both the &lt;a href=&quot;https://www.top500.org/lists/2017/11/&quot;&gt;fastest&lt;/a&gt; and &lt;a href=&quot;https://www.top500.org/green500/lists/2017/11/&quot;&gt;most power-efficient&lt;/a&gt; supercomputers in the world use this technology.&lt;/p&gt;

&lt;h3&gt;Programming challenges&lt;/h3&gt;

&lt;p&gt;Unfortunately writing programs for such an accelerator-based supercomputer is very complicated. And existing programs can&amp;#39;t benefit from accelerators without major changes. Weather forecasting models are very large and complex, with around a million lines of code. Rewriting such a program is extremely difficult and time consuming.&lt;/p&gt;

&lt;h2&gt;So what&amp;#39;s hindering progress?&lt;/h2&gt;

&lt;p&gt;The holy grail is to develop a software technology that can automatically change legacy programs to make them suitable to the new, accelerator-based supercomputers. Many research groups, &lt;a href=&quot;https://www.nextplatform.com/2015/05/18/fpgas-held-back-in-hpc-but-hope-on-the-horizon/&quot;&gt;including my own&lt;/a&gt;, are working on such approaches.&lt;/p&gt;

&lt;p&gt;There is however a huge gap between a research proof-of-concept and a ready-for-use product and it takes considerable investment to bridge this gap. Unfortunately, a funding gap exists in this area: on the one hand, creating a product from a research proof-of-concept is not core research and can therefore not be funded by the Research Councils or through EU research funding. On the other hand, as there is no perceived commercial value in such a product (because the potential marked is very small), commercial funding is not an option.&lt;/p&gt;

&lt;h2&gt;Imagine&lt;/h2&gt;

&lt;p&gt;So imagine that the UK took a more joined-up view with investment to speed up the adoption of research. In the case of weather forecasting, this would help to minimize the impact on people and the economy of severe weather events like we experienced recently. It would be a thousandfold return on the investment.&lt;/p&gt;

&lt;!--
note: For even finer-grained local simulations, which would for example take into account the effect of the buildings in a city, resolutions of a few meters and time steps of a few hundredths of a second are necessary. This would require the model to compute a million times more data points than for the hundred-metres model and thus would require a billion times more computations than for the current model.
--&gt;

        </content>
    </entry>
    
</feed>